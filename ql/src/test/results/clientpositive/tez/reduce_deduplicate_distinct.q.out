PREHOOK: query: create table count_distinct_test(id int,key int,name int)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@count_distinct_test
POSTHOOK: query: create table count_distinct_test(id int,key int,name int)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@count_distinct_test
PREHOOK: query: insert into count_distinct_test values (1,1,2),(1,2,3),(1,3,2),(1,4,2),(1,5,3)
PREHOOK: type: QUERY
PREHOOK: Input: default@values__tmp__table__1
PREHOOK: Output: default@count_distinct_test
POSTHOOK: query: insert into count_distinct_test values (1,1,2),(1,2,3),(1,3,2),(1,4,2),(1,5,3)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@values__tmp__table__1
POSTHOOK: Output: default@count_distinct_test
POSTHOOK: Lineage: count_distinct_test.id EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: count_distinct_test.key EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
POSTHOOK: Lineage: count_distinct_test.name EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col3, type:string, comment:), ]
PREHOOK: query: -- simple case; no need for opt;
explain select id,count(distinct key),count(distinct name)
from count_distinct_test
group by id
PREHOOK: type: QUERY
POSTHOOK: query: -- simple case; no need for opt;
explain select id,count(distinct key),count(distinct name)
from count_distinct_test
group by id
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)

Stage-0
   Fetch Operator
      limit:-1
      Stage-1
         Reducer 2
         File Output Operator [FS_7]
            compressed:false
            Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
            table:{"serde:":"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe","input format:":"org.apache.hadoop.mapred.TextInputFormat","output format:":"org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"}
            Group By Operator [GBY_5]
            |  aggregations:["count(DISTINCT KEY._col1:0._col0)","count(DISTINCT KEY._col1:1._col0)"]
            |  keys:KEY._col0 (type: int)
            |  outputColumnNames:["_col0","_col1","_col2"]
            |  Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
            |<-Map 1 [SIMPLE_EDGE]
               Reduce Output Operator [RS_4]
                  key expressions:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                  Map-reduce partition columns:_col0 (type: int)
                  sort order:+++
                  Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator [GBY_3]
                     aggregations:["count(DISTINCT _col1)","count(DISTINCT _col2)"]
                     keys:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                     outputColumnNames:["_col0","_col1","_col2","_col3","_col4"]
                     Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                     Select Operator [SEL_1]
                        outputColumnNames:["_col0","_col1","_col2"]
                        Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                        TableScan [TS_0]
                           alias:count_distinct_test
                           Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE

PREHOOK: query: select id,count(distinct key),count(distinct name)
from count_distinct_test
group by id
PREHOOK: type: QUERY
PREHOOK: Input: default@count_distinct_test
#### A masked pattern was here ####
POSTHOOK: query: select id,count(distinct key),count(distinct name)
from count_distinct_test
group by id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@count_distinct_test
#### A masked pattern was here ####
1	5	2
PREHOOK: query: -- candidate1
explain select id,count(Distinct key),count(Distinct name)
from (select id,key,name from count_distinct_test group by id,key,name)m
group by id
PREHOOK: type: QUERY
POSTHOOK: query: -- candidate1
explain select id,count(Distinct key),count(Distinct name)
from (select id,key,name from count_distinct_test group by id,key,name)m
group by id
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)

Stage-0
   Fetch Operator
      limit:-1
      Stage-1
         Reducer 3
         File Output Operator [FS_12]
            compressed:false
            Statistics:Num rows: 1 Data size: 5 Basic stats: COMPLETE Column stats: NONE
            table:{"serde:":"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe","input format:":"org.apache.hadoop.mapred.TextInputFormat","output format:":"org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"}
            Group By Operator [GBY_10]
            |  aggregations:["count(DISTINCT KEY._col1:0._col0)","count(DISTINCT KEY._col1:1._col0)"]
            |  keys:KEY._col0 (type: int)
            |  outputColumnNames:["_col0","_col1","_col2"]
            |  Statistics:Num rows: 1 Data size: 5 Basic stats: COMPLETE Column stats: NONE
            |<-Reducer 2 [SIMPLE_EDGE]
               Reduce Output Operator [RS_9]
                  key expressions:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                  Map-reduce partition columns:_col0 (type: int)
                  sort order:+++
                  Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator [GBY_8]
                     aggregations:["count(DISTINCT _col1)","count(DISTINCT _col2)"]
                     keys:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                     outputColumnNames:["_col0","_col1","_col2","_col3","_col4"]
                     Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
                     Group By Operator [GBY_5]
                     |  keys:KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: int)
                     |  outputColumnNames:["_col0","_col1","_col2"]
                     |  Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
                     |<-Map 1 [SIMPLE_EDGE]
                        Reduce Output Operator [RS_4]
                           key expressions:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                           Map-reduce partition columns:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                           sort order:+++
                           Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                           Group By Operator [GBY_3]
                              keys:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                              outputColumnNames:["_col0","_col1","_col2"]
                              Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                              Select Operator [SEL_1]
                                 outputColumnNames:["_col0","_col1","_col2"]
                                 Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                                 TableScan [TS_0]
                                    alias:count_distinct_test
                                    Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE

PREHOOK: query: select id,count(Distinct key),count(Distinct name)
from (select id,key,name from count_distinct_test group by id,key,name)m
group by id
PREHOOK: type: QUERY
PREHOOK: Input: default@count_distinct_test
#### A masked pattern was here ####
POSTHOOK: query: select id,count(Distinct key),count(Distinct name)
from (select id,key,name from count_distinct_test group by id,key,name)m
group by id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@count_distinct_test
#### A masked pattern was here ####
1	5	2
PREHOOK: query: -- candidate2;
explain select id,count(Distinct name),count(Distinct key)
from (select id,key,name from count_distinct_test group by id,name,key)m
group by id
PREHOOK: type: QUERY
POSTHOOK: query: -- candidate2;
explain select id,count(Distinct name),count(Distinct key)
from (select id,key,name from count_distinct_test group by id,name,key)m
group by id
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)

Stage-0
   Fetch Operator
      limit:-1
      Stage-1
         Reducer 3
         File Output Operator [FS_12]
            compressed:false
            Statistics:Num rows: 1 Data size: 5 Basic stats: COMPLETE Column stats: NONE
            table:{"serde:":"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe","input format:":"org.apache.hadoop.mapred.TextInputFormat","output format:":"org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"}
            Group By Operator [GBY_10]
            |  aggregations:["count(DISTINCT KEY._col1:0._col0)","count(DISTINCT KEY._col1:1._col0)"]
            |  keys:KEY._col0 (type: int)
            |  outputColumnNames:["_col0","_col1","_col2"]
            |  Statistics:Num rows: 1 Data size: 5 Basic stats: COMPLETE Column stats: NONE
            |<-Reducer 2 [SIMPLE_EDGE]
               Reduce Output Operator [RS_9]
                  key expressions:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                  Map-reduce partition columns:_col0 (type: int)
                  sort order:+++
                  Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator [GBY_8]
                     aggregations:["count(DISTINCT _col1)","count(DISTINCT _col2)"]
                     keys:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                     outputColumnNames:["_col0","_col1","_col2","_col3","_col4"]
                     Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
                     Group By Operator [GBY_5]
                     |  keys:KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: int)
                     |  outputColumnNames:["_col0","_col1","_col2"]
                     |  Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
                     |<-Map 1 [SIMPLE_EDGE]
                        Reduce Output Operator [RS_4]
                           key expressions:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                           Map-reduce partition columns:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                           sort order:+++
                           Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                           Group By Operator [GBY_3]
                              keys:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                              outputColumnNames:["_col0","_col1","_col2"]
                              Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                              Select Operator [SEL_1]
                                 outputColumnNames:["_col0","_col1","_col2"]
                                 Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                                 TableScan [TS_0]
                                    alias:count_distinct_test
                                    Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE

PREHOOK: query: select id,count(Distinct name),count(Distinct key)
from (select id,key,name from count_distinct_test group by id,name,key)m
group by id
PREHOOK: type: QUERY
PREHOOK: Input: default@count_distinct_test
#### A masked pattern was here ####
POSTHOOK: query: select id,count(Distinct name),count(Distinct key)
from (select id,key,name from count_distinct_test group by id,name,key)m
group by id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@count_distinct_test
#### A masked pattern was here ####
1	2	5
PREHOOK: query: -- candidate1;
explain select id,count(Distinct key),count(Distinct name)
from (select id,key,name from count_distinct_test group by id,key,name)m
group by id
PREHOOK: type: QUERY
POSTHOOK: query: -- candidate1;
explain select id,count(Distinct key),count(Distinct name)
from (select id,key,name from count_distinct_test group by id,key,name)m
group by id
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)

Stage-0
   Fetch Operator
      limit:-1
      Stage-1
         Reducer 3
         File Output Operator [FS_12]
            compressed:false
            Statistics:Num rows: 1 Data size: 5 Basic stats: COMPLETE Column stats: NONE
            table:{"serde:":"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe","input format:":"org.apache.hadoop.mapred.TextInputFormat","output format:":"org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"}
            Group By Operator [GBY_10]
            |  aggregations:["count(DISTINCT KEY._col1:0._col0)","count(DISTINCT KEY._col1:1._col0)"]
            |  keys:KEY._col0 (type: int)
            |  outputColumnNames:["_col0","_col1","_col2"]
            |  Statistics:Num rows: 1 Data size: 5 Basic stats: COMPLETE Column stats: NONE
            |<-Reducer 2 [SIMPLE_EDGE]
               Reduce Output Operator [RS_9]
                  key expressions:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                  Map-reduce partition columns:_col0 (type: int)
                  sort order:+++
                  Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator [GBY_8]
                     aggregations:["count(DISTINCT _col1)","count(DISTINCT _col2)"]
                     keys:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                     outputColumnNames:["_col0","_col1","_col2","_col3","_col4"]
                     Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
                     Group By Operator [GBY_5]
                     |  keys:KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: int)
                     |  outputColumnNames:["_col0","_col1","_col2"]
                     |  Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
                     |<-Map 1 [SIMPLE_EDGE]
                        Reduce Output Operator [RS_4]
                           key expressions:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                           Map-reduce partition columns:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                           sort order:+++
                           Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                           Group By Operator [GBY_3]
                              keys:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                              outputColumnNames:["_col0","_col1","_col2"]
                              Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                              Select Operator [SEL_1]
                                 outputColumnNames:["_col0","_col1","_col2"]
                                 Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                                 TableScan [TS_0]
                                    alias:count_distinct_test
                                    Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE

PREHOOK: query: select id,count(Distinct key),count(Distinct name)
from (select id,key,name from count_distinct_test group by id,key,name)m
group by id
PREHOOK: type: QUERY
PREHOOK: Input: default@count_distinct_test
#### A masked pattern was here ####
POSTHOOK: query: select id,count(Distinct key),count(Distinct name)
from (select id,key,name from count_distinct_test group by id,key,name)m
group by id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@count_distinct_test
#### A masked pattern was here ####
1	5	2
PREHOOK: query: -- candidate2;
explain select id,count(Distinct name),count(Distinct key)
from (select id,key,name from count_distinct_test group by id,name,key)m
group by id
PREHOOK: type: QUERY
POSTHOOK: query: -- candidate2;
explain select id,count(Distinct name),count(Distinct key)
from (select id,key,name from count_distinct_test group by id,name,key)m
group by id
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)

Stage-0
   Fetch Operator
      limit:-1
      Stage-1
         Reducer 3
         File Output Operator [FS_12]
            compressed:false
            Statistics:Num rows: 1 Data size: 5 Basic stats: COMPLETE Column stats: NONE
            table:{"serde:":"org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe","input format:":"org.apache.hadoop.mapred.TextInputFormat","output format:":"org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"}
            Group By Operator [GBY_10]
            |  aggregations:["count(DISTINCT KEY._col1:0._col0)","count(DISTINCT KEY._col1:1._col0)"]
            |  keys:KEY._col0 (type: int)
            |  outputColumnNames:["_col0","_col1","_col2"]
            |  Statistics:Num rows: 1 Data size: 5 Basic stats: COMPLETE Column stats: NONE
            |<-Reducer 2 [SIMPLE_EDGE]
               Reduce Output Operator [RS_9]
                  key expressions:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                  Map-reduce partition columns:_col0 (type: int)
                  sort order:+++
                  Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
                  Group By Operator [GBY_8]
                     aggregations:["count(DISTINCT _col1)","count(DISTINCT _col2)"]
                     keys:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                     outputColumnNames:["_col0","_col1","_col2","_col3","_col4"]
                     Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
                     Group By Operator [GBY_5]
                     |  keys:KEY._col0 (type: int), KEY._col1 (type: int), KEY._col2 (type: int)
                     |  outputColumnNames:["_col0","_col1","_col2"]
                     |  Statistics:Num rows: 2 Data size: 10 Basic stats: COMPLETE Column stats: NONE
                     |<-Map 1 [SIMPLE_EDGE]
                        Reduce Output Operator [RS_4]
                           key expressions:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                           Map-reduce partition columns:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                           sort order:+++
                           Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                           Group By Operator [GBY_3]
                              keys:_col0 (type: int), _col1 (type: int), _col2 (type: int)
                              outputColumnNames:["_col0","_col1","_col2"]
                              Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                              Select Operator [SEL_1]
                                 outputColumnNames:["_col0","_col1","_col2"]
                                 Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE
                                 TableScan [TS_0]
                                    alias:count_distinct_test
                                    Statistics:Num rows: 5 Data size: 25 Basic stats: COMPLETE Column stats: NONE

PREHOOK: query: select id,count(Distinct name),count(Distinct key)
from (select id,key,name from count_distinct_test group by id,name,key)m
group by id
PREHOOK: type: QUERY
PREHOOK: Input: default@count_distinct_test
#### A masked pattern was here ####
POSTHOOK: query: select id,count(Distinct name),count(Distinct key)
from (select id,key,name from count_distinct_test group by id,name,key)m
group by id
POSTHOOK: type: QUERY
POSTHOOK: Input: default@count_distinct_test
#### A masked pattern was here ####
1	2	5
