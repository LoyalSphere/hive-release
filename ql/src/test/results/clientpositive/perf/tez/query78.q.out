PREHOOK: query: explain
with ws as
  (select d_year AS ws_sold_year, ws_item_sk,
    ws_bill_customer_sk ws_customer_sk,
    sum(ws_quantity) ws_qty,
    sum(ws_wholesale_cost) ws_wc,
    sum(ws_sales_price) ws_sp
   from web_sales
   left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk
   join date_dim on ws_sold_date_sk = d_date_sk
   where wr_order_number is null
   group by d_year, ws_item_sk, ws_bill_customer_sk
   ),
cs as
  (select d_year AS cs_sold_year, cs_item_sk,
    cs_bill_customer_sk cs_customer_sk,
    sum(cs_quantity) cs_qty,
    sum(cs_wholesale_cost) cs_wc,
    sum(cs_sales_price) cs_sp
   from catalog_sales
   left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk
   join date_dim on cs_sold_date_sk = d_date_sk
   where cr_order_number is null
   group by d_year, cs_item_sk, cs_bill_customer_sk
   ),
ss as
  (select d_year AS ss_sold_year, ss_item_sk,
    ss_customer_sk,
    sum(ss_quantity) ss_qty,
    sum(ss_wholesale_cost) ss_wc,
    sum(ss_sales_price) ss_sp
   from store_sales
   left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk
   join date_dim on ss_sold_date_sk = d_date_sk
   where sr_ticket_number is null
   group by d_year, ss_item_sk, ss_customer_sk
   )
 select 
ss_sold_year, ss_item_sk, ss_customer_sk,
round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2) ratio,
ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price,
coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty,
coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost,
coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price
from ss
left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk)
left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=cs_item_sk and cs_customer_sk=ss_customer_sk)
where coalesce(ws_qty,0)>0 and coalesce(cs_qty, 0)>0 and ss_sold_year=2000
order by 
  ss_sold_year, ss_item_sk, ss_customer_sk,
  ss_qty desc, ss_wc desc, ss_sp desc,
  other_chan_qty,
  other_chan_wholesale_cost,
  other_chan_sales_price,
  round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2)
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with ws as
  (select d_year AS ws_sold_year, ws_item_sk,
    ws_bill_customer_sk ws_customer_sk,
    sum(ws_quantity) ws_qty,
    sum(ws_wholesale_cost) ws_wc,
    sum(ws_sales_price) ws_sp
   from web_sales
   left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk
   join date_dim on ws_sold_date_sk = d_date_sk
   where wr_order_number is null
   group by d_year, ws_item_sk, ws_bill_customer_sk
   ),
cs as
  (select d_year AS cs_sold_year, cs_item_sk,
    cs_bill_customer_sk cs_customer_sk,
    sum(cs_quantity) cs_qty,
    sum(cs_wholesale_cost) cs_wc,
    sum(cs_sales_price) cs_sp
   from catalog_sales
   left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk
   join date_dim on cs_sold_date_sk = d_date_sk
   where cr_order_number is null
   group by d_year, cs_item_sk, cs_bill_customer_sk
   ),
ss as
  (select d_year AS ss_sold_year, ss_item_sk,
    ss_customer_sk,
    sum(ss_quantity) ss_qty,
    sum(ss_wholesale_cost) ss_wc,
    sum(ss_sales_price) ss_sp
   from store_sales
   left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk
   join date_dim on ss_sold_date_sk = d_date_sk
   where sr_ticket_number is null
   group by d_year, ss_item_sk, ss_customer_sk
   )
 select 
ss_sold_year, ss_item_sk, ss_customer_sk,
round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2) ratio,
ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price,
coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty,
coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost,
coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price
from ss
left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk)
left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=cs_item_sk and cs_customer_sk=ss_customer_sk)
where coalesce(ws_qty,0)>0 and coalesce(cs_qty, 0)>0 and ss_sold_year=2000
order by 
  ss_sold_year, ss_item_sk, ss_customer_sk,
  ss_qty desc, ss_wc desc, ss_sp desc,
  other_chan_qty,
  other_chan_wholesale_cost,
  other_chan_sales_price,
  round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2)
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 12 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 14 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 13 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 3 <- Map 1 (CUSTOM_SIMPLE_EDGE), Map 2 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 11 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 15 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_147]
        Limit [LIM_146] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_145] (rows=23425424 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_73]
              Select Operator [SEL_72] (rows=23425424 width=88)
                Output:["_col0","_col1","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                Filter Operator [FIL_71] (rows=23425424 width=88)
                  predicate:(COALESCE(_col11,0) > 0)
                  Merge Join Operator [MERGEJOIN_112] (rows=70276272 width=88)
                    Conds:RS_68._col1=RS_144._col0(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col11","_col12","_col13"]
                  <-Reducer 15 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_144]
                      PartitionCols:_col0
                      Select Operator [SEL_143] (rows=43558464 width=135)
                        Output:["_col0","_col1","_col2","_col3"]
                        Group By Operator [GBY_142] (rows=43558464 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1
                        <-Reducer 14 [SIMPLE_EDGE]
                          SHUFFLE [RS_65]
                            PartitionCols:_col0, _col1
                            Group By Operator [GBY_64] (rows=87116928 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col3, _col4
                              Map Join Operator [MAPJOIN_110] (rows=87116928 width=135)
                                BucketMapJoin:true,Conds:RS_123._col0=SEL_59._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col4","_col6","_col7","_col8"]
                              <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_123]
                                  PartitionCols:_col0
                                  Select Operator [SEL_120] (rows=36524 width=1119)
                                    Output:["_col0"]
                                    Filter Operator [FIL_119] (rows=36524 width=1119)
                                      predicate:((d_year = 2000) and d_date_sk is not null)
                                      TableScan [TS_0] (rows=73049 width=1119)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                              <-Select Operator [SEL_59] (rows=79197206 width=135)
                                  Output:["_col0","_col1","_col2","_col4","_col5","_col6"]
                                  Filter Operator [FIL_58] (rows=79197206 width=135)
                                    predicate:_col8 is null
                                    Merge Join Operator [MERGEJOIN_107] (rows=158394413 width=135)
                                      Conds:RS_139._col2, _col3=RS_141._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col4","_col5","_col6","_col8"]
                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_139]
                                        PartitionCols:_col2, _col3
                                        Select Operator [SEL_138] (rows=143994918 width=135)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                          Filter Operator [FIL_137] (rows=143994918 width=135)
                                            predicate:((cs_item_sk = cs_item_sk) and cs_sold_date_sk is not null)
                                            TableScan [TS_50] (rows=287989836 width=135)
                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_order_number","cs_quantity","cs_wholesale_cost","cs_sales_price"]
                                    <-Map 16 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_141]
                                        PartitionCols:_col0, _col1
                                        Select Operator [SEL_140] (rows=28798881 width=106)
                                          Output:["_col0","_col1"]
                                          TableScan [TS_53] (rows=28798881 width=106)
                                            default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:NONE,Output:["cr_item_sk","cr_order_number"]
                  <-Reducer 5 [SIMPLE_EDGE]
                    SHUFFLE [RS_68]
                      PartitionCols:_col1
                      Filter Operator [FIL_45] (rows=63887519 width=88)
                        predicate:(COALESCE(_col7,0) > 0)
                        Merge Join Operator [MERGEJOIN_111] (rows=191662559 width=88)
                          Conds:RS_128._col1, _col0=RS_136._col1, _col0(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col7","_col8","_col9"]
                        <-Reducer 11 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_136]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_135] (rows=43560808 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Group By Operator [GBY_134] (rows=43560808 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1
                              <-Reducer 10 [SIMPLE_EDGE]
                                SHUFFLE [RS_39]
                                  PartitionCols:_col0, _col1
                                  Group By Operator [GBY_38] (rows=87121617 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col4, _col3
                                    Map Join Operator [MAPJOIN_109] (rows=87121617 width=135)
                                      BucketMapJoin:true,Conds:RS_122._col0=SEL_33._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col4","_col6","_col7","_col8"]
                                    <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_122]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_120]
                                    <-Select Operator [SEL_33] (rows=79201469 width=135)
                                        Output:["_col0","_col1","_col2","_col4","_col5","_col6"]
                                        Filter Operator [FIL_32] (rows=79201469 width=135)
                                          predicate:_col8 is null
                                          Merge Join Operator [MERGEJOIN_106] (rows=158402938 width=135)
                                            Conds:RS_131._col1, _col3=RS_133._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col4","_col5","_col6","_col8"]
                                          <-Map 12 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_133]
                                              PartitionCols:_col0, _col1
                                              Select Operator [SEL_132] (rows=14398467 width=92)
                                                Output:["_col0","_col1"]
                                                TableScan [TS_27] (rows=14398467 width=92)
                                                  default@web_returns,web_returns,Tbl:COMPLETE,Col:NONE,Output:["wr_item_sk","wr_order_number"]
                                          <-Map 9 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_131]
                                              PartitionCols:_col1, _col3
                                              Select Operator [SEL_130] (rows=144002668 width=135)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                Filter Operator [FIL_129] (rows=144002668 width=135)
                                                  predicate:ws_sold_date_sk is not null
                                                  TableScan [TS_24] (rows=144002668 width=135)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_order_number","ws_quantity","ws_wholesale_cost","ws_sales_price"]
                        <-Reducer 4 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_128]
                            PartitionCols:_col1, _col0
                            Select Operator [SEL_127] (rows=174238687 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Group By Operator [GBY_126] (rows=174238687 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1
                              <-Reducer 3 [SIMPLE_EDGE]
                                SHUFFLE [RS_18]
                                  PartitionCols:_col0, _col1
                                  Group By Operator [GBY_17] (rows=348477374 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col4, _col3
                                    Map Join Operator [MAPJOIN_108] (rows=348477374 width=88)
                                      BucketMapJoin:true,Conds:RS_121._col0=SEL_12._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col4","_col6","_col7","_col8"]
                                    <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_121]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_120]
                                    <-Select Operator [SEL_12] (rows=316797606 width=88)
                                        Output:["_col0","_col1","_col2","_col4","_col5","_col6"]
                                        Filter Operator [FIL_11] (rows=316797606 width=88)
                                          predicate:_col8 is null
                                          Merge Join Operator [MERGEJOIN_105] (rows=633595212 width=88)
                                            Conds:RS_118._col1, _col3=RS_125._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col4","_col5","_col6","_col8"]
                                          <-Map 2 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_118]
                                              PartitionCols:_col1, _col3
                                              Select Operator [SEL_117] (rows=575995635 width=88)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                Filter Operator [FIL_116] (rows=575995635 width=88)
                                                  predicate:ss_sold_date_sk is not null
                                                  TableScan [TS_3] (rows=575995635 width=88)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_ticket_number","ss_quantity","ss_wholesale_cost","ss_sales_price"]
                                          <-Map 8 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_125]
                                              PartitionCols:_col0, _col1
                                              Select Operator [SEL_124] (rows=57591150 width=77)
                                                Output:["_col0","_col1"]
                                                TableScan [TS_6] (rows=57591150 width=77)
                                                  default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_item_sk","sr_ticket_number"]

