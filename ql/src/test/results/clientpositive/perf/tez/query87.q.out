PREHOOK: query: explain
select count(*) 
from ((select distinct c_last_name, c_first_name, d_date
       from store_sales, date_dim, customer
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from catalog_sales, date_dim, customer
       where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
         and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from web_sales, date_dim, customer
       where web_sales.ws_sold_date_sk = date_dim.d_date_sk
         and web_sales.ws_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
) cool_cust
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select count(*) 
from ((select distinct c_last_name, c_first_name, d_date
       from store_sales, date_dim, customer
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from catalog_sales, date_dim, customer
       where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
         and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from web_sales, date_dim, customer
       where web_sales.ws_sold_date_sk = date_dim.d_date_sk
         and web_sales.ws_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
) cool_cust
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 9 (BROADCAST_EDGE)
Map 15 <- Map 9 (BROADCAST_EDGE)
Map 16 <- Map 9 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 13 <- Map 10 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 5 <- Union 4 (SIMPLE_EDGE), Union 6 (CONTAINS)
Reducer 7 <- Union 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_205]
        Group By Operator [GBY_204] (rows=1 width=24)
          Output:["_col0"],aggregations:["count(VALUE._col0)"]
        <-Reducer 7 [CUSTOM_SIMPLE_EDGE] vectorized
          PARTITION_ONLY_SHUFFLE [RS_203]
            Group By Operator [GBY_202] (rows=1 width=24)
              Output:["_col0"],aggregations:["count()"]
              Select Operator [SEL_201] (rows=4537552 width=129)
                Filter Operator [FIL_200] (rows=4537552 width=129)
                  predicate:(((_col3 * 2) = _col4) and (_col3 > 0L))
                  Select Operator [SEL_199] (rows=27225312 width=129)
                    Output:["_col3","_col4"]
                    Group By Operator [GBY_198] (rows=27225312 width=129)
                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                    <-Union 6 [SIMPLE_EDGE]
                      <-Reducer 14 [CONTAINS] vectorized
                        Reduce Output Operator [RS_227]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_226] (rows=54450625 width=129)
                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                            Select Operator [SEL_225] (rows=54450625 width=129)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Select Operator [SEL_224] (rows=43560808 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                Group By Operator [GBY_223] (rows=43560808 width=135)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                  Select Operator [SEL_222] (rows=87121617 width=135)
                                    Output:["_col0","_col1","_col2"]
                                    Group By Operator [GBY_221] (rows=87121617 width=135)
                                      Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 13 [SIMPLE_EDGE]
                                      SHUFFLE [RS_80]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_79] (rows=174243235 width=135)
                                          Output:["_col0","_col1","_col2"],keys:_col7, _col6, _col3
                                          Merge Join Operator [MERGEJOIN_132] (rows=174243235 width=135)
                                            Conds:RS_220._col1=RS_182._col0(Inner),Output:["_col3","_col6","_col7"]
                                          <-Map 10 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_182]
                                              PartitionCols:_col0
                                              Select Operator [SEL_179] (rows=80000000 width=860)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_178] (rows=80000000 width=860)
                                                  predicate:c_customer_sk is not null
                                                  TableScan [TS_6] (rows=80000000 width=860)
                                                    default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_first_name","c_last_name"]
                                          <-Map 16 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_220]
                                              PartitionCols:_col1
                                              Map Join Operator [MAPJOIN_219] (rows=158402938 width=135)
                                                Conds:SEL_218._col0=RS_173._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3"]
                                              <-Map 9 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_173]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_170] (rows=8116 width=1119)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_169] (rows=8116 width=1119)
                                                      predicate:(d_date_sk is not null and d_month_seq BETWEEN 1212 AND 1223)
                                                      TableScan [TS_3] (rows=73049 width=1119)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date","d_month_seq"]
                                              <-Select Operator [SEL_218] (rows=144002668 width=135)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_217] (rows=144002668 width=135)
                                                    predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                    TableScan [TS_63] (rows=144002668 width=135)
                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                      <-Reducer 5 [CONTAINS] vectorized
                        Reduce Output Operator [RS_197]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_196] (rows=54450625 width=129)
                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                            Select Operator [SEL_195] (rows=54450625 width=129)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Select Operator [SEL_194] (rows=10889817 width=103)
                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                Group By Operator [GBY_193] (rows=10889817 width=103)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col0, _col1, _col2
                                  Select Operator [SEL_192] (rows=21779634 width=103)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_191] (rows=21779634 width=103)
                                      predicate:(((_col3 * 2) = _col4) and (_col3 > 0L))
                                      Group By Operator [GBY_190] (rows=130677808 width=103)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                      <-Union 4 [SIMPLE_EDGE]
                                        <-Reducer 12 [CONTAINS] vectorized
                                          Reduce Output Operator [RS_216]
                                            PartitionCols:_col0, _col1, _col2
                                            Group By Operator [GBY_215] (rows=261355616 width=103)
                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                                              Select Operator [SEL_214] (rows=261355616 width=103)
                                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                                Select Operator [SEL_213] (rows=87116929 width=135)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Group By Operator [GBY_212] (rows=87116929 width=135)
                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                                    Select Operator [SEL_211] (rows=174233858 width=135)
                                                      Output:["_col0","_col1","_col2"]
                                                      Group By Operator [GBY_210] (rows=174233858 width=135)
                                                        Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                                      <-Reducer 11 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_42]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Group By Operator [GBY_41] (rows=348467716 width=135)
                                                            Output:["_col0","_col1","_col2"],keys:_col7, _col6, _col3
                                                            Merge Join Operator [MERGEJOIN_130] (rows=348467716 width=135)
                                                              Conds:RS_209._col1=RS_181._col0(Inner),Output:["_col3","_col6","_col7"]
                                                            <-Map 10 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_181]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_179]
                                                            <-Map 15 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_209]
                                                                PartitionCols:_col1
                                                                Map Join Operator [MAPJOIN_208] (rows=316788826 width=135)
                                                                  Conds:SEL_207._col0=RS_172._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3"]
                                                                <-Map 9 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_172]
                                                                    PartitionCols:_col0
                                                                     Please refer to the previous Select Operator [SEL_170]
                                                                <-Select Operator [SEL_207] (rows=287989836 width=135)
                                                                    Output:["_col0","_col1"]
                                                                    Filter Operator [FIL_206] (rows=287989836 width=135)
                                                                      predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                                      TableScan [TS_25] (rows=287989836 width=135)
                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk"]
                                        <-Reducer 3 [CONTAINS] vectorized
                                          Reduce Output Operator [RS_189]
                                            PartitionCols:_col0, _col1, _col2
                                            Group By Operator [GBY_188] (rows=261355616 width=103)
                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                                              Select Operator [SEL_187] (rows=261355616 width=103)
                                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                                Select Operator [SEL_186] (rows=174238687 width=88)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Group By Operator [GBY_185] (rows=174238687 width=88)
                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                                    Select Operator [SEL_184] (rows=348477374 width=88)
                                                      Output:["_col0","_col1","_col2"]
                                                      Group By Operator [GBY_183] (rows=348477374 width=88)
                                                        Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                                      <-Reducer 2 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_17]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Group By Operator [GBY_16] (rows=696954748 width=88)
                                                            Output:["_col0","_col1","_col2"],keys:_col7, _col6, _col3
                                                            Merge Join Operator [MERGEJOIN_128] (rows=696954748 width=88)
                                                              Conds:RS_177._col1=RS_180._col0(Inner),Output:["_col3","_col6","_col7"]
                                                            <-Map 10 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_180]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_179]
                                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_177]
                                                                PartitionCols:_col1
                                                                Map Join Operator [MAPJOIN_176] (rows=633595212 width=88)
                                                                  Conds:SEL_175._col0=RS_171._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3"]
                                                                <-Map 9 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_171]
                                                                    PartitionCols:_col0
                                                                     Please refer to the previous Select Operator [SEL_170]
                                                                <-Select Operator [SEL_175] (rows=575995635 width=88)
                                                                    Output:["_col0","_col1"]
                                                                    Filter Operator [FIL_174] (rows=575995635 width=88)
                                                                      predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                      TableScan [TS_0] (rows=575995635 width=88)
                                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk"]

