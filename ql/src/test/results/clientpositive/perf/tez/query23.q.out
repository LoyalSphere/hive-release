Warning: Map Join MAPJOIN[381][bigTable=?] in task 'Reducer 11' is a cross product
Warning: Map Join MAPJOIN[402][bigTable=?] in task 'Reducer 18' is a cross product
Warning: Map Join MAPJOIN[384][bigTable=?] in task 'Reducer 13' is a cross product
Warning: Map Join MAPJOIN[413][bigTable=?] in task 'Reducer 22' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 2 (BROADCAST_EDGE), Reducer 5 (BROADCAST_EDGE)
Map 24 <- Map 2 (BROADCAST_EDGE), Reducer 5 (BROADCAST_EDGE)
Map 3 <- Map 6 (BROADCAST_EDGE)
Map 8 <- Map 15 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE), Reducer 12 (BROADCAST_EDGE)
Reducer 12 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 10 (CUSTOM_SIMPLE_EDGE), Reducer 14 (BROADCAST_EDGE)
Reducer 14 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 16 (SIMPLE_EDGE), Map 23 (SIMPLE_EDGE)
Reducer 18 <- Map 1 (BROADCAST_EDGE), Reducer 11 (BROADCAST_EDGE), Reducer 17 (SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 20 <- Union 19 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 16 (SIMPLE_EDGE), Map 23 (SIMPLE_EDGE)
Reducer 22 <- Map 24 (BROADCAST_EDGE), Reducer 13 (BROADCAST_EDGE), Reducer 21 (SIMPLE_EDGE), Union 19 (CONTAINS)
Reducer 4 <- Map 3 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 9 <- Map 23 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 20 vectorized
      File Output Operator [FS_495]
        Limit [LIM_494] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_493] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Union 19 [CUSTOM_SIMPLE_EDGE]
            <-Reducer 18 [CONTAINS] vectorized
              Reduce Output Operator [RS_492]
                Group By Operator [GBY_491] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_490] (rows=1 width=112)
                    Output:["_col0"]
                    Map Join Operator [MAPJOIN_489] (rows=1 width=116)
                      Conds:RS_484._col1=SEL_488._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col4"]
                    <-Map 1 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_484]
                        PartitionCols:_col1
                        Map Join Operator [MAPJOIN_483] (rows=290 width=0)
                          Conds:MAPJOIN_482._col2=RS_478._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3","_col4"]
                        <-Reducer 5 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_478]
                            PartitionCols:_col0
                            Group By Operator [GBY_477] (rows=2134 width=4)
                              Output:["_col0"],keys:_col1
                              Select Operator [SEL_476] (rows=6548799 width=12)
                                Output:["_col1"]
                                Filter Operator [FIL_475] (rows=6548799 width=12)
                                  predicate:(_col3 > 4L)
                                  Select Operator [SEL_474] (rows=19646398 width=12)
                                    Output:["_col0","_col3"]
                                    Group By Operator [GBY_473] (rows=19646398 width=290)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 4 [SIMPLE_EDGE]
                                      SHUFFLE [RS_24]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_23] (rows=19646398 width=290)
                                          Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                          Select Operator [SEL_21] (rows=19646398 width=282)
                                            Output:["_col0","_col1","_col2"]
                                            Merge Join Operator [MERGEJOIN_365] (rows=19646398 width=282)
                                              Conds:RS_469._col1=RS_472._col0(Inner),Output:["_col3","_col5","_col6"]
                                            <-Map 3 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_469]
                                                PartitionCols:_col1
                                                Map Join Operator [MAPJOIN_468] (rows=19646398 width=98)
                                                  Conds:SEL_467._col0=RS_465._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3"]
                                                <-Map 6 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_465]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_464] (rows=2609 width=102)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_463] (rows=2609 width=102)
                                                        predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                        TableScan [TS_9] (rows=73049 width=102)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_year"]
                                                <-Select Operator [SEL_467] (rows=550076554 width=7)
                                                    Output:["_col0","_col1"]
                                                    Filter Operator [FIL_466] (rows=550076554 width=7)
                                                      predicate:(ss_item_sk is not null and ss_sold_date_sk is not null)
                                                      TableScan [TS_6] (rows=575995635 width=7)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk"]
                                            <-Map 7 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_472]
                                                PartitionCols:_col0
                                                Select Operator [SEL_471] (rows=462000 width=188)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_470] (rows=462000 width=188)
                                                    predicate:i_item_sk is not null
                                                    TableScan [TS_12] (rows=462000 width=188)
                                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_desc"]
                        <-Map Join Operator [MAPJOIN_482] (rows=7751875 width=101)
                            Conds:SEL_481._col0=RS_461._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                          <-Map 2 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_461]
                              PartitionCols:_col0
                              Select Operator [SEL_460] (rows=50 width=12)
                                Output:["_col0"]
                                Filter Operator [FIL_459] (rows=50 width=12)
                                  predicate:((d_moy = 1) and (d_year = 1999) and d_date_sk is not null)
                                  TableScan [TS_3] (rows=73049 width=12)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                          <-Select Operator [SEL_481] (rows=285117831 width=127)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Filter Operator [FIL_480] (rows=285117831 width=127)
                                predicate:(cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                TableScan [TS_0] (rows=287989836 width=127)
                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
                    <-Select Operator [SEL_488] (rows=450644 width=4)
                        Output:["_col0"]
                        Filter Operator [FIL_487] (rows=450644 width=228)
                          predicate:(_col3 > (0.95 * _col1))
                          Map Join Operator [MAPJOIN_486] (rows=1351933 width=228)
                            Conds:(Inner),Output:["_col1","_col2","_col3"]
                          <-Reducer 11 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_458]
                              Map Join Operator [MAPJOIN_457] (rows=1 width=112)
                                Conds:(Inner),Output:["_col1"]
                              <-Reducer 12 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_451]
                                  Group By Operator [GBY_450] (rows=1 width=112)
                                    Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                  <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_447]
                                      Group By Operator [GBY_443] (rows=1 width=112)
                                        Output:["_col0"],aggregations:["max(_col1)"]
                                        Select Operator [SEL_439] (rows=11859 width=116)
                                          Output:["_col1"]
                                          Group By Operator [GBY_437] (rows=11859 width=116)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                          <-Reducer 9 [SIMPLE_EDGE]
                                            SHUFFLE [RS_51]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_50] (rows=11859 width=116)
                                                Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                                Select Operator [SEL_48] (rows=18762463 width=4)
                                                  Output:["_col0","_col1"]
                                                  Merge Join Operator [MERGEJOIN_367] (rows=18762463 width=4)
                                                    Conds:RS_436._col1=RS_428._col0(Inner),Output:["_col2","_col3","_col6"]
                                                  <-Map 23 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_428]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_426] (rows=80000000 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_425] (rows=80000000 width=4)
                                                          predicate:c_customer_sk is not null
                                                          TableScan [TS_96] (rows=80000000 width=4)
                                                            default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk"]
                                                  <-Map 8 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_436]
                                                      PartitionCols:_col1
                                                      Map Join Operator [MAPJOIN_435] (rows=18762463 width=0)
                                                        Conds:SEL_434._col0=RS_432._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                                      <-Map 15 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_432]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_431] (rows=2609 width=8)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_430] (rows=2609 width=8)
                                                              predicate:((d_year) IN (1999, 2000, 2001, 2002) and d_date_sk is not null)
                                                              TableScan [TS_36] (rows=73049 width=8)
                                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                      <-Select Operator [SEL_434] (rows=525327388 width=118)
                                                          Output:["_col0","_col1","_col2","_col3"]
                                                          Filter Operator [FIL_433] (rows=525327388 width=118)
                                                            predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                            TableScan [TS_33] (rows=575995635 width=118)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                              <-Select Operator [SEL_456] (rows=1 width=8)
                                  Filter Operator [FIL_455] (rows=1 width=8)
                                    predicate:(sq_count_check(_col0) <= 1)
                                    Group By Operator [GBY_454] (rows=1 width=8)
                                      Output:["_col0"],aggregations:["count()"]
                                      Select Operator [SEL_453] (rows=1 width=8)
                                        Group By Operator [GBY_452] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                        <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_446]
                                            Group By Operator [GBY_442] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(_col0)"]
                                              Select Operator [SEL_438] (rows=11859 width=116)
                                                Output:["_col0"]
                                                 Please refer to the previous Group By Operator [GBY_437]
                          <-Group By Operator [GBY_485] (rows=1351933 width=116)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 17 [SIMPLE_EDGE]
                              SHUFFLE [RS_105]
                                PartitionCols:_col0
                                Group By Operator [GBY_104] (rows=550080312 width=116)
                                  Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                  Select Operator [SEL_102] (rows=550080312 width=114)
                                    Output:["_col0","_col1"]
                                    Merge Join Operator [MERGEJOIN_370] (rows=550080312 width=114)
                                      Conds:RS_423._col0=RS_427._col0(Inner),Output:["_col1","_col2","_col3"]
                                    <-Map 23 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_427]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_426]
                                    <-Map 16 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_423]
                                        PartitionCols:_col0
                                        Select Operator [SEL_422] (rows=550080312 width=114)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_421] (rows=550080312 width=114)
                                            predicate:ss_customer_sk is not null
                                            TableScan [TS_93] (rows=575995635 width=114)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
            <-Reducer 22 [CONTAINS] vectorized
              Reduce Output Operator [RS_517]
                Group By Operator [GBY_516] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_515] (rows=1 width=112)
                    Output:["_col0"]
                    Map Join Operator [MAPJOIN_514] (rows=1 width=116)
                      Conds:RS_509._col2=SEL_513._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col4"]
                    <-Map 24 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_509]
                        PartitionCols:_col2
                        Map Join Operator [MAPJOIN_508] (rows=148 width=0)
                          Conds:MAPJOIN_507._col1=RS_479._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4"]
                        <-Reducer 5 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_479]
                            PartitionCols:_col0
                             Please refer to the previous Group By Operator [GBY_477]
                        <-Map Join Operator [MAPJOIN_507] (rows=3941102 width=122)
                            Conds:SEL_506._col0=RS_462._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                          <-Map 2 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_462]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_460]
                          <-Select Operator [SEL_506] (rows=143930993 width=127)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Filter Operator [FIL_505] (rows=143930993 width=127)
                                predicate:(ws_bill_customer_sk is not null and ws_item_sk is not null and ws_sold_date_sk is not null)
                                TableScan [TS_126] (rows=144002668 width=127)
                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
                    <-Select Operator [SEL_513] (rows=450644 width=4)
                        Output:["_col0"]
                        Filter Operator [FIL_512] (rows=450644 width=228)
                          predicate:(_col3 > (0.95 * _col1))
                          Map Join Operator [MAPJOIN_511] (rows=1351933 width=228)
                            Conds:(Inner),Output:["_col1","_col2","_col3"]
                          <-Reducer 13 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_504]
                              Map Join Operator [MAPJOIN_503] (rows=1 width=112)
                                Conds:(Inner),Output:["_col1"]
                              <-Reducer 14 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_497]
                                  Group By Operator [GBY_496] (rows=1 width=112)
                                    Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                  <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_449]
                                      Group By Operator [GBY_445] (rows=1 width=112)
                                        Output:["_col0"],aggregations:["max(_col1)"]
                                        Select Operator [SEL_441] (rows=11859 width=116)
                                          Output:["_col1"]
                                           Please refer to the previous Group By Operator [GBY_437]
                              <-Select Operator [SEL_502] (rows=1 width=8)
                                  Filter Operator [FIL_501] (rows=1 width=8)
                                    predicate:(sq_count_check(_col0) <= 1)
                                    Group By Operator [GBY_500] (rows=1 width=8)
                                      Output:["_col0"],aggregations:["count()"]
                                      Select Operator [SEL_499] (rows=1 width=8)
                                        Group By Operator [GBY_498] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                        <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_448]
                                            Group By Operator [GBY_444] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(_col0)"]
                                              Select Operator [SEL_440] (rows=11859 width=116)
                                                Output:["_col0"]
                                                 Please refer to the previous Group By Operator [GBY_437]
                          <-Group By Operator [GBY_510] (rows=1351933 width=116)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Reducer 21 [SIMPLE_EDGE]
                              SHUFFLE [RS_231]
                                PartitionCols:_col0
                                Group By Operator [GBY_230] (rows=550080312 width=116)
                                  Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                  Select Operator [SEL_228] (rows=550080312 width=114)
                                    Output:["_col0","_col1"]
                                    Merge Join Operator [MERGEJOIN_378] (rows=550080312 width=114)
                                      Conds:RS_424._col0=RS_429._col0(Inner),Output:["_col1","_col2","_col3"]
                                    <-Map 23 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_429]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_426]
                                    <-Map 16 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_424]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_422]

