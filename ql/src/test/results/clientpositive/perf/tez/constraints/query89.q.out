PREHOOK: query: explain
select  *
from(
select i_category, i_class, i_brand,
       s_store_name, s_company_name,
       d_moy,
       sum(ss_sales_price) sum_sales,
       avg(sum(ss_sales_price)) over
         (partition by i_category, i_brand, s_store_name, s_company_name)
         avg_monthly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
      ss_sold_date_sk = d_date_sk and
      ss_store_sk = s_store_sk and
      d_year in (2000) and
        ((i_category in ('Home','Books','Electronics') and
          i_class in ('wallpaper','parenting','musical')
         )
      or (i_category in ('Shoes','Jewelry','Men') and
          i_class in ('womens','birdal','pants') 
        ))
group by i_category, i_class, i_brand,
         s_store_name, s_company_name, d_moy) tmp1
where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1
order by sum_sales - avg_monthly_sales, s_store_name
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@mv_store_sales_item_customer
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  *
from(
select i_category, i_class, i_brand,
       s_store_name, s_company_name,
       d_moy,
       sum(ss_sales_price) sum_sales,
       avg(sum(ss_sales_price)) over
         (partition by i_category, i_brand, s_store_name, s_company_name)
         avg_monthly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
      ss_sold_date_sk = d_date_sk and
      ss_store_sk = s_store_sk and
      d_year in (2000) and
        ((i_category in ('Home','Books','Electronics') and
          i_class in ('wallpaper','parenting','musical')
         )
      or (i_category in ('Shoes','Jewelry','Men') and
          i_class in ('womens','birdal','pants') 
        ))
group by i_category, i_class, i_brand,
         s_store_name, s_company_name, d_moy) tmp1
where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1
order by sum_sales - avg_monthly_sales, s_store_name
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@mv_store_sales_item_customer
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 2 (BROADCAST_EDGE), Map 3 (BROADCAST_EDGE)
Map 4 <- Map 1 (BROADCAST_EDGE)
Reducer 5 <- Map 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_82]
        Limit [LIM_81] (rows=1 width=801)
          Number of rows:100
          Select Operator [SEL_80] (rows=1 width=801)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_79]
              Select Operator [SEL_78] (rows=1 width=801)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                Filter Operator [FIL_77] (rows=1 width=689)
                  predicate:CASE WHEN ((avg_window_0 <> 0)) THEN (((abs((_col6 - avg_window_0)) / avg_window_0) > 0.1)) ELSE (false) END
                  Select Operator [SEL_76] (rows=1 width=577)
                    Output:["avg_window_0","_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                    PTF Operator [PTF_75] (rows=1 width=577)
                      Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 ASC NULLS FIRST, _col0 ASC NULLS FIRST, _col3 ASC NULLS FIRST, _col4 ASC NULLS FIRST","partition by:":"_col2, _col0, _col3, _col4"}]
                      Select Operator [SEL_74] (rows=1 width=577)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      <-Reducer 5 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_73]
                          PartitionCols:_col2, _col0, _col3, _col4
                          Group By Operator [GBY_72] (rows=1 width=577)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                          <-Map 4 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_71]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                              Group By Operator [GBY_70] (rows=1 width=577)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col5)"],keys:_col11, _col12, _col13, _col8, _col9, _col2
                                Map Join Operator [MAPJOIN_69] (rows=1 width=577)
                                  Conds:RS_66._col3=SEL_68._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col5","_col8","_col9","_col11","_col12","_col13"]
                                <-Map 1 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_66]
                                    PartitionCols:_col3
                                    Map Join Operator [MAPJOIN_65] (rows=1 width=299)
                                      Conds:MAPJOIN_64._col4=RS_61._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col5","_col8","_col9"]
                                    <-Map 3 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_61]
                                        PartitionCols:_col0
                                        Select Operator [SEL_60] (rows=1704 width=183)
                                          Output:["_col0","_col1","_col2"]
                                          TableScan [TS_6] (rows=1704 width=183)
                                            default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_company_name"]
                                    <-Map Join Operator [MAPJOIN_64] (rows=1 width=124)
                                        Conds:SEL_63._col0=RS_59._col3(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4","_col5"]
                                      <-Map 2 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_59]
                                          PartitionCols:_col3
                                          Select Operator [SEL_58] (rows=1 width=124)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Filter Operator [FIL_57] (rows=1 width=124)
                                              predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_3] (rows=1 width=124)
                                                default@mv_store_sales_item_customer,default.mv_store_sales_item_customer,Tbl:COMPLETE,Col:PARTIAL,Output:["ss_item_sk","ss_store_sk","ss_sales_price"]
                                      <-Select Operator [SEL_63] (rows=652 width=12)
                                          Output:["_col0","_col2"]
                                          Filter Operator [FIL_62] (rows=652 width=12)
                                            predicate:(d_year = 2000)
                                            TableScan [TS_0] (rows=73049 width=12)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                <-Select Operator [SEL_68] (rows=5990 width=286)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    Filter Operator [FIL_67] (rows=5990 width=286)
                                      predicate:((((i_class) IN ('wallpaper', 'parenting', 'musical') and (i_category) IN ('Home', 'Books', 'Electronics')) or ((i_class) IN ('womens', 'birdal', 'pants') and (i_category) IN ('Shoes', 'Jewelry', 'Men'))) and ((i_category) IN ('Home', 'Books', 'Electronics') or (i_category) IN ('Shoes', 'Jewelry', 'Men')) and ((i_class) IN ('wallpaper', 'parenting', 'musical') or (i_class) IN ('womens', 'birdal', 'pants')) and (i_category) IN ('Home', 'Books', 'Electronics', 'Shoes', 'Jewelry', 'Men') and (i_class) IN ('wallpaper', 'parenting', 'musical', 'womens', 'birdal', 'pants'))
                                      TableScan [TS_8] (rows=462000 width=286)
                                        default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand","i_class","i_category"]

