PREHOOK: query: explain
with ssr as
 (select  s_store_id as store_id,
          sum(ss_ext_sales_price) as sales,
          sum(coalesce(sr_return_amt, 0)) as returns,
          sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
  from store_sales left outer join store_returns on
         (ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
     date_dim,
     store,
     item,
     promotion
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days)
       and ss_store_sk = s_store_sk
       and ss_item_sk = i_item_sk
       and i_current_price > 50
       and ss_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
 group by s_store_id)
 ,
 csr as
 (select  cp_catalog_page_id as catalog_page_id,
          sum(cs_ext_sales_price) as sales,
          sum(coalesce(cr_return_amount, 0)) as returns,
          sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
  from catalog_sales left outer join catalog_returns on
         (cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
     date_dim,
     catalog_page,
     item,
     promotion
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and cs_catalog_page_sk = cp_catalog_page_sk
       and cs_item_sk = i_item_sk
       and i_current_price > 50
       and cs_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by cp_catalog_page_id)
 ,
 wsr as
 (select  web_site_id,
          sum(ws_ext_sales_price) as sales,
          sum(coalesce(wr_return_amt, 0)) as returns,
          sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
  from web_sales left outer join web_returns on
         (ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
     date_dim,
     web_site,
     item,
     promotion
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and ws_web_site_sk = web_site_sk
       and ws_item_sk = i_item_sk
       and i_current_price > 50
       and ws_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || store_id as id
        , sales
        , returns
        , profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || catalog_page_id as id
        , sales
        , returns
        , profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_page
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Input: default@web_site
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ssr as
 (select  s_store_id as store_id,
          sum(ss_ext_sales_price) as sales,
          sum(coalesce(sr_return_amt, 0)) as returns,
          sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
  from store_sales left outer join store_returns on
         (ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
     date_dim,
     store,
     item,
     promotion
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days)
       and ss_store_sk = s_store_sk
       and ss_item_sk = i_item_sk
       and i_current_price > 50
       and ss_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
 group by s_store_id)
 ,
 csr as
 (select  cp_catalog_page_id as catalog_page_id,
          sum(cs_ext_sales_price) as sales,
          sum(coalesce(cr_return_amount, 0)) as returns,
          sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
  from catalog_sales left outer join catalog_returns on
         (cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
     date_dim,
     catalog_page,
     item,
     promotion
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and cs_catalog_page_sk = cp_catalog_page_sk
       and cs_item_sk = i_item_sk
       and i_current_price > 50
       and cs_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by cp_catalog_page_id)
 ,
 wsr as
 (select  web_site_id,
          sum(ws_ext_sales_price) as sales,
          sum(coalesce(wr_return_amt, 0)) as returns,
          sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
  from web_sales left outer join web_returns on
         (ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
     date_dim,
     web_site,
     item,
     promotion
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
        and ws_web_site_sk = web_site_sk
       and ws_item_sk = i_item_sk
       and i_current_price > 50
       and ws_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || store_id as id
        , sales
        , returns
        , profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || catalog_page_id as id
        , sales
        , returns
        , profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , returns
        , profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_page
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Input: default@web_site
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 13 <- Map 10 (BROADCAST_EDGE), Map 12 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE), Map 16 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 18 <- Map 10 (BROADCAST_EDGE), Map 17 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE), Map 21 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (BROADCAST_EDGE), Map 11 (BROADCAST_EDGE), Map 7 (SIMPLE_EDGE), Map 8 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 5 <- Union 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_270]
        Limit [LIM_269] (rows=100 width=619)
          Number of rows:100
          Select Operator [SEL_268] (rows=38846 width=619)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_267]
              Select Operator [SEL_266] (rows=38846 width=619)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_265] (rows=38846 width=627)
                  Output:["_col0","_col1","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Union 4 [SIMPLE_EDGE]
                  <-Reducer 14 [CONTAINS] vectorized
                    Reduce Output Operator [RS_281]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_280] (rows=59581 width=627)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Select Operator [SEL_279] (rows=38846 width=619)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Group By Operator [GBY_278] (rows=38846 width=436)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0
                          <-Reducer 13 [SIMPLE_EDGE]
                            SHUFFLE [RS_71]
                              PartitionCols:_col0
                              Group By Operator [GBY_70] (rows=46000 width=436)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col0
                                Select Operator [SEL_68] (rows=8592843 width=305)
                                  Output:["_col0","_col1","_col2","_col3"]
                                  Map Join Operator [MAPJOIN_206] (rows=8592843 width=305)
                                    Conds:MAPJOIN_205._col1=RS_277._col0(Inner),HybridGraceHashJoin:true,Output:["_col5","_col6","_col9","_col10","_col15"]
                                  <-Map 16 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_277]
                                      PartitionCols:_col0
                                      Select Operator [SEL_276] (rows=46000 width=104)
                                        Output:["_col0","_col1"]
                                        TableScan [TS_51] (rows=46000 width=104)
                                          default@catalog_page,catalog_page,Tbl:COMPLETE,Col:COMPLETE,Output:["cp_catalog_page_sk","cp_catalog_page_id"]
                                  <-Map Join Operator [MAPJOIN_205] (rows=8592843 width=208)
                                      Conds:MAPJOIN_204._col3=RS_257._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col5","_col6","_col9","_col10"]
                                    <-Map 10 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_257]
                                        PartitionCols:_col0
                                        Select Operator [SEL_255] (rows=1150 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_254] (rows=1150 width=89)
                                            predicate:(p_channel_tv = 'N')
                                            TableScan [TS_11] (rows=2300 width=89)
                                              default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:["p_promo_sk","p_channel_tv"]
                                    <-Map Join Operator [MAPJOIN_204] (rows=17185686 width=222)
                                        Conds:MAPJOIN_203._col2=RS_252._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3","_col5","_col6","_col9","_col10"]
                                      <-Map 9 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_252]
                                          PartitionCols:_col0
                                          Select Operator [SEL_250] (rows=154000 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_249] (rows=154000 width=115)
                                              predicate:(i_current_price > 50)
                                              TableScan [TS_8] (rows=462000 width=115)
                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price"]
                                      <-Map Join Operator [MAPJOIN_203] (rows=51557056 width=232)
                                          Conds:MERGEJOIN_202._col0=RS_247._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                        <-Map 8 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_247]
                                            PartitionCols:_col0
                                            Select Operator [SEL_245] (rows=8116 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_244] (rows=8116 width=98)
                                                predicate:CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-08-04 00:00:00' AND TIMESTAMP'1998-09-03 00:00:00'
                                                TableScan [TS_5] (rows=73049 width=98)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                        <-Merge Join Operator [MERGEJOIN_202] (rows=464045263 width=326)
                                            Conds:RS_273._col2, _col4=RS_275._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                          <-Map 12 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_273]
                                              PartitionCols:_col2, _col4
                                              Select Operator [SEL_272] (rows=283691906 width=243)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                Filter Operator [FIL_271] (rows=283691906 width=243)
                                                  predicate:(cs_catalog_page_sk is not null and cs_promo_sk is not null and cs_sold_date_sk is not null)
                                                  TableScan [TS_37] (rows=287989836 width=243)
                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_catalog_page_sk","cs_item_sk","cs_promo_sk","cs_order_number","cs_ext_sales_price","cs_net_profit"]
                                          <-Map 15 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_275]
                                              PartitionCols:_col0, _col1
                                              Select Operator [SEL_274] (rows=28798881 width=227)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                TableScan [TS_40] (rows=28798881 width=227)
                                                  default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_return_amount","cr_net_loss"]
                  <-Reducer 19 [CONTAINS] vectorized
                    Reduce Output Operator [RS_292]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_291] (rows=59581 width=627)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Select Operator [SEL_290] (rows=53 width=615)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Group By Operator [GBY_289] (rows=53 width=436)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0
                          <-Reducer 18 [SIMPLE_EDGE]
                            SHUFFLE [RS_109]
                              PartitionCols:_col0
                              Group By Operator [GBY_108] (rows=318 width=436)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col0
                                Select Operator [SEL_106] (rows=4714659 width=323)
                                  Output:["_col0","_col1","_col2","_col3"]
                                  Map Join Operator [MAPJOIN_211] (rows=4714659 width=323)
                                    Conds:MAPJOIN_210._col2=RS_288._col0(Inner),HybridGraceHashJoin:true,Output:["_col5","_col6","_col9","_col10","_col15"]
                                  <-Map 21 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_288]
                                      PartitionCols:_col0
                                      Select Operator [SEL_287] (rows=84 width=104)
                                        Output:["_col0","_col1"]
                                        TableScan [TS_89] (rows=84 width=104)
                                          default@web_site,web_site,Tbl:COMPLETE,Col:COMPLETE,Output:["web_site_sk","web_site_id"]
                                  <-Map Join Operator [MAPJOIN_210] (rows=4714659 width=227)
                                      Conds:MAPJOIN_209._col3=RS_258._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col5","_col6","_col9","_col10"]
                                    <-Map 10 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_258]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_255]
                                    <-Map Join Operator [MAPJOIN_209] (rows=9429318 width=231)
                                        Conds:MAPJOIN_208._col1=RS_253._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col5","_col6","_col9","_col10"]
                                      <-Map 9 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_253]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_250]
                                      <-Map Join Operator [MAPJOIN_208] (rows=28287952 width=235)
                                          Conds:MERGEJOIN_207._col0=RS_248._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                        <-Map 8 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_248]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_245]
                                        <-Merge Join Operator [MERGEJOIN_207] (rows=254608997 width=363)
                                            Conds:RS_284._col1, _col4=RS_286._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                          <-Map 17 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_284]
                                              PartitionCols:_col1, _col4
                                              Select Operator [SEL_283] (rows=143894769 width=243)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                Filter Operator [FIL_282] (rows=143894769 width=243)
                                                  predicate:(ws_promo_sk is not null and ws_sold_date_sk is not null and ws_web_site_sk is not null)
                                                  TableScan [TS_75] (rows=144002668 width=243)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_web_site_sk","ws_promo_sk","ws_order_number","ws_ext_sales_price","ws_net_profit"]
                                          <-Map 20 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_286]
                                              PartitionCols:_col0, _col1
                                              Select Operator [SEL_285] (rows=14398467 width=221)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                TableScan [TS_78] (rows=14398467 width=221)
                                                  default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_order_number","wr_return_amt","wr_net_loss"]
                  <-Reducer 3 [CONTAINS] vectorized
                    Reduce Output Operator [RS_264]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_263] (rows=59581 width=627)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Select Operator [SEL_262] (rows=822 width=617)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Group By Operator [GBY_261] (rows=822 width=436)
                            Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0
                          <-Reducer 2 [SIMPLE_EDGE]
                            SHUFFLE [RS_34]
                              PartitionCols:_col0
                              Group By Operator [GBY_33] (rows=1704 width=436)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col1)","sum(_col2)","sum(_col3)"],keys:_col0
                                Select Operator [SEL_31] (rows=15038783 width=100)
                                  Output:["_col0","_col1","_col2","_col3"]
                                  Map Join Operator [MAPJOIN_201] (rows=15038783 width=100)
                                    Conds:MAPJOIN_200._col2=RS_260._col0(Inner),HybridGraceHashJoin:true,Output:["_col5","_col6","_col9","_col10","_col15"]
                                  <-Map 11 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_260]
                                      PartitionCols:_col0
                                      Select Operator [SEL_259] (rows=1704 width=104)
                                        Output:["_col0","_col1"]
                                        TableScan [TS_14] (rows=1704 width=104)
                                          default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id"]
                                  <-Map Join Operator [MAPJOIN_200] (rows=15038783 width=0)
                                      Conds:MAPJOIN_199._col3=RS_256._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col5","_col6","_col9","_col10"]
                                    <-Map 10 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_256]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_255]
                                    <-Map Join Operator [MAPJOIN_199] (rows=30077566 width=57)
                                        Conds:MAPJOIN_198._col1=RS_251._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col5","_col6","_col9","_col10"]
                                      <-Map 9 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_251]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_250]
                                      <-Map Join Operator [MAPJOIN_198] (rows=90232695 width=177)
                                          Conds:MERGEJOIN_197._col0=RS_246._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                        <-Map 8 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_246]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_245]
                                        <-Merge Join Operator [MERGEJOIN_197] (rows=812149846 width=374)
                                            Conds:RS_241._col1, _col4=RS_243._col0, _col1(Left Outer),Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col9","_col10"]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_241]
                                              PartitionCols:_col1, _col4
                                              Select Operator [SEL_240] (rows=501693263 width=233)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                Filter Operator [FIL_239] (rows=501693263 width=233)
                                                  predicate:(ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                  TableScan [TS_0] (rows=575995635 width=233)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_ext_sales_price","ss_net_profit"]
                                          <-Map 7 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_243]
                                              PartitionCols:_col0, _col1
                                              Select Operator [SEL_242] (rows=57591150 width=224)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                TableScan [TS_3] (rows=57591150 width=224)
                                                  default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number","sr_return_amt","sr_net_loss"]

