Warning: Map Join MAPJOIN[185][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[184][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[183][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[182][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[181][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[180][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[179][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[178][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[177][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[176][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[175][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[174][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[173][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[172][bigTable=?] in task 'Map 1' is a cross product
Warning: Map Join MAPJOIN[171][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: explain
select case when (select count(*) 
                  from store_sales 
                  where ss_quantity between 1 and 20) > 409437
            then (select avg(ss_ext_list_price) 
                  from store_sales 
                  where ss_quantity between 1 and 20) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 1 and 20) end bucket1 ,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 21 and 40) > 4595804
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 21 and 40) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 21 and 40) end bucket2,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 41 and 60) > 7887297
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 41 and 60)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 41 and 60) end bucket3,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 61 and 80) > 10872978
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 61 and 80)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 61 and 80) end bucket4,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 81 and 100) > 43571537
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 81 and 100)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 81 and 100) end bucket5
from reason
where r_reason_sk = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@reason
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select case when (select count(*) 
                  from store_sales 
                  where ss_quantity between 1 and 20) > 409437
            then (select avg(ss_ext_list_price) 
                  from store_sales 
                  where ss_quantity between 1 and 20) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 1 and 20) end bucket1 ,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 21 and 40) > 4595804
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 21 and 40) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 21 and 40) end bucket2,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 41 and 60) > 7887297
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 41 and 60)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 41 and 60) end bucket3,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 61 and 80) > 10872978
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 61 and 80)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 61 and 80) end bucket4,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 81 and 100) > 43571537
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 81 and 100)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 81 and 100) end bucket5
from reason
where r_reason_sk = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@reason
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE), Reducer 11 (BROADCAST_EDGE), Reducer 12 (BROADCAST_EDGE), Reducer 13 (BROADCAST_EDGE), Reducer 15 (BROADCAST_EDGE), Reducer 16 (BROADCAST_EDGE), Reducer 17 (BROADCAST_EDGE), Reducer 18 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE), Reducer 3 (BROADCAST_EDGE), Reducer 4 (BROADCAST_EDGE), Reducer 5 (BROADCAST_EDGE), Reducer 6 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Reducer 10 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 14 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 14 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 14 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 14 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 14 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 2 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Map 2 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Map 2 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Map 2 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Map 2 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 1 vectorized
      File Output Operator [FS_324]
        Select Operator [SEL_323] (rows=2 width=560)
          Output:["_col0","_col1","_col2","_col3","_col4"]
          Map Join Operator [MAPJOIN_322] (rows=2 width=1140)
            Conds:(Left Outer),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
          <-Reducer 16 [BROADCAST_EDGE] vectorized
            BROADCAST [RS_296]
              Select Operator [SEL_295] (rows=1 width=112)
                Output:["_col0"]
                Group By Operator [GBY_294] (rows=1 width=120)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                <-Map 14 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_287]
                    Group By Operator [GBY_282] (rows=1 width=120)
                      Output:["_col0","_col1"],aggregations:["sum(ss_net_paid_inc_tax)","count(ss_net_paid_inc_tax)"]
                      Select Operator [SEL_277] (rows=182855757 width=110)
                        Output:["ss_net_paid_inc_tax"]
                        Filter Operator [FIL_272] (rows=182855757 width=110)
                          predicate:ss_quantity BETWEEN 81 AND 100
                          TableScan [TS_80] (rows=575995635 width=110)
                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_quantity","ss_net_paid_inc_tax"]
          <-Map Join Operator [MAPJOIN_321] (rows=2 width=1028)
              Conds:(Left Outer),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
            <-Reducer 10 [BROADCAST_EDGE] vectorized
              BROADCAST [RS_261]
                Select Operator [SEL_260] (rows=1 width=112)
                  Output:["_col0"]
                  Group By Operator [GBY_259] (rows=1 width=120)
                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                  <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_252]
                      Group By Operator [GBY_247] (rows=1 width=120)
                        Output:["_col0","_col1"],aggregations:["sum(ss_ext_list_price)","count(ss_ext_list_price)"]
                        Select Operator [SEL_242] (rows=182855757 width=110)
                          Output:["ss_ext_list_price"]
                          Filter Operator [FIL_237] (rows=182855757 width=110)
                            predicate:ss_quantity BETWEEN 81 AND 100
                            TableScan [TS_73] (rows=575995635 width=110)
                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_quantity","ss_ext_list_price"]
            <-Map Join Operator [MAPJOIN_320] (rows=2 width=916)
                Conds:(Left Outer),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
              <-Reducer 4 [BROADCAST_EDGE] vectorized
                BROADCAST [RS_226]
                  Select Operator [SEL_225] (rows=1 width=4)
                    Output:["_col0"]
                    Group By Operator [GBY_224] (rows=1 width=8)
                      Output:["_col0"],aggregations:["count(VALUE._col0)"]
                    <-Map 2 [CUSTOM_SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_217]
                        Group By Operator [GBY_212] (rows=1 width=8)
                          Output:["_col0"],aggregations:["count()"]
                          Select Operator [SEL_207] (rows=182855757 width=3)
                            Filter Operator [FIL_202] (rows=182855757 width=3)
                              predicate:ss_quantity BETWEEN 81 AND 100
                              TableScan [TS_66] (rows=575995635 width=3)
                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_quantity"]
              <-Map Join Operator [MAPJOIN_319] (rows=2 width=912)
                  Conds:(Left Outer),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                <-Reducer 15 [BROADCAST_EDGE] vectorized
                  BROADCAST [RS_293]
                    Select Operator [SEL_292] (rows=1 width=112)
                      Output:["_col0"]
                      Group By Operator [GBY_291] (rows=1 width=120)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                      <-Map 14 [CUSTOM_SIMPLE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_286]
                          Group By Operator [GBY_281] (rows=1 width=120)
                            Output:["_col0","_col1"],aggregations:["sum(ss_net_paid_inc_tax)","count(ss_net_paid_inc_tax)"]
                            Select Operator [SEL_276] (rows=182855757 width=110)
                              Output:["ss_net_paid_inc_tax"]
                              Filter Operator [FIL_271] (rows=182855757 width=110)
                                predicate:ss_quantity BETWEEN 61 AND 80
                                 Please refer to the previous TableScan [TS_80]
                <-Map Join Operator [MAPJOIN_318] (rows=2 width=800)
                    Conds:(Left Outer),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                  <-Reducer 9 [BROADCAST_EDGE] vectorized
                    BROADCAST [RS_258]
                      Select Operator [SEL_257] (rows=1 width=112)
                        Output:["_col0"]
                        Group By Operator [GBY_256] (rows=1 width=120)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_251]
                            Group By Operator [GBY_246] (rows=1 width=120)
                              Output:["_col0","_col1"],aggregations:["sum(ss_ext_list_price)","count(ss_ext_list_price)"]
                              Select Operator [SEL_241] (rows=182855757 width=110)
                                Output:["ss_ext_list_price"]
                                Filter Operator [FIL_236] (rows=182855757 width=110)
                                  predicate:ss_quantity BETWEEN 61 AND 80
                                   Please refer to the previous TableScan [TS_73]
                  <-Map Join Operator [MAPJOIN_317] (rows=2 width=688)
                      Conds:(Left Outer),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                    <-Reducer 3 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_223]
                        Select Operator [SEL_222] (rows=1 width=4)
                          Output:["_col0"]
                          Group By Operator [GBY_221] (rows=1 width=8)
                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                          <-Map 2 [CUSTOM_SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_216]
                              Group By Operator [GBY_211] (rows=1 width=8)
                                Output:["_col0"],aggregations:["count()"]
                                Select Operator [SEL_206] (rows=182855757 width=3)
                                  Filter Operator [FIL_201] (rows=182855757 width=3)
                                    predicate:ss_quantity BETWEEN 61 AND 80
                                     Please refer to the previous TableScan [TS_66]
                    <-Map Join Operator [MAPJOIN_316] (rows=2 width=684)
                        Conds:(Left Outer),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                      <-Reducer 19 [BROADCAST_EDGE] vectorized
                        BROADCAST [RS_305]
                          Select Operator [SEL_304] (rows=1 width=112)
                            Output:["_col0"]
                            Group By Operator [GBY_303] (rows=1 width=120)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                            <-Map 14 [CUSTOM_SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_290]
                                Group By Operator [GBY_285] (rows=1 width=120)
                                  Output:["_col0","_col1"],aggregations:["sum(ss_net_paid_inc_tax)","count(ss_net_paid_inc_tax)"]
                                  Select Operator [SEL_280] (rows=182855757 width=110)
                                    Output:["ss_net_paid_inc_tax"]
                                    Filter Operator [FIL_275] (rows=182855757 width=110)
                                      predicate:ss_quantity BETWEEN 41 AND 60
                                       Please refer to the previous TableScan [TS_80]
                      <-Map Join Operator [MAPJOIN_315] (rows=2 width=572)
                          Conds:(Left Outer),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                        <-Reducer 13 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_270]
                            Select Operator [SEL_269] (rows=1 width=112)
                              Output:["_col0"]
                              Group By Operator [GBY_268] (rows=1 width=120)
                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                              <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_255]
                                  Group By Operator [GBY_250] (rows=1 width=120)
                                    Output:["_col0","_col1"],aggregations:["sum(ss_ext_list_price)","count(ss_ext_list_price)"]
                                    Select Operator [SEL_245] (rows=182855757 width=110)
                                      Output:["ss_ext_list_price"]
                                      Filter Operator [FIL_240] (rows=182855757 width=110)
                                        predicate:ss_quantity BETWEEN 41 AND 60
                                         Please refer to the previous TableScan [TS_73]
                        <-Map Join Operator [MAPJOIN_314] (rows=2 width=460)
                            Conds:(Left Outer),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                          <-Reducer 7 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_235]
                              Select Operator [SEL_234] (rows=1 width=4)
                                Output:["_col0"]
                                Group By Operator [GBY_233] (rows=1 width=8)
                                  Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                <-Map 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_220]
                                    Group By Operator [GBY_215] (rows=1 width=8)
                                      Output:["_col0"],aggregations:["count()"]
                                      Select Operator [SEL_210] (rows=182855757 width=3)
                                        Filter Operator [FIL_205] (rows=182855757 width=3)
                                          predicate:ss_quantity BETWEEN 41 AND 60
                                           Please refer to the previous TableScan [TS_66]
                          <-Map Join Operator [MAPJOIN_313] (rows=2 width=456)
                              Conds:(Left Outer),Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 18 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_302]
                                Select Operator [SEL_301] (rows=1 width=112)
                                  Output:["_col0"]
                                  Group By Operator [GBY_300] (rows=1 width=120)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                  <-Map 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_289]
                                      Group By Operator [GBY_284] (rows=1 width=120)
                                        Output:["_col0","_col1"],aggregations:["sum(ss_net_paid_inc_tax)","count(ss_net_paid_inc_tax)"]
                                        Select Operator [SEL_279] (rows=182855757 width=110)
                                          Output:["ss_net_paid_inc_tax"]
                                          Filter Operator [FIL_274] (rows=182855757 width=110)
                                            predicate:ss_quantity BETWEEN 21 AND 40
                                             Please refer to the previous TableScan [TS_80]
                            <-Map Join Operator [MAPJOIN_312] (rows=2 width=344)
                                Conds:(Left Outer),Output:["_col1","_col2","_col3","_col4","_col5"]
                              <-Reducer 12 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_267]
                                  Select Operator [SEL_266] (rows=1 width=112)
                                    Output:["_col0"]
                                    Group By Operator [GBY_265] (rows=1 width=120)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                    <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_254]
                                        Group By Operator [GBY_249] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(ss_ext_list_price)","count(ss_ext_list_price)"]
                                          Select Operator [SEL_244] (rows=182855757 width=110)
                                            Output:["ss_ext_list_price"]
                                            Filter Operator [FIL_239] (rows=182855757 width=110)
                                              predicate:ss_quantity BETWEEN 21 AND 40
                                               Please refer to the previous TableScan [TS_73]
                              <-Map Join Operator [MAPJOIN_311] (rows=2 width=232)
                                  Conds:(Left Outer),Output:["_col1","_col2","_col3","_col4"]
                                <-Reducer 6 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_232]
                                    Select Operator [SEL_231] (rows=1 width=4)
                                      Output:["_col0"]
                                      Group By Operator [GBY_230] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                      <-Map 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_219]
                                          Group By Operator [GBY_214] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Select Operator [SEL_209] (rows=182855757 width=3)
                                              Filter Operator [FIL_204] (rows=182855757 width=3)
                                                predicate:ss_quantity BETWEEN 21 AND 40
                                                 Please refer to the previous TableScan [TS_66]
                                <-Map Join Operator [MAPJOIN_310] (rows=2 width=228)
                                    Conds:(Left Outer),Output:["_col1","_col2","_col3"]
                                  <-Reducer 17 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_299]
                                      Select Operator [SEL_298] (rows=1 width=112)
                                        Output:["_col0"]
                                        Group By Operator [GBY_297] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                        <-Map 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_288]
                                            Group By Operator [GBY_283] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(ss_net_paid_inc_tax)","count(ss_net_paid_inc_tax)"]
                                              Select Operator [SEL_278] (rows=182855757 width=110)
                                                Output:["ss_net_paid_inc_tax"]
                                                Filter Operator [FIL_273] (rows=182855757 width=110)
                                                  predicate:ss_quantity BETWEEN 1 AND 20
                                                   Please refer to the previous TableScan [TS_80]
                                  <-Map Join Operator [MAPJOIN_309] (rows=2 width=116)
                                      Conds:(Left Outer),Output:["_col1","_col2"]
                                    <-Reducer 11 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_264]
                                        Select Operator [SEL_263] (rows=1 width=112)
                                          Output:["_col0"]
                                          Group By Operator [GBY_262] (rows=1 width=120)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                          <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_253]
                                              Group By Operator [GBY_248] (rows=1 width=120)
                                                Output:["_col0","_col1"],aggregations:["sum(ss_ext_list_price)","count(ss_ext_list_price)"]
                                                Select Operator [SEL_243] (rows=182855757 width=110)
                                                  Output:["ss_ext_list_price"]
                                                  Filter Operator [FIL_238] (rows=182855757 width=110)
                                                    predicate:ss_quantity BETWEEN 1 AND 20
                                                     Please refer to the previous TableScan [TS_73]
                                    <-Map Join Operator [MAPJOIN_308] (rows=2 width=4)
                                        Conds:(Left Outer),Output:["_col1"]
                                      <-Reducer 5 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_229]
                                          Select Operator [SEL_228] (rows=1 width=4)
                                            Output:["_col0"]
                                            Group By Operator [GBY_227] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                            <-Map 2 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_218]
                                                Group By Operator [GBY_213] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count()"]
                                                  Select Operator [SEL_208] (rows=182855757 width=3)
                                                    Filter Operator [FIL_203] (rows=182855757 width=3)
                                                      predicate:ss_quantity BETWEEN 1 AND 20
                                                       Please refer to the previous TableScan [TS_66]
                                      <-Select Operator [SEL_307] (rows=2 width=4)
                                          Filter Operator [FIL_306] (rows=2 width=4)
                                            predicate:(r_reason_sk = 1)
                                            TableScan [TS_0] (rows=72 width=4)
                                              default@reason,reason,Tbl:COMPLETE,Col:COMPLETE,Output:["r_reason_sk"]

