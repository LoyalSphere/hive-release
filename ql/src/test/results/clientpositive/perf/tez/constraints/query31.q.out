PREHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 16 (BROADCAST_EDGE), Map 17 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE)
Map 18 <- Map 16 (BROADCAST_EDGE), Map 17 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE)
Reducer 10 <- Map 18 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 13 (BROADCAST_EDGE), Reducer 15 (BROADCAST_EDGE), Reducer 3 (BROADCAST_EDGE)
Reducer 12 <- Map 18 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 18 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 5 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Reducer 4 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 11 vectorized
      File Output Operator [FS_326]
        Select Operator [SEL_325] (rows=304 width=550)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          Filter Operator [FIL_324] (rows=304 width=786)
            predicate:((((_col11 > 0) is true and ((_col8 and ((_col5 / _col7) > (_col15 / _col11))) or _col9)) or (null and (_col11 > 0) is not true)) and (((_col13 > 0) is true and ((_col2 and ((_col7 / _col1) > (_col11 / _col13))) or _col3)) or (null and (_col13 > 0) is not true)))
            Map Join Operator [MAPJOIN_323] (rows=440 width=786)
              Conds:RS_315._col0=MAPJOIN_322._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col5","_col7","_col8","_col9","_col10","_col11","_col13","_col15"]
            <-Reducer 3 [BROADCAST_EDGE] vectorized
              BROADCAST [RS_315]
                PartitionCols:_col0
                Map Join Operator [MAPJOIN_314] (rows=440 width=450)
                  Conds:MAPJOIN_313._col0=RS_310._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col5","_col7","_col8","_col9"]
                <-Reducer 7 [BROADCAST_EDGE] vectorized
                  BROADCAST [RS_310]
                    PartitionCols:_col0
                    Select Operator [SEL_309] (rows=440 width=218)
                      Output:["_col0","_col1","_col2","_col3"]
                      Group By Operator [GBY_308] (rows=440 width=210)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 6 [SIMPLE_EDGE]
                        SHUFFLE [RS_57]
                          PartitionCols:_col0
                          Group By Operator [GBY_56] (rows=3960 width=210)
                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                            Merge Join Operator [MERGEJOIN_241] (rows=10246882 width=209)
                              Conds:RS_305._col1=RS_268._col0(Inner),Output:["_col2","_col5"]
                            <-Map 9 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_268]
                                PartitionCols:_col0
                                Select Operator [SEL_265] (rows=40000000 width=102)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_264] (rows=40000000 width=102)
                                    predicate:ca_county is not null
                                    TableScan [TS_6] (rows=40000000 width=102)
                                      default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_305]
                                PartitionCols:_col1
                                Map Join Operator [MAPJOIN_302] (rows=10246882 width=115)
                                  Conds:SEL_299._col0=RS_288._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                <-Map 17 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_288]
                                    PartitionCols:_col0
                                    Select Operator [SEL_286] (rows=130 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_284] (rows=130 width=12)
                                        predicate:((d_qoy = 2) and (d_year = 2000))
                                        TableScan [TS_43] (rows=73049 width=12)
                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                <-Select Operator [SEL_299] (rows=143931246 width=119)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_298] (rows=143931246 width=119)
                                      predicate:(ws_bill_addr_sk is not null and ws_sold_date_sk is not null)
                                      TableScan [TS_0] (rows=144002668 width=119)
                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                      <-Map 16 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_282]
                                          PartitionCols:_col0
                                          Select Operator [SEL_280] (rows=130 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_278] (rows=130 width=12)
                                              predicate:((d_qoy = 3) and (d_year = 2000))
                                              TableScan [TS_23] (rows=73049 width=12)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                                      <-Map 8 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_276]
                                          PartitionCols:_col0
                                          Select Operator [SEL_274] (rows=130 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_272] (rows=130 width=12)
                                              predicate:((d_qoy = 1) and (d_year = 2000))
                                              TableScan [TS_3] (rows=73049 width=12)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_qoy"]
                <-Map Join Operator [MAPJOIN_313] (rows=440 width=330)
                    Conds:SEL_312._col0=RS_307._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col5"]
                  <-Reducer 5 [BROADCAST_EDGE] vectorized
                    BROADCAST [RS_307]
                      PartitionCols:_col0
                      Group By Operator [GBY_306] (rows=440 width=210)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 4 [SIMPLE_EDGE]
                        SHUFFLE [RS_37]
                          PartitionCols:_col0
                          Group By Operator [GBY_36] (rows=3960 width=210)
                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                            Merge Join Operator [MERGEJOIN_239] (rows=10246882 width=209)
                              Conds:RS_304._col1=RS_267._col0(Inner),Output:["_col2","_col5"]
                            <-Map 9 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_267]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_265]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_304]
                                PartitionCols:_col1
                                Map Join Operator [MAPJOIN_301] (rows=10246882 width=115)
                                  Conds:SEL_299._col0=RS_282._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                <-Map 16 [BROADCAST_EDGE] vectorized
                                   Please refer to the previous BROADCAST [RS_282]
                                   Please refer to the previous Select Operator [SEL_299]
                  <-Select Operator [SEL_312] (rows=440 width=218)
                      Output:["_col0","_col1","_col2","_col3"]
                      Group By Operator [GBY_311] (rows=440 width=210)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                      <-Reducer 2 [SIMPLE_EDGE]
                        SHUFFLE [RS_17]
                          PartitionCols:_col0
                          Group By Operator [GBY_16] (rows=3960 width=210)
                            Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                            Merge Join Operator [MERGEJOIN_237] (rows=10246882 width=209)
                              Conds:RS_303._col1=RS_266._col0(Inner),Output:["_col2","_col5"]
                            <-Map 9 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_266]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_265]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_303]
                                PartitionCols:_col1
                                Map Join Operator [MAPJOIN_300] (rows=10246882 width=115)
                                  Conds:SEL_299._col0=RS_276._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                <-Map 8 [BROADCAST_EDGE] vectorized
                                   Please refer to the previous BROADCAST [RS_276]
                                   Please refer to the previous Select Operator [SEL_299]
            <-Map Join Operator [MAPJOIN_322] (rows=1605 width=434)
                Conds:MAPJOIN_321._col0=RS_319._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col3","_col5"]
              <-Reducer 15 [BROADCAST_EDGE] vectorized
                BROADCAST [RS_319]
                  PartitionCols:_col0
                  Group By Operator [GBY_318] (rows=1605 width=210)
                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                  <-Reducer 14 [SIMPLE_EDGE]
                    SHUFFLE [RS_117]
                      PartitionCols:_col0
                      Group By Operator [GBY_116] (rows=33705 width=210)
                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                        Merge Join Operator [MERGEJOIN_247] (rows=37399561 width=139)
                          Conds:RS_297._col1=RS_271._col0(Inner),Output:["_col2","_col5"]
                        <-Map 9 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_271]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_265]
                        <-Map 18 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_297]
                            PartitionCols:_col1
                            Map Join Operator [MAPJOIN_294] (rows=37399561 width=42)
                              Conds:SEL_291._col0=RS_289._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                            <-Map 17 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_289]
                                PartitionCols:_col0
                                Select Operator [SEL_287] (rows=130 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_285] (rows=130 width=12)
                                    predicate:((d_qoy = 3) and (d_year = 2000))
                                     Please refer to the previous TableScan [TS_43]
                            <-Select Operator [SEL_291] (rows=525327191 width=114)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_290] (rows=525327191 width=114)
                                  predicate:(ss_addr_sk is not null and ss_sold_date_sk is not null)
                                  TableScan [TS_60] (rows=575995635 width=114)
                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
              <-Map Join Operator [MAPJOIN_321] (rows=1605 width=322)
                  Conds:GBY_320._col0=RS_317._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col3"]
                <-Reducer 13 [BROADCAST_EDGE] vectorized
                  BROADCAST [RS_317]
                    PartitionCols:_col0
                    Group By Operator [GBY_316] (rows=1605 width=210)
                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                    <-Reducer 12 [SIMPLE_EDGE]
                      SHUFFLE [RS_97]
                        PartitionCols:_col0
                        Group By Operator [GBY_96] (rows=33705 width=210)
                          Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                          Merge Join Operator [MERGEJOIN_245] (rows=37399561 width=139)
                            Conds:RS_296._col1=RS_270._col0(Inner),Output:["_col2","_col5"]
                          <-Map 9 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_270]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_265]
                          <-Map 18 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_296]
                              PartitionCols:_col1
                              Map Join Operator [MAPJOIN_293] (rows=37399561 width=42)
                                Conds:SEL_291._col0=RS_283._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                              <-Map 16 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_283]
                                  PartitionCols:_col0
                                  Select Operator [SEL_281] (rows=130 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_279] (rows=130 width=12)
                                      predicate:((d_qoy = 1) and (d_year = 2000))
                                       Please refer to the previous TableScan [TS_23]
                                 Please refer to the previous Select Operator [SEL_291]
                <-Group By Operator [GBY_320] (rows=1605 width=210)
                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                  <-Reducer 10 [SIMPLE_EDGE]
                    SHUFFLE [RS_77]
                      PartitionCols:_col0
                      Group By Operator [GBY_76] (rows=33705 width=210)
                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                        Merge Join Operator [MERGEJOIN_243] (rows=37399561 width=139)
                          Conds:RS_295._col1=RS_269._col0(Inner),Output:["_col2","_col5"]
                        <-Map 9 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_269]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_265]
                        <-Map 18 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_295]
                            PartitionCols:_col1
                            Map Join Operator [MAPJOIN_292] (rows=37399561 width=42)
                              Conds:SEL_291._col0=RS_277._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                            <-Map 8 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_277]
                                PartitionCols:_col0
                                Select Operator [SEL_275] (rows=130 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_273] (rows=130 width=12)
                                    predicate:((d_qoy = 2) and (d_year = 2000))
                                     Please refer to the previous TableScan [TS_3]
                               Please refer to the previous Select Operator [SEL_291]

