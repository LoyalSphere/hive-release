PREHOOK: query: explain
select  
    sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
 	partition by grouping(i_category)+grouping(i_class),
 	case when grouping(i_class) = 0 then i_category end 
 	order by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,item
   ,store
 where
    d1.d_year = 1999 
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk  = ss_item_sk 
 and s_store_sk  = ss_store_sk
 and s_state in ('SD','FL','MI','LA',
                 'MO','SC','AL','GA')
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then i_category end
  ,rank_within_parent
  limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
    sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
 	partition by grouping(i_category)+grouping(i_class),
 	case when grouping(i_class) = 0 then i_category end 
 	order by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,item
   ,store
 where
    d1.d_year = 1999 
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk  = ss_item_sk 
 and s_store_sk  = ss_store_sk
 and s_state in ('SD','FL','MI','LA',
                 'MO','SC','AL','GA')
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then i_category end
  ,rank_within_parent
  limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 6 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_76]
        Limit [LIM_75] (rows=100 width=490)
          Number of rows:100
          Select Operator [SEL_74] (rows=3060 width=490)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_73]
              Select Operator [SEL_72] (rows=3060 width=490)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                PTF Operator [PTF_71] (rows=3060 width=414)
                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"(_col2 / _col3) ASC NULLS FIRST","partition by:":"(grouping(_col4, 1) + grouping(_col4, 0)), CASE WHEN ((grouping(_col4, 0) = 0)) THEN (_col0) ELSE (CAST( null AS STRING)) END"}]
                  Select Operator [SEL_70] (rows=3060 width=414)
                    Output:["_col0","_col1","_col2","_col3","_col4"]
                  <-Reducer 3 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_69]
                      PartitionCols:(grouping(_col4, 1) + grouping(_col4, 0)), CASE WHEN ((grouping(_col4, 0) = 0)) THEN (_col0) ELSE (CAST( null AS STRING)) END
                      Select Operator [SEL_68] (rows=3060 width=414)
                        Output:["_col0","_col1","_col2","_col3","_col4"]
                        Group By Operator [GBY_67] (rows=3060 width=414)
                          Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_23]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_22] (rows=85680 width=414)
                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col0, _col1, 0L
                              Select Operator [SEL_20] (rows=30601888 width=232)
                                Output:["_col0","_col1","_col2","_col3"]
                                Merge Join Operator [MERGEJOIN_51] (rows=30601888 width=232)
                                  Conds:RS_64._col1=RS_66._col0(Inner),Output:["_col3","_col4","_col8","_col9"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_64]
                                    PartitionCols:_col1
                                    Map Join Operator [MAPJOIN_63] (rows=30601888 width=54)
                                      Conds:MAPJOIN_62._col2=RS_59._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3","_col4"]
                                    <-Map 7 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_59]
                                        PartitionCols:_col0
                                        Select Operator [SEL_58] (rows=278 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_57] (rows=278 width=90)
                                            predicate:(s_state) IN ('SD', 'FL', 'MI', 'LA', 'MO', 'SC', 'AL', 'GA')
                                            TableScan [TS_6] (rows=1704 width=90)
                                              default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_state"]
                                    <-Map Join Operator [MAPJOIN_62] (rows=187574154 width=203)
                                        Conds:SEL_61._col0=RS_56._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                      <-Map 6 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_56]
                                          PartitionCols:_col0
                                          Select Operator [SEL_55] (rows=652 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_54] (rows=652 width=8)
                                              predicate:(d_year = 1999)
                                              TableScan [TS_3] (rows=73049 width=8)
                                                default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                      <-Select Operator [SEL_61] (rows=525329897 width=225)
                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                          Filter Operator [FIL_60] (rows=525329897 width=225)
                                            predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                            TableScan [TS_0] (rows=575995635 width=225)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_store_sk","ss_ext_sales_price","ss_net_profit"]
                                <-Map 8 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_66]
                                    PartitionCols:_col0
                                    Select Operator [SEL_65] (rows=462000 width=186)
                                      Output:["_col0","_col1","_col2"]
                                      TableScan [TS_9] (rows=462000 width=186)
                                        default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_class","i_category"]

