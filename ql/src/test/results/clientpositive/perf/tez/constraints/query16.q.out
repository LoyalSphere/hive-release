PREHOOK: query: explain
select  
   count(distinct cs_order_number) as `order count`
  ,sum(cs_ext_ship_cost) as `total shipping cost`
  ,sum(cs_net_profit) as `total net profit`
from
   catalog_sales cs1
  ,date_dim
  ,customer_address
  ,call_center
where
    d_date between '2001-4-01' and 
           (cast('2001-4-01' as date) + 60 days)
and cs1.cs_ship_date_sk = d_date_sk
and cs1.cs_ship_addr_sk = ca_address_sk
and ca_state = 'NY'
and cs1.cs_call_center_sk = cc_call_center_sk
and cc_county in ('Ziebach County','Levy County','Huron County','Franklin Parish',
                  'Daviess County'
)
and exists (select *
            from catalog_sales cs2
            where cs1.cs_order_number = cs2.cs_order_number
              and cs1.cs_warehouse_sk <> cs2.cs_warehouse_sk)
and not exists(select *
               from catalog_returns cr1
               where cs1.cs_order_number = cr1.cr_order_number)
order by count(distinct cs_order_number)
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@call_center
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
   count(distinct cs_order_number) as `order count`
  ,sum(cs_ext_ship_cost) as `total shipping cost`
  ,sum(cs_net_profit) as `total net profit`
from
   catalog_sales cs1
  ,date_dim
  ,customer_address
  ,call_center
where
    d_date between '2001-4-01' and 
           (cast('2001-4-01' as date) + 60 days)
and cs1.cs_ship_date_sk = d_date_sk
and cs1.cs_ship_addr_sk = ca_address_sk
and ca_state = 'NY'
and cs1.cs_call_center_sk = cc_call_center_sk
and cc_county in ('Ziebach County','Levy County','Huron County','Franklin Parish',
                  'Daviess County'
)
and exists (select *
            from catalog_sales cs2
            where cs1.cs_order_number = cs2.cs_order_number
              and cs1.cs_warehouse_sk <> cs2.cs_warehouse_sk)
and not exists(select *
               from catalog_returns cr1
               where cs1.cs_order_number = cr1.cr_order_number)
order by count(distinct cs_order_number)
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@call_center
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 8 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (BROADCAST_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 3 <- Map 11 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 12 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_108]
        Limit [LIM_107] (rows=1 width=240)
          Number of rows:100
          Select Operator [SEL_106] (rows=1 width=240)
            Output:["_col0","_col1","_col2"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_105]
              Select Operator [SEL_104] (rows=1 width=240)
                Output:["_col1","_col2","_col3"]
                Group By Operator [GBY_103] (rows=1 width=232)
                  Output:["_col0","_col1","_col2"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"]
                <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_102]
                    Group By Operator [GBY_101] (rows=1 width=232)
                      Output:["_col0","_col1","_col2"],aggregations:["count(_col0)","sum(_col1)","sum(_col2)"]
                      Group By Operator [GBY_100] (rows=5150256 width=228)
                        Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                      <-Reducer 4 [SIMPLE_EDGE]
                        SHUFFLE [RS_69]
                          PartitionCols:_col0
                          Group By Operator [GBY_68] (rows=5150256 width=228)
                            Output:["_col0","_col2","_col3"],aggregations:["sum(_col5)","sum(_col6)"],keys:_col4
                            Select Operator [SEL_37] (rows=5150256 width=218)
                              Output:["_col4","_col5","_col6"]
                              Filter Operator [FIL_36] (rows=5150256 width=218)
                                predicate:_col14 is null
                                Merge Join Operator [MERGEJOIN_78] (rows=13282454 width=218)
                                  Conds:RS_33._col4=RS_99._col0(Left Outer),Output:["_col4","_col5","_col6","_col14"]
                                <-Map 12 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_99]
                                    PartitionCols:_col0
                                    Select Operator [SEL_98] (rows=28798881 width=8)
                                      Output:["_col0","_col1"]
                                      TableScan [TS_25] (rows=28798881 width=4)
                                        default@catalog_returns,cr1,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_order_number"]
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_33]
                                    PartitionCols:_col4
                                    Select Operator [SEL_32] (rows=5150256 width=200)
                                      Output:["_col4","_col5","_col6"]
                                      Merge Join Operator [MERGEJOIN_77] (rows=5150256 width=202)
                                        Conds:RS_29._col4=RS_97._col0(Left Semi),Output:["_col3","_col4","_col5","_col6","_col14"],residual filter predicates:{(_col3 <> _col14)}
                                      <-Map 11 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_97]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_96] (rows=286548719 width=7)
                                            Output:["_col0","_col1"],keys:_col0, _col1
                                            Select Operator [SEL_95] (rows=286548719 width=7)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_94] (rows=286548719 width=7)
                                                predicate:cs_warehouse_sk is not null
                                                TableScan [TS_22] (rows=287989836 width=7)
                                                  default@catalog_sales,cs2,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_warehouse_sk","cs_order_number"]
                                      <-Reducer 2 [SIMPLE_EDGE]
                                        SHUFFLE [RS_29]
                                          PartitionCols:_col4
                                          Map Join Operator [MAPJOIN_76] (rows=5150256 width=200)
                                            Conds:MERGEJOIN_75._col2=RS_93._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col4","_col5","_col6"]
                                          <-Map 10 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_93]
                                              PartitionCols:_col0
                                              Select Operator [SEL_92] (rows=10 width=102)
                                                Output:["_col0"]
                                                Filter Operator [FIL_91] (rows=10 width=102)
                                                  predicate:(cc_county) IN ('Ziebach County', 'Levy County', 'Huron County', 'Franklin Parish', 'Daviess County')
                                                  TableScan [TS_9] (rows=60 width=102)
                                                    default@call_center,call_center,Tbl:COMPLETE,Col:COMPLETE,Output:["cc_call_center_sk","cc_county"]
                                          <-Merge Join Operator [MERGEJOIN_75] (rows=30901534 width=230)
                                              Conds:RS_87._col1=RS_90._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col6"]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_87]
                                                PartitionCols:_col1
                                                Map Join Operator [MAPJOIN_86] (rows=31519516 width=234)
                                                  Conds:SEL_85._col0=RS_83._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5","_col6"]
                                                <-Map 8 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_83]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_82] (rows=8116 width=98)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_81] (rows=8116 width=98)
                                                        predicate:CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'2001-04-01 00:00:00' AND TIMESTAMP'2001-05-31 00:00:00'
                                                        TableScan [TS_3] (rows=73049 width=98)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                                <-Select Operator [SEL_85] (rows=283695062 width=243)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                                    Filter Operator [FIL_84] (rows=283695062 width=243)
                                                      predicate:(cs_call_center_sk is not null and cs_ship_addr_sk is not null and cs_ship_date_sk is not null)
                                                      TableScan [TS_0] (rows=287989836 width=243)
                                                        default@catalog_sales,cs1,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_ship_date_sk","cs_ship_addr_sk","cs_call_center_sk","cs_warehouse_sk","cs_order_number","cs_ext_ship_cost","cs_net_profit"]
                                            <-Map 9 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_90]
                                                PartitionCols:_col0
                                                Select Operator [SEL_89] (rows=784314 width=90)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_88] (rows=784314 width=90)
                                                    predicate:(ca_state = 'NY')
                                                    TableScan [TS_6] (rows=40000000 width=90)
                                                      default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]

