PREHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@mv_store_sales_item_customer
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@mv_store_sales_item_customer
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 10 (BROADCAST_EDGE), Map 11 (BROADCAST_EDGE)
Map 12 <- Map 11 (BROADCAST_EDGE)
Map 13 <- Map 11 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Union 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Map 1 (SIMPLE_EDGE), Map 12 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE), Union 3 (CONTAINS)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_168]
        Limit [LIM_167] (rows=1 width=8)
          Number of rows:100
          Group By Operator [GBY_166] (rows=1 width=8)
            Output:["_col0"],aggregations:["count(VALUE._col0)"]
          <-Reducer 4 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_165]
              Group By Operator [GBY_164] (rows=1 width=8)
                Output:["_col0"],aggregations:["count()"]
                Select Operator [SEL_163] (rows=1 width=8)
                  Filter Operator [FIL_162] (rows=1 width=8)
                    predicate:(_col3 = 3L)
                    Select Operator [SEL_161] (rows=74133466 width=8)
                      Output:["_col3"]
                      Group By Operator [GBY_160] (rows=74133466 width=282)
                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                      <-Union 3 [SIMPLE_EDGE]
                        <-Reducer 2 [CONTAINS] vectorized
                          Reduce Output Operator [RS_159]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_158] (rows=74133466 width=282)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_157] (rows=1 width=282)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col2, _col1, _col0
                                Select Operator [SEL_156] (rows=1 width=274)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_155] (rows=1 width=274)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_154]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_153] (rows=1 width=274)
                                        Output:["_col0","_col1","_col2"],keys:_col2, _col1, _col6
                                        Map Join Operator [MAPJOIN_152] (rows=1 width=274)
                                          Conds:MAPJOIN_149._col4=RS_145._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col6"]
                                        <-Map 11 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_145]
                                            PartitionCols:_col0
                                            Select Operator [SEL_144] (rows=317 width=102)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_143] (rows=317 width=102)
                                                predicate:d_month_seq BETWEEN 1212 AND 1223
                                                TableScan [TS_5] (rows=73049 width=102)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_month_seq"]
                                        <-Map Join Operator [MAPJOIN_149] (rows=1 width=184)
                                            Conds:SEL_148._col0=RS_142._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col4"]
                                          <-Map 10 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_142]
                                              PartitionCols:_col0
                                              Select Operator [SEL_141] (rows=1 width=8)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_140] (rows=1 width=8)
                                                  predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                  TableScan [TS_2] (rows=1 width=8)
                                                    default@mv_store_sales_item_customer,default.mv_store_sales_item_customer,Tbl:COMPLETE,Col:PARTIAL,Output:["ss_customer_sk"]
                                          <-Select Operator [SEL_148] (rows=80000000 width=184)
                                              Output:["_col0","_col1","_col2"]
                                              TableScan [TS_0] (rows=80000000 width=184)
                                                default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_first_name","c_last_name"]
                        <-Reducer 7 [CONTAINS] vectorized
                          Reduce Output Operator [RS_177]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_176] (rows=74133466 width=282)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_175] (rows=49146883 width=282)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_174] (rows=49146883 width=274)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_173] (rows=49146883 width=274)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 6 [SIMPLE_EDGE]
                                    SHUFFLE [RS_40]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_39] (rows=49146883 width=274)
                                        Output:["_col0","_col1","_col2"],keys:_col6, _col5, _col3
                                        Merge Join Operator [MERGEJOIN_114] (rows=49146883 width=274)
                                          Conds:RS_172._col1=RS_150._col0(Inner),Output:["_col3","_col5","_col6"]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_150]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_148]
                                        <-Map 12 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_172]
                                            PartitionCols:_col1
                                            Map Join Operator [MAPJOIN_171] (rows=49146883 width=97)
                                              Conds:SEL_170._col0=RS_146._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3"]
                                            <-Map 11 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_146]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_144]
                                            <-Select Operator [SEL_170] (rows=285117831 width=7)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_169] (rows=285117831 width=7)
                                                  predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                  TableScan [TS_24] (rows=287989836 width=7)
                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk"]
                        <-Reducer 9 [CONTAINS] vectorized
                          Reduce Output Operator [RS_186]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_185] (rows=74133466 width=282)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_184] (rows=24986582 width=282)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_183] (rows=24986582 width=274)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_182] (rows=24986582 width=274)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 8 [SIMPLE_EDGE]
                                    SHUFFLE [RS_65]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_64] (rows=24986582 width=274)
                                        Output:["_col0","_col1","_col2"],keys:_col6, _col5, _col3
                                        Merge Join Operator [MERGEJOIN_116] (rows=24986582 width=274)
                                          Conds:RS_181._col1=RS_151._col0(Inner),Output:["_col3","_col5","_col6"]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_151]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_148]
                                        <-Map 13 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_181]
                                            PartitionCols:_col1
                                            Map Join Operator [MAPJOIN_180] (rows=24986582 width=97)
                                              Conds:SEL_179._col0=RS_147._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3"]
                                            <-Map 11 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_147]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_144]
                                            <-Select Operator [SEL_179] (rows=143930993 width=7)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_178] (rows=143930993 width=7)
                                                  predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                  TableScan [TS_49] (rows=144002668 width=7)
                                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]

