PREHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@income_band
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@income_band
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 16 <- Map 15 (BROADCAST_EDGE), Map 19 (BROADCAST_EDGE), Map 20 (BROADCAST_EDGE)
Reducer 10 <- Reducer 18 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 11 <- Map 21 (SIMPLE_EDGE), Map 26 (BROADCAST_EDGE), Map 27 (BROADCAST_EDGE), Reducer 10 (SIMPLE_EDGE), Reducer 24 (BROADCAST_EDGE)
Reducer 12 <- Map 28 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 29 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 17 <- Map 16 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 18 <- Map 16 (SIMPLE_EDGE), Map 21 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 15 (BROADCAST_EDGE), Map 20 (BROADCAST_EDGE), Map 26 (BROADCAST_EDGE), Map 28 (SIMPLE_EDGE)
Reducer 23 <- Map 22 (SIMPLE_EDGE), Map 25 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE)
Reducer 3 <- Reducer 17 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 21 (SIMPLE_EDGE), Map 26 (BROADCAST_EDGE), Map 27 (BROADCAST_EDGE), Reducer 24 (BROADCAST_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 28 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 29 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 14 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 9 vectorized
      File Output Operator [FS_598]
        Select Operator [SEL_597] (rows=732552381 width=1702)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18","_col19","_col20"]
        <-Reducer 8 [SIMPLE_EDGE]
          SHUFFLE [RS_199]
            Select Operator [SEL_198] (rows=732552381 width=1694)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17","_col18"]
              Filter Operator [FIL_197] (rows=732552381 width=1694)
                predicate:(_col19 <= _col12)
                Merge Join Operator [MERGEJOIN_525] (rows=2197657144 width=1694)
                  Conds:RS_593._col2, _col1, _col3=RS_596._col1, _col0, _col2(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col19","_col20","_col21","_col22"]
                <-Reducer 14 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_596]
                    PartitionCols:_col1, _col0, _col2
                    Select Operator [SEL_595] (rows=1434227 width=525)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                      Group By Operator [GBY_594] (rows=1434227 width=1362)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 13 [SIMPLE_EDGE]
                        SHUFFLE [RS_191]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_190] (rows=1434227 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col26)","sum(_col27)","sum(_col28)"],keys:_col37, _col29, _col38, _col40, _col41, _col42, _col43, _col7, _col8, _col9, _col10, _col13, _col15, _col30
                            Merge Join Operator [MERGEJOIN_524] (rows=2364621 width=1153)
                              Conds:RS_186._col19, _col25=RS_590._col0, _col1(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col26","_col27","_col28","_col29","_col30","_col37","_col38","_col40","_col41","_col42","_col43"]
                            <-Map 29 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_590]
                                PartitionCols:_col0, _col1
                                Select Operator [SEL_588] (rows=57591150 width=8)
                                  Output:["_col0","_col1"]
                                  TableScan [TS_56] (rows=57591150 width=8)
                                    default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                            <-Reducer 12 [SIMPLE_EDGE]
                              SHUFFLE [RS_186]
                                PartitionCols:_col19, _col25
                                Merge Join Operator [MERGEJOIN_523] (rows=1434227 width=1030)
                                  Conds:RS_183._col23=RS_559._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col25","_col26","_col27","_col28","_col29","_col30","_col37","_col38","_col40","_col41","_col42","_col43"]
                                <-Map 28 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_559]
                                    PartitionCols:_col0
                                    Select Operator [SEL_556] (rows=40000000 width=365)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      TableScan [TS_54] (rows=40000000 width=365)
                                        default@customer_address,ad1,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_street_number","ca_street_name","ca_city","ca_zip"]
                                <-Reducer 11 [SIMPLE_EDGE]
                                  SHUFFLE [RS_183]
                                    PartitionCols:_col23
                                    Map Join Operator [MAPJOIN_522] (rows=1434227 width=669)
                                      Conds:MAPJOIN_521._col24=RS_587._col0(Inner),HybridGraceHashJoin:true,Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col23","_col25","_col26","_col27","_col28","_col29","_col30","_col37","_col38"]
                                    <-Map 27 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_587]
                                        PartitionCols:_col0
                                        Select Operator [SEL_585] (rows=1704 width=181)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_584] (rows=1704 width=181)
                                            predicate:(s_store_name is not null and s_zip is not null)
                                            TableScan [TS_51] (rows=1704 width=181)
                                              default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_zip"]
                                    <-Map Join Operator [MAPJOIN_521] (rows=1434227 width=492)
                                        Conds:MAPJOIN_520._col22=RS_555._col0(Inner),HybridGraceHashJoin:true,Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                      <-Map 26 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_555]
                                          PartitionCols:_col0
                                          Select Operator [SEL_552] (rows=7200 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_551] (rows=7200 width=8)
                                              predicate:hd_income_band_sk is not null
                                              TableScan [TS_48] (rows=7200 width=8)
                                                default@household_demographics,hd1,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_income_band_sk"]
                                      <-Map Join Operator [MAPJOIN_520] (rows=1434227 width=492)
                                          Conds:FIL_173._col19=RS_583._col0(Inner),HybridGraceHashJoin:true,Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                        <-Reducer 24 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_583]
                                            PartitionCols:_col0
                                            Select Operator [SEL_581] (rows=13257 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_580] (rows=13257 width=228)
                                                predicate:(_col1 > (2 * _col2))
                                                Group By Operator [GBY_579] (rows=39773 width=228)
                                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                                                <-Reducer 23 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_44]
                                                    PartitionCols:_col0
                                                    Group By Operator [GBY_43] (rows=6482999 width=228)
                                                      Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col5)"],keys:_col0
                                                      Merge Join Operator [MERGEJOIN_504] (rows=183085709 width=227)
                                                        Conds:RS_576._col0, _col1=RS_578._col0, _col1(Inner),Output:["_col0","_col2","_col5"]
                                                      <-Map 22 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_576]
                                                          PartitionCols:_col0, _col1
                                                          Select Operator [SEL_575] (rows=287989836 width=119)
                                                            Output:["_col0","_col1","_col2"]
                                                            TableScan [TS_35] (rows=287989836 width=119)
                                                              default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_item_sk","cs_order_number","cs_ext_list_price"]
                                                      <-Map 25 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_578]
                                                          PartitionCols:_col0, _col1
                                                          Select Operator [SEL_577] (rows=28798881 width=120)
                                                            Output:["_col0","_col1","_col2"]
                                                            TableScan [TS_37] (rows=28798881 width=337)
                                                              default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_refunded_cash","cr_reversed_charge","cr_store_credit"]
                                        <-Filter Operator [FIL_173] (rows=1434227 width=662)
                                            predicate:(_col17 <> _col33)
                                            Merge Join Operator [MERGEJOIN_518] (rows=1434227 width=662)
                                              Conds:RS_170._col1=RS_574._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col17","_col19","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col33"]
                                            <-Map 21 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_574]
                                                PartitionCols:_col0
                                                Select Operator [SEL_570] (rows=1861800 width=89)
                                                  Output:["_col0","_col1"]
                                                  TableScan [TS_21] (rows=1861800 width=89)
                                                    default@customer_demographics,cd1,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                            <-Reducer 10 [SIMPLE_EDGE]
                                              SHUFFLE [RS_170]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_517] (rows=1414229 width=573)
                                                  Conds:RS_167._col0=RS_168._col4(Inner),Output:["_col1","_col7","_col8","_col9","_col10","_col13","_col15","_col17","_col19","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_167]
                                                    PartitionCols:_col0
                                                    Map Join Operator [MAPJOIN_498] (rows=69376329 width=376)
                                                      Conds:MAPJOIN_497._col4=RS_543._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col7","_col8","_col9","_col10","_col13","_col15"]
                                                    <-Map 15 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_543]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_541] (rows=73049 width=8)
                                                          Output:["_col0","_col1"]
                                                          TableScan [TS_10] (rows=73049 width=8)
                                                            default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                    <-Map Join Operator [MAPJOIN_497] (rows=69376329 width=376)
                                                        Conds:MAPJOIN_496._col5=RS_549._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col4","_col7","_col8","_col9","_col10","_col13"]
                                                      <-Map 20 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_549]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_547] (rows=73049 width=8)
                                                            Output:["_col0","_col1"]
                                                            TableScan [TS_18] (rows=73049 width=8)
                                                              default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                      <-Map Join Operator [MAPJOIN_496] (rows=69376329 width=376)
                                                          Conds:MERGEJOIN_495._col2=RS_554._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col4","_col5","_col7","_col8","_col9","_col10"]
                                                        <-Map 26 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_554]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_552]
                                                        <-Merge Join Operator [MERGEJOIN_495] (rows=69376329 width=380)
                                                            Conds:RS_540._col3=RS_558._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5","_col7","_col8","_col9","_col10"]
                                                          <-Map 28 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_558]
                                                              PartitionCols:_col0
                                                               Please refer to the previous Select Operator [SEL_556]
                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_540]
                                                              PartitionCols:_col3
                                                              Select Operator [SEL_539] (rows=69376329 width=23)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                Filter Operator [FIL_538] (rows=69376329 width=23)
                                                                  predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_current_hdemo_sk is not null and c_first_sales_date_sk is not null and c_first_shipto_date_sk is not null)
                                                                  TableScan [TS_0] (rows=80000000 width=23)
                                                                    default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk","c_first_shipto_date_sk","c_first_sales_date_sk"]
                                                <-Reducer 18 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_168]
                                                    PartitionCols:_col4
                                                    Select Operator [SEL_129] (rows=1630791 width=208)
                                                      Output:["_col1","_col3","_col4","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
                                                      Merge Join Operator [MERGEJOIN_516] (rows=1630791 width=208)
                                                        Conds:RS_569._col3=RS_573._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_573]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_570]
                                                      <-Map 16 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_569]
                                                          PartitionCols:_col3
                                                          Map Join Operator [MAPJOIN_567] (rows=1608052 width=119)
                                                            Conds:MAPJOIN_565._col0=RS_545._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                          <-Map 15 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_545]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_544] (rows=652 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_542] (rows=652 width=8)
                                                                  predicate:(d_year = 2001)
                                                                   Please refer to the previous TableScan [TS_10]
                                                          <-Map Join Operator [MAPJOIN_565] (rows=4503592 width=119)
                                                              Conds:SEL_564._col1=RS_562._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                            <-Map 19 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_562]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_561] (rows=518 width=111)
                                                                  Output:["_col0","_col1"]
                                                                  Filter Operator [FIL_560] (rows=518 width=312)
                                                                    predicate:((i_color) IN ('maroon', 'burnished', 'dim', 'steel', 'navajo', 'chocolate') and i_current_price BETWEEN 35 AND 45 and i_current_price BETWEEN 36 AND 50)
                                                                    TableScan [TS_15] (rows=462000 width=311)
                                                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_color","i_product_name"]
                                                            <-Select Operator [SEL_564] (rows=417313408 width=351)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                                                Filter Operator [FIL_563] (rows=417313408 width=355)
                                                                  predicate:(ss_addr_sk is not null and ss_cdemo_sk is not null and ss_customer_sk is not null and ss_hdemo_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                                  TableScan [TS_12] (rows=575995635 width=355)
                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_cdemo_sk","ss_hdemo_sk","ss_addr_sk","ss_store_sk","ss_promo_sk","ss_ticket_number","ss_wholesale_cost","ss_list_price","ss_coupon_amt"]
                <-Reducer 7 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_593]
                    PartitionCols:_col2, _col1, _col3
                    Select Operator [SEL_592] (rows=1434227 width=1354)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                      Group By Operator [GBY_591] (rows=1434227 width=1362)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9, KEY._col10, KEY._col11, KEY._col12, KEY._col13
                      <-Reducer 6 [SIMPLE_EDGE]
                        SHUFFLE [RS_94]
                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                          Group By Operator [GBY_93] (rows=1434227 width=1362)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14","_col15","_col16","_col17"],aggregations:["count()","sum(_col26)","sum(_col27)","sum(_col28)"],keys:_col37, _col29, _col38, _col40, _col41, _col42, _col43, _col7, _col8, _col9, _col10, _col13, _col15, _col30
                            Merge Join Operator [MERGEJOIN_509] (rows=2364621 width=1153)
                              Conds:RS_89._col19, _col25=RS_589._col0, _col1(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col26","_col27","_col28","_col29","_col30","_col37","_col38","_col40","_col41","_col42","_col43"]
                            <-Map 29 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_589]
                                PartitionCols:_col0, _col1
                                 Please refer to the previous Select Operator [SEL_588]
                            <-Reducer 5 [SIMPLE_EDGE]
                              SHUFFLE [RS_89]
                                PartitionCols:_col19, _col25
                                Merge Join Operator [MERGEJOIN_508] (rows=1434227 width=1030)
                                  Conds:RS_86._col23=RS_557._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col25","_col26","_col27","_col28","_col29","_col30","_col37","_col38","_col40","_col41","_col42","_col43"]
                                <-Map 28 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_557]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_556]
                                <-Reducer 4 [SIMPLE_EDGE]
                                  SHUFFLE [RS_86]
                                    PartitionCols:_col23
                                    Map Join Operator [MAPJOIN_507] (rows=1434227 width=669)
                                      Conds:MAPJOIN_506._col24=RS_586._col0(Inner),HybridGraceHashJoin:true,Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col23","_col25","_col26","_col27","_col28","_col29","_col30","_col37","_col38"]
                                    <-Map 27 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_586]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_585]
                                    <-Map Join Operator [MAPJOIN_506] (rows=1434227 width=492)
                                        Conds:MAPJOIN_505._col22=RS_553._col0(Inner),HybridGraceHashJoin:true,Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                      <-Map 26 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_553]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_552]
                                      <-Map Join Operator [MAPJOIN_505] (rows=1434227 width=492)
                                          Conds:FIL_76._col19=RS_582._col0(Inner),HybridGraceHashJoin:true,Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col19","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                        <-Reducer 24 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_582]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_581]
                                        <-Filter Operator [FIL_76] (rows=1434227 width=662)
                                            predicate:(_col17 <> _col33)
                                            Merge Join Operator [MERGEJOIN_503] (rows=1434227 width=662)
                                              Conds:RS_73._col1=RS_572._col0(Inner),Output:["_col7","_col8","_col9","_col10","_col13","_col15","_col17","_col19","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30","_col33"]
                                            <-Map 21 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_572]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_570]
                                            <-Reducer 3 [SIMPLE_EDGE]
                                              SHUFFLE [RS_73]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_502] (rows=1414229 width=573)
                                                  Conds:RS_70._col0=RS_71._col4(Inner),Output:["_col1","_col7","_col8","_col9","_col10","_col13","_col15","_col17","_col19","_col22","_col23","_col24","_col25","_col26","_col27","_col28","_col29","_col30"]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_70]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Map Join Operator [MAPJOIN_498]
                                                <-Reducer 17 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_71]
                                                    PartitionCols:_col4
                                                    Select Operator [SEL_32] (rows=1630791 width=208)
                                                      Output:["_col1","_col3","_col4","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13","_col14"]
                                                      Merge Join Operator [MERGEJOIN_501] (rows=1630791 width=208)
                                                        Conds:RS_568._col3=RS_571._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col15"]
                                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_571]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_570]
                                                      <-Map 16 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_568]
                                                          PartitionCols:_col3
                                                          Map Join Operator [MAPJOIN_566] (rows=1608052 width=119)
                                                            Conds:MAPJOIN_565._col0=RS_550._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12"]
                                                          <-Map 20 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_550]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_548] (rows=652 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_546] (rows=652 width=8)
                                                                  predicate:(d_year = 2000)
                                                                   Please refer to the previous TableScan [TS_18]
                                                             Please refer to the previous Map Join Operator [MAPJOIN_565]

