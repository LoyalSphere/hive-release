Warning: Map Join MAPJOIN[294][bigTable=?] in task 'Reducer 9' is a cross product
Warning: Map Join MAPJOIN[292][bigTable=?] in task 'Reducer 9' is a cross product
Warning: Map Join MAPJOIN[301][bigTable=?] in task 'Reducer 13' is a cross product
Warning: Map Join MAPJOIN[299][bigTable=?] in task 'Reducer 13' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@mv_store_sales_item_customer
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@mv_store_sales_item_customer
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 17 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE), Union 2 (CONTAINS)
Map 18 <- Map 21 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE)
Map 22 <- Map 25 (BROADCAST_EDGE), Reducer 13 (BROADCAST_EDGE), Reducer 20 (BROADCAST_EDGE), Union 2 (CONTAINS)
Map 7 <- Map 16 (BROADCAST_EDGE), Map 23 (BROADCAST_EDGE), Map 24 (BROADCAST_EDGE), Map 4 (BROADCAST_EDGE)
Reducer 10 <- Map 7 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 7 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 15 (BROADCAST_EDGE), Reducer 6 (BROADCAST_EDGE)
Reducer 14 <- Map 7 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 18 (SIMPLE_EDGE)
Reducer 20 <- Map 18 (SIMPLE_EDGE)
Reducer 3 <- Union 2 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Map 4 (SIMPLE_EDGE)
Reducer 6 <- Map 4 (SIMPLE_EDGE)
Reducer 8 <- Map 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 11 (BROADCAST_EDGE), Reducer 5 (BROADCAST_EDGE), Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 3 vectorized
      File Output Operator [FS_431]
        Limit [LIM_430] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_429] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Union 2 [CUSTOM_SIMPLE_EDGE]
            <-Map 1 [CONTAINS] vectorized
              Reduce Output Operator [RS_428]
                Group By Operator [GBY_427] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_426] (rows=379491856 width=127)
                    Output:["_col0"]
                    Map Join Operator [MAPJOIN_425] (rows=379491856 width=127)
                      Conds:MAPJOIN_424._col2=RS_420._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col4"]
                    <-Reducer 19 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_420]
                        PartitionCols:_col0
                        Select Operator [SEL_419] (rows=1 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_418] (rows=1 width=12)
                            predicate:(COALESCE(_col1,0) > 4)
                            Group By Operator [GBY_417] (rows=1 width=12)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Map 18 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_415]
                                PartitionCols:_col0
                                Group By Operator [GBY_414] (rows=1 width=12)
                                  Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                  Map Join Operator [MAPJOIN_413] (rows=1 width=12)
                                    Conds:MAPJOIN_412._col3=RS_373._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                  <-Map 7 [BROADCAST_EDGE] vectorized
                                    SHUFFLE [RS_373]
                                      PartitionCols:_col0
                                      Select Operator [SEL_370] (rows=2609 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_369] (rows=2609 width=8)
                                          predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                          TableScan [TS_11] (rows=73049 width=8)
                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                          <-Map 4 [BROADCAST_EDGE] vectorized
                                            SHUFFLE [RS_356]
                                              PartitionCols:_col1
                                              Select Operator [SEL_353] (rows=1 width=120)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_350] (rows=1 width=120)
                                                  predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                  TableScan [TS_3] (rows=1 width=116)
                                                    default@mv_store_sales_item_customer,default.mv_store_sales_item_customer,Tbl:COMPLETE,Col:NONE,Output:["ss_customer_sk","ssales"]
                                          <-Map 16 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_362]
                                              PartitionCols:_col1
                                              Select Operator [SEL_361] (rows=1 width=8)
                                                Output:["_col1","_col2"]
                                                Filter Operator [FIL_360] (rows=1 width=8)
                                                  predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                  TableScan [TS_33] (rows=1 width=8)
                                                    default@mv_store_sales_item_customer,default.mv_store_sales_item_customer,Tbl:COMPLETE,Col:PARTIAL,Output:["ss_customer_sk"]
                                          <-Map 23 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_365]
                                              PartitionCols:_col1
                                              Select Operator [SEL_364] (rows=1 width=120)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_363] (rows=1 width=120)
                                                  predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                  TableScan [TS_112] (rows=1 width=120)
                                                    default@mv_store_sales_item_customer,default.mv_store_sales_item_customer,Tbl:COMPLETE,Col:PARTIAL,Output:["ss_customer_sk","ssales"]
                                          <-Map 24 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_368]
                                              PartitionCols:_col1
                                              Select Operator [SEL_367] (rows=1 width=8)
                                                Output:["_col1","_col2"]
                                                Filter Operator [FIL_366] (rows=1 width=8)
                                                  predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                  TableScan [TS_131] (rows=1 width=8)
                                                    default@mv_store_sales_item_customer,default.mv_store_sales_item_customer,Tbl:COMPLETE,Col:PARTIAL,Output:["ss_customer_sk"]
                                  <-Map Join Operator [MAPJOIN_412] (rows=1 width=16)
                                      Conds:SEL_411._col0=RS_410._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                    <-Map 21 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_410]
                                        PartitionCols:_col0
                                        Select Operator [SEL_409] (rows=1 width=16)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_408] (rows=1 width=16)
                                            predicate:ss_sold_date_sk is not null
                                            TableScan [TS_70] (rows=1 width=16)
                                              default@mv_store_sales_item_customer,default.mv_store_sales_item_customer,Tbl:COMPLETE,Col:PARTIAL,Output:["ss_item_sk","cnt"]
                                    <-Select Operator [SEL_411] (rows=462000 width=4)
                                        Output:["_col0"]
                                        TableScan [TS_68] (rows=462000 width=4)
                                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk"]
                    <-Map Join Operator [MAPJOIN_424] (rows=344992589 width=127)
                        Conds:MAPJOIN_423._col0=RS_407._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4"]
                      <-Map 17 [BROADCAST_EDGE] vectorized
                        BROADCAST [RS_407]
                          PartitionCols:_col0
                          Select Operator [SEL_406] (rows=50 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_405] (rows=50 width=12)
                              predicate:((d_moy = 1) and (d_year = 1999))
                              TableScan [TS_65] (rows=73049 width=12)
                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                      <-Map Join Operator [MAPJOIN_423] (rows=313629620 width=127)
                          Conds:SEL_422._col1=RS_404._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4"]
                        <-Reducer 9 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_404]
                            PartitionCols:_col0
                            Map Join Operator [MAPJOIN_403] (rows=1 width=238)
                              Conds:(Inner),Output:["_col0"]
                            <-Reducer 11 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_398]
                                Select Operator [SEL_397] (rows=1 width=8)
                                  Filter Operator [FIL_396] (rows=1 width=8)
                                    predicate:(sq_count_check(_col0) <= 1)
                                    Group By Operator [GBY_395] (rows=1 width=8)
                                      Output:["_col0"],aggregations:["count()"]
                                      Select Operator [SEL_394] (rows=1 width=8)
                                        Group By Operator [GBY_393] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                        <-Reducer 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_392]
                                            Group By Operator [GBY_391] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(_col0)"]
                                              Group By Operator [GBY_390] (rows=1 width=4)
                                                Output:["_col0"],keys:KEY._col0
                            <-Filter Operator [FIL_402] (rows=1 width=229)
                                predicate:(_col1 > _col2)
                                Map Join Operator [MAPJOIN_401] (rows=1 width=229)
                                  Conds:(Inner),Output:["_col0","_col1","_col2"]
                                <-Reducer 5 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_389]
                                    Group By Operator [GBY_388] (rows=1 width=116)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                    <-Map 4 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_358]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_355] (rows=1 width=116)
                                          Output:["_col0","_col1"],aggregations:["sum(_col0)"],keys:_col1
                                          Select Operator [SEL_352] (rows=1 width=116)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_349] (rows=1 width=116)
                                              predicate:ss_customer_sk is not null
                                               Please refer to the previous TableScan [TS_3]
                                <-Select Operator [SEL_400] (rows=1 width=112)
                                    Output:["_col0"]
                                    Group By Operator [GBY_399] (rows=1 width=112)
                                      Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                    <-Reducer 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_387]
                                        Group By Operator [GBY_386] (rows=1 width=112)
                                          Output:["_col0"],aggregations:["max(_col1)"]
                                          Select Operator [SEL_385] (rows=1 width=116)
                                            Output:["_col1"]
                                            Group By Operator [GBY_384] (rows=1 width=116)
                                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Select Operator [SEL_422] (rows=285117831 width=127)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Filter Operator [FIL_421] (rows=285117831 width=127)
                              predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                              TableScan [TS_323] (rows=287989836 width=127)
                                Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
            <-Map 22 [CONTAINS] vectorized
              Reduce Output Operator [RS_467]
                Group By Operator [GBY_466] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_465] (rows=191572162 width=127)
                    Output:["_col0"]
                    Map Join Operator [MAPJOIN_464] (rows=191572162 width=127)
                      Conds:MAPJOIN_463._col1=RS_456._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col4"]
                    <-Reducer 20 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_456]
                        PartitionCols:_col0
                        Select Operator [SEL_455] (rows=1 width=4)
                          Output:["_col0"]
                          Filter Operator [FIL_454] (rows=1 width=12)
                            predicate:(COALESCE(_col1,0) > 4)
                            Group By Operator [GBY_453] (rows=1 width=12)
                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                            <-Map 18 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_416]
                                PartitionCols:_col0
                                 Please refer to the previous Group By Operator [GBY_414]
                    <-Map Join Operator [MAPJOIN_463] (rows=174156508 width=127)
                        Conds:MAPJOIN_462._col0=RS_459._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3","_col4"]
                      <-Map 25 [BROADCAST_EDGE] vectorized
                        BROADCAST [RS_459]
                          PartitionCols:_col0
                          Select Operator [SEL_458] (rows=50 width=4)
                            Output:["_col0"]
                            Filter Operator [FIL_457] (rows=50 width=12)
                              predicate:((d_moy = 1) and (d_year = 1999))
                              TableScan [TS_163] (rows=73049 width=12)
                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                      <-Map Join Operator [MAPJOIN_462] (rows=158324095 width=127)
                          Conds:SEL_461._col2=RS_452._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col3","_col4"]
                        <-Reducer 13 [BROADCAST_EDGE] vectorized
                          BROADCAST [RS_452]
                            PartitionCols:_col0
                            Map Join Operator [MAPJOIN_451] (rows=1 width=238)
                              Conds:(Inner),Output:["_col0"]
                            <-Reducer 15 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_446]
                                Select Operator [SEL_445] (rows=1 width=8)
                                  Filter Operator [FIL_444] (rows=1 width=8)
                                    predicate:(sq_count_check(_col0) <= 1)
                                    Group By Operator [GBY_443] (rows=1 width=8)
                                      Output:["_col0"],aggregations:["count()"]
                                      Select Operator [SEL_442] (rows=1 width=8)
                                        Group By Operator [GBY_441] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                        <-Reducer 14 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_440]
                                            Group By Operator [GBY_439] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count(_col0)"]
                                              Group By Operator [GBY_438] (rows=1 width=4)
                                                Output:["_col0"],keys:KEY._col0
                            <-Filter Operator [FIL_450] (rows=1 width=229)
                                predicate:(_col1 > _col2)
                                Map Join Operator [MAPJOIN_449] (rows=1 width=229)
                                  Conds:(Inner),Output:["_col0","_col1","_col2"]
                                <-Reducer 6 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_437]
                                    Group By Operator [GBY_436] (rows=1 width=116)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                    <-Map 4 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_359]
                                        PartitionCols:_col0
                                        Group By Operator [GBY_357] (rows=1 width=116)
                                          Output:["_col0","_col1"],aggregations:["sum(_col0)"],keys:_col1
                                          Select Operator [SEL_354] (rows=1 width=116)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_351] (rows=1 width=116)
                                              predicate:ss_customer_sk is not null
                                               Please refer to the previous TableScan [TS_3]
                                <-Select Operator [SEL_448] (rows=1 width=112)
                                    Output:["_col0"]
                                    Group By Operator [GBY_447] (rows=1 width=112)
                                      Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                    <-Reducer 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_435]
                                        Group By Operator [GBY_434] (rows=1 width=112)
                                          Output:["_col0"],aggregations:["max(_col1)"]
                                          Select Operator [SEL_433] (rows=1 width=116)
                                            Output:["_col1"]
                                            Group By Operator [GBY_432] (rows=1 width=116)
                                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Select Operator [SEL_461] (rows=143930993 width=127)
                            Output:["_col0","_col1","_col2","_col3","_col4"]
                            Filter Operator [FIL_460] (rows=143930993 width=127)
                              predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                              TableScan [TS_336] (rows=144002668 width=127)
                                Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]

