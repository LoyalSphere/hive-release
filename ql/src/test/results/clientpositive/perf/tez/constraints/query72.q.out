PREHOOK: query: explain
select  i_item_desc
      ,w_warehouse_name
      ,d1.d_week_seq
      ,count(case when p_promo_sk is null then 1 else 0 end) no_promo
      ,count(case when p_promo_sk is not null then 1 else 0 end) promo
      ,count(*) total_cnt
from catalog_sales
join inventory on (cs_item_sk = inv_item_sk)
join warehouse on (w_warehouse_sk=inv_warehouse_sk)
join item on (i_item_sk = cs_item_sk)
join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
join date_dim d2 on (inv_date_sk = d2.d_date_sk)
join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
left outer join promotion on (cs_promo_sk=p_promo_sk)
left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
where d1.d_week_seq = d2.d_week_seq
  and inv_quantity_on_hand < cs_quantity 
  and d3.d_date > d1.d_date + 5
  and hd_buy_potential = '1001-5000'
  and d1.d_year = 2001
  and hd_buy_potential = '1001-5000'
  and cd_marital_status = 'M'
  and d1.d_year = 2001
group by i_item_desc,w_warehouse_name,d1.d_week_seq
order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  i_item_desc
      ,w_warehouse_name
      ,d1.d_week_seq
      ,count(case when p_promo_sk is null then 1 else 0 end) no_promo
      ,count(case when p_promo_sk is not null then 1 else 0 end) promo
      ,count(*) total_cnt
from catalog_sales
join inventory on (cs_item_sk = inv_item_sk)
join warehouse on (w_warehouse_sk=inv_warehouse_sk)
join item on (i_item_sk = cs_item_sk)
join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
join date_dim d2 on (inv_date_sk = d2.d_date_sk)
join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
left outer join promotion on (cs_promo_sk=p_promo_sk)
left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
where d1.d_week_seq = d2.d_week_seq
  and inv_quantity_on_hand < cs_quantity 
  and d3.d_date > d1.d_date + 5
  and hd_buy_potential = '1001-5000'
  and d1.d_year = 2001
  and hd_buy_potential = '1001-5000'
  and cd_marital_status = 'M'
  and d1.d_year = 2001
group by i_item_desc,w_warehouse_name,d1.d_week_seq
order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 12 <- Map 18 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 19 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 20 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 21 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Map 22 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 6 <- Map 5 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 7 <- Reducer 16 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 23 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_167]
        Limit [LIM_166] (rows=100 width=312)
          Number of rows:100
          Select Operator [SEL_165] (rows=71169210 width=312)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 3 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_164]
              Group By Operator [GBY_163] (rows=71169210 width=312)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["count(VALUE._col0)","count(VALUE._col1)","count(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
              <-Reducer 2 [SIMPLE_EDGE]
                SHUFFLE [RS_64]
                  PartitionCols:_col0, _col1, _col2
                  Group By Operator [GBY_63] (rows=1574305390 width=312)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["count(_col3)","count(_col4)","count()"],keys:_col0, _col1, _col2
                    Select Operator [SEL_61] (rows=1574305390 width=292)
                      Output:["_col0","_col1","_col2","_col3","_col4"]
                      Merge Join Operator [MERGEJOIN_135] (rows=1574305390 width=292)
                        Conds:RS_137._col0, _col1=RS_59._col4, _col6(Right Outer),Output:["_col15","_col17","_col21","_col27"]
                      <-Map 1 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_137]
                          PartitionCols:_col0, _col1
                          Select Operator [SEL_136] (rows=28798881 width=8)
                            Output:["_col0","_col1"]
                            TableScan [TS_0] (rows=28798881 width=8)
                              default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number"]
                      <-Reducer 8 [SIMPLE_EDGE]
                        SHUFFLE [RS_59]
                          PartitionCols:_col4, _col6
                          Select Operator [SEL_57] (rows=610435044 width=300)
                            Output:["_col4","_col6","_col13","_col15","_col19","_col25"]
                            Merge Join Operator [MERGEJOIN_134] (rows=610435044 width=300)
                              Conds:RS_54._col0, _col19=RS_162._col0, _col1(Inner),Output:["_col5","_col7","_col14","_col16","_col19","_col23"]
                            <-Map 23 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_162]
                                PartitionCols:_col0, _col1
                                Select Operator [SEL_161] (rows=73049 width=8)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_160] (rows=73049 width=8)
                                    predicate:d_week_seq is not null
                                    TableScan [TS_44] (rows=73049 width=8)
                                      default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_week_seq"]
                            <-Reducer 7 [SIMPLE_EDGE]
                              SHUFFLE [RS_54]
                                PartitionCols:_col0, _col19
                                Filter Operator [FIL_53] (rows=545947820 width=311)
                                  predicate:(_col3 < _col17)
                                  Merge Join Operator [MERGEJOIN_133] (rows=1637843460 width=311)
                                    Conds:RS_50._col1=RS_51._col8(Inner),Output:["_col0","_col3","_col5","_col7","_col14","_col16","_col17","_col19","_col23"]
                                  <-Reducer 16 [SIMPLE_EDGE]
                                    SHUFFLE [RS_51]
                                      PartitionCols:_col8
                                      Select Operator [SEL_43] (rows=2726340 width=203)
                                        Output:["_col1","_col8","_col10","_col11","_col13","_col17"]
                                        Merge Join Operator [MERGEJOIN_132] (rows=2726340 width=203)
                                          Conds:RS_40._col4=RS_159._col0(Inner),Output:["_col4","_col6","_col7","_col9","_col15","_col17"]
                                        <-Map 22 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_159]
                                            PartitionCols:_col0
                                            Select Operator [SEL_158] (rows=462000 width=188)
                                              Output:["_col0","_col1"]
                                              TableScan [TS_22] (rows=462000 width=188)
                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_desc"]
                                        <-Reducer 15 [SIMPLE_EDGE]
                                          SHUFFLE [RS_40]
                                            PartitionCols:_col4
                                            Merge Join Operator [MERGEJOIN_131] (rows=2726340 width=19)
                                              Conds:RS_37._col5=RS_157._col0(Left Outer),Output:["_col4","_col6","_col7","_col9","_col15"]
                                            <-Map 21 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_157]
                                                PartitionCols:_col0
                                                Select Operator [SEL_156] (rows=2300 width=4)
                                                  Output:["_col0"]
                                                  TableScan [TS_20] (rows=2300 width=4)
                                                    default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:["p_promo_sk"]
                                            <-Reducer 14 [SIMPLE_EDGE]
                                              SHUFFLE [RS_37]
                                                PartitionCols:_col5
                                                Filter Operator [FIL_36] (rows=2726340 width=34)
                                                  predicate:(_col14 > _col10)
                                                  Merge Join Operator [MERGEJOIN_130] (rows=8179022 width=34)
                                                    Conds:RS_33._col1=RS_155._col0(Inner),Output:["_col4","_col5","_col6","_col7","_col9","_col10","_col14"]
                                                  <-Map 20 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_155]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_154] (rows=73049 width=12)
                                                        Output:["_col0","_col1"]
                                                        TableScan [TS_18] (rows=73049 width=98)
                                                          default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                                  <-Reducer 13 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_33]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_129] (rows=8179022 width=29)
                                                        Conds:RS_30._col3=RS_153._col0(Inner),Output:["_col1","_col4","_col5","_col6","_col7","_col9","_col10"]
                                                      <-Map 19 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_153]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_152] (rows=1440 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_151] (rows=1440 width=96)
                                                              predicate:(hd_buy_potential = '1001-5000')
                                                              TableScan [TS_15] (rows=7200 width=96)
                                                                default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_buy_potential"]
                                                      <-Reducer 12 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_30]
                                                          PartitionCols:_col3
                                                          Merge Join Operator [MERGEJOIN_128] (rows=40895108 width=35)
                                                            Conds:RS_27._col2=RS_150._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col9","_col10"]
                                                          <-Map 18 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_150]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_149] (rows=265971 width=4)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_148] (rows=265971 width=89)
                                                                  predicate:(cd_marital_status = 'M')
                                                                  TableScan [TS_12] (rows=1861800 width=89)
                                                                    default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["cd_demo_sk","cd_marital_status"]
                                                          <-Reducer 11 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_27]
                                                              PartitionCols:_col2
                                                              Merge Join Operator [MERGEJOIN_127] (rows=100076475 width=39)
                                                                Conds:RS_144._col0=RS_147._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col9","_col10"]
                                                              <-Map 10 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_144]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_143] (rows=282274763 width=31)
                                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                                    Filter Operator [FIL_142] (rows=282274763 width=31)
                                                                      predicate:(cs_bill_cdemo_sk is not null and cs_bill_hdemo_sk is not null and cs_ship_date_sk is not null and cs_sold_date_sk is not null)
                                                                      TableScan [TS_6] (rows=287989836 width=31)
                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_ship_date_sk","cs_bill_cdemo_sk","cs_bill_hdemo_sk","cs_item_sk","cs_promo_sk","cs_order_number","cs_quantity"]
                                                              <-Map 17 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_147]
                                                                  PartitionCols:_col0
                                                                  Select Operator [SEL_146] (rows=652 width=16)
                                                                    Output:["_col0","_col1","_col2"]
                                                                    Filter Operator [FIL_145] (rows=652 width=106)
                                                                      predicate:((d_year = 2001) and d_week_seq is not null)
                                                                      TableScan [TS_9] (rows=73049 width=106)
                                                                        default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_week_seq","d_year"]
                                  <-Reducer 6 [SIMPLE_EDGE]
                                    SHUFFLE [RS_50]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_126] (rows=37584000 width=111)
                                        Conds:RS_139._col2=RS_141._col0(Inner),Output:["_col0","_col1","_col3","_col5"]
                                      <-Map 5 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_139]
                                          PartitionCols:_col2
                                          Select Operator [SEL_138] (rows=37584000 width=15)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            TableScan [TS_2] (rows=37584000 width=15)
                                              default@inventory,inventory,Tbl:COMPLETE,Col:COMPLETE,Output:["inv_date_sk","inv_item_sk","inv_warehouse_sk","inv_quantity_on_hand"]
                                      <-Map 9 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_141]
                                          PartitionCols:_col0
                                          Select Operator [SEL_140] (rows=27 width=104)
                                            Output:["_col0","_col1"]
                                            TableScan [TS_4] (rows=27 width=104)
                                              default@warehouse,warehouse,Tbl:COMPLETE,Col:COMPLETE,Output:["w_warehouse_sk","w_warehouse_name"]

