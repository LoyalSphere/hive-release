PREHOOK: query: explain
select count(*) 
from ((select distinct c_last_name, c_first_name, d_date
       from store_sales, date_dim, customer
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from catalog_sales, date_dim, customer
       where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
         and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from web_sales, date_dim, customer
       where web_sales.ws_sold_date_sk = date_dim.d_date_sk
         and web_sales.ws_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
) cool_cust
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@mv_store_sales_item_customer
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select count(*) 
from ((select distinct c_last_name, c_first_name, d_date
       from store_sales, date_dim, customer
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from catalog_sales, date_dim, customer
       where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
         and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
       except
      (select distinct c_last_name, c_first_name, d_date
       from web_sales, date_dim, customer
       where web_sales.ws_sold_date_sk = date_dim.d_date_sk
         and web_sales.ws_bill_customer_sk = customer.c_customer_sk
         and d_month_seq between 1212 and 1212+11)
) cool_cust
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@mv_store_sales_item_customer
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 12 (BROADCAST_EDGE), Map 13 (BROADCAST_EDGE)
Map 14 <- Map 13 (BROADCAST_EDGE)
Map 15 <- Map 13 (BROADCAST_EDGE)
Reducer 10 <- Map 1 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Union 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Map 14 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE), Union 3 (CONTAINS)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_204]
        Group By Operator [GBY_203] (rows=1 width=8)
          Output:["_col0"],aggregations:["count(VALUE._col0)"]
        <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
          PARTITION_ONLY_SHUFFLE [RS_202]
            Group By Operator [GBY_201] (rows=1 width=8)
              Output:["_col0"],aggregations:["count()"]
              Select Operator [SEL_200] (rows=5529621 width=16)
                Filter Operator [FIL_199] (rows=5529621 width=16)
                  predicate:(((_col3 * 2) = _col4) and (_col3 > 0L))
                  Select Operator [SEL_198] (rows=33177729 width=16)
                    Output:["_col3","_col4"]
                    Group By Operator [GBY_197] (rows=33177729 width=290)
                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                    <-Union 5 [SIMPLE_EDGE]
                      <-Reducer 11 [CONTAINS] vectorized
                        Reduce Output Operator [RS_226]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_225] (rows=33177729 width=290)
                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                            Select Operator [SEL_224] (rows=33177729 width=290)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Select Operator [SEL_223] (rows=24986582 width=290)
                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                Group By Operator [GBY_222] (rows=24986582 width=282)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                  Select Operator [SEL_221] (rows=24986582 width=274)
                                    Output:["_col0","_col1","_col2"]
                                    Group By Operator [GBY_220] (rows=24986582 width=274)
                                      Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                    <-Reducer 10 [SIMPLE_EDGE]
                                      SHUFFLE [RS_77]
                                        PartitionCols:_col0, _col1, _col2
                                        Group By Operator [GBY_76] (rows=24986582 width=274)
                                          Output:["_col0","_col1","_col2"],keys:_col6, _col5, _col3
                                          Merge Join Operator [MERGEJOIN_128] (rows=24986582 width=274)
                                            Conds:RS_219._col1=RS_178._col0(Inner),Output:["_col3","_col5","_col6"]
                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_178]
                                              PartitionCols:_col0
                                              Select Operator [SEL_175] (rows=80000000 width=184)
                                                Output:["_col0","_col1","_col2"]
                                                TableScan [TS_0] (rows=80000000 width=184)
                                                  default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_first_name","c_last_name"]
                                                <-Map 13 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_172]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_171] (rows=317 width=102)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_170] (rows=317 width=102)
                                                        predicate:d_month_seq BETWEEN 1212 AND 1223
                                                        TableScan [TS_5] (rows=73049 width=102)
                                                          default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date","d_month_seq"]
                                                <-Map 12 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_169]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_168] (rows=1 width=8)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_167] (rows=1 width=8)
                                                        predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                        TableScan [TS_2] (rows=1 width=8)
                                                          default@mv_store_sales_item_customer,default.mv_store_sales_item_customer,Tbl:COMPLETE,Col:PARTIAL,Output:["ss_customer_sk"]
                                          <-Map 15 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_219]
                                              PartitionCols:_col1
                                              Map Join Operator [MAPJOIN_218] (rows=24986582 width=97)
                                                Conds:SEL_217._col0=RS_174._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3"]
                                              <-Map 13 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_174]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_171]
                                              <-Select Operator [SEL_217] (rows=143930993 width=7)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_216] (rows=143930993 width=7)
                                                    predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                    TableScan [TS_61] (rows=144002668 width=7)
                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                      <-Reducer 4 [CONTAINS] vectorized
                        Reduce Output Operator [RS_196]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_195] (rows=33177729 width=290)
                            Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                            Select Operator [SEL_194] (rows=33177729 width=290)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Select Operator [SEL_193] (rows=8191147 width=290)
                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                Group By Operator [GBY_192] (rows=8191147 width=282)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col0, _col1, _col2
                                  Select Operator [SEL_191] (rows=8191147 width=290)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_190] (rows=8191147 width=290)
                                      predicate:(((_col3 * 2) = _col4) and (_col3 > 0L))
                                      Group By Operator [GBY_189] (rows=49146884 width=290)
                                        Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2
                                      <-Union 3 [SIMPLE_EDGE]
                                        <-Reducer 2 [CONTAINS] vectorized
                                          Reduce Output Operator [RS_188]
                                            PartitionCols:_col0, _col1, _col2
                                            Group By Operator [GBY_187] (rows=49146884 width=290)
                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                                              Select Operator [SEL_186] (rows=49146884 width=290)
                                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                                Select Operator [SEL_185] (rows=1 width=290)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Group By Operator [GBY_184] (rows=1 width=282)
                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col2, _col1, _col0
                                                    Select Operator [SEL_183] (rows=1 width=274)
                                                      Output:["_col0","_col1","_col2"]
                                                      Group By Operator [GBY_182] (rows=1 width=274)
                                                        Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_181]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Group By Operator [GBY_180] (rows=1 width=274)
                                                            Output:["_col0","_col1","_col2"],keys:_col2, _col1, _col6
                                                            Map Join Operator [MAPJOIN_179] (rows=1 width=274)
                                                              Conds:MAPJOIN_176._col4=RS_172._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col6"]
                                                            <-Map 13 [BROADCAST_EDGE] vectorized
                                                               Please refer to the previous BROADCAST [RS_172]
                                                            <-Map Join Operator [MAPJOIN_176] (rows=1 width=184)
                                                                Conds:SEL_175._col0=RS_169._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col4"]
                                                              <- Please refer to the previous Map 12 [BROADCAST_EDGE]
                                                                 Please refer to the previous Select Operator [SEL_175]
                                        <-Reducer 9 [CONTAINS] vectorized
                                          Reduce Output Operator [RS_215]
                                            PartitionCols:_col0, _col1, _col2
                                            Group By Operator [GBY_214] (rows=49146884 width=290)
                                              Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col3)","sum(_col4)"],keys:_col0, _col1, _col2
                                              Select Operator [SEL_213] (rows=49146884 width=290)
                                                Output:["_col0","_col1","_col2","_col3","_col4"]
                                                Select Operator [SEL_212] (rows=49146883 width=290)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Group By Operator [GBY_211] (rows=49146883 width=282)
                                                    Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                                    Select Operator [SEL_210] (rows=49146883 width=274)
                                                      Output:["_col0","_col1","_col2"]
                                                      Group By Operator [GBY_209] (rows=49146883 width=274)
                                                        Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                                      <-Reducer 8 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_40]
                                                          PartitionCols:_col0, _col1, _col2
                                                          Group By Operator [GBY_39] (rows=49146883 width=274)
                                                            Output:["_col0","_col1","_col2"],keys:_col6, _col5, _col3
                                                            Merge Join Operator [MERGEJOIN_126] (rows=49146883 width=274)
                                                              Conds:RS_208._col1=RS_177._col0(Inner),Output:["_col3","_col5","_col6"]
                                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_177]
                                                                PartitionCols:_col0
                                                                 Please refer to the previous Select Operator [SEL_175]
                                                            <-Map 14 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_208]
                                                                PartitionCols:_col1
                                                                Map Join Operator [MAPJOIN_207] (rows=49146883 width=97)
                                                                  Conds:SEL_206._col0=RS_173._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3"]
                                                                <-Map 13 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_173]
                                                                    PartitionCols:_col0
                                                                     Please refer to the previous Select Operator [SEL_171]
                                                                <-Select Operator [SEL_206] (rows=285117831 width=7)
                                                                    Output:["_col0","_col1"]
                                                                    Filter Operator [FIL_205] (rows=285117831 width=7)
                                                                      predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                                      TableScan [TS_24] (rows=287989836 width=7)
                                                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk"]

