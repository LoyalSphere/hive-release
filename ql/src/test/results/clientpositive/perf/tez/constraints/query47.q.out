PREHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        s_store_name, s_company_name,
        d_year, d_moy,
        sum(ss_sales_price) sum_sales,
        avg(sum(ss_sales_price)) over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name
           order by d_year, d_moy) rn
 from item, store_sales, date_dim, store
 where ss_item_sk = i_item_sk and
       ss_sold_date_sk = d_date_sk and
       ss_store_sk = s_store_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          s_store_name, s_company_name,
          d_year, d_moy),
 v2 as(
 select v1.i_category
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1.s_store_name = v1_lag.s_store_name and
       v1.s_store_name = v1_lead.s_store_name and
       v1.s_company_name = v1_lag.s_company_name and
       v1.s_company_name = v1_lead.s_company_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and    
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@mv_store_sales_item_customer
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with v1 as(
 select i_category, i_brand,
        s_store_name, s_company_name,
        d_year, d_moy,
        sum(ss_sales_price) sum_sales,
        avg(sum(ss_sales_price)) over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name
           order by d_year, d_moy) rn
 from item, store_sales, date_dim, store
 where ss_item_sk = i_item_sk and
       ss_sold_date_sk = d_date_sk and
       ss_store_sk = s_store_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          s_store_name, s_company_name,
          d_year, d_moy),
 v2 as(
 select v1.i_category
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1.s_store_name = v1_lag.s_store_name and
       v1.s_store_name = v1_lead.s_store_name and
       v1.s_company_name = v1_lag.s_company_name and
       v1.s_company_name = v1_lead.s_company_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and    
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@mv_store_sales_item_customer
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 10 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE), Map 9 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Reducer 6 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 2 (SIMPLE_EDGE)
Reducer 7 <- Reducer 2 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_242]
        Limit [LIM_241] (rows=1 width=658)
          Number of rows:100
          Select Operator [SEL_240] (rows=1 width=658)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_239]
              Select Operator [SEL_238] (rows=1 width=658)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                Map Join Operator [MAPJOIN_237] (rows=1 width=546)
                  Conds:MAPJOIN_236._col0, _col1, _col2, _col3, _col8=RS_229._col0, _col1, _col2, _col3, _col5(Inner),HybridGraceHashJoin:true,Output:["_col0","_col4","_col5","_col6","_col7","_col13","_col19"]
                <-Reducer 7 [BROADCAST_EDGE] vectorized
                  BROADCAST [RS_229]
                    PartitionCols:_col0, _col1, _col2, _col3, _col5
                    Select Operator [SEL_228] (rows=1 width=485)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                      Filter Operator [FIL_227] (rows=1 width=489)
                        predicate:rank_window_0 is not null
                        PTF Operator [PTF_226] (rows=1 width=489)
                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 ASC NULLS FIRST, _col3 ASC NULLS FIRST","partition by:":"_col5, _col4, _col0, _col1"}]
                          Select Operator [SEL_225] (rows=1 width=489)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                          <-Reducer 2 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_215]
                              PartitionCols:_col5, _col4, _col0, _col1
                              Group By Operator [GBY_212] (rows=1 width=489)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_211]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                  Group By Operator [GBY_210] (rows=1 width=489)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col5)"],keys:_col11, _col12, _col8, _col9, _col1, _col2
                                    Map Join Operator [MAPJOIN_209] (rows=1 width=489)
                                      Conds:MAPJOIN_208._col4=RS_204._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col5","_col8","_col9","_col11","_col12"]
                                    <-Map 10 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_204]
                                        PartitionCols:_col0
                                        Select Operator [SEL_203] (rows=1704 width=183)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_202] (rows=1704 width=183)
                                            predicate:(s_company_name is not null and s_store_name is not null)
                                            TableScan [TS_9] (rows=1704 width=183)
                                              default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_company_name"]
                                    <-Map Join Operator [MAPJOIN_208] (rows=1 width=314)
                                        Conds:MAPJOIN_207._col6=RS_201._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col4","_col5","_col8","_col9"]
                                      <-Map 9 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_201]
                                          PartitionCols:_col0
                                          Select Operator [SEL_200] (rows=564 width=12)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_199] (rows=564 width=12)
                                              predicate:(((d_year = 2000) or (struct(d_year,d_moy)) IN (const struct(1999,12), const struct(2001,1))) and (d_year) IN (2000, 1999, 2001))
                                              TableScan [TS_6] (rows=73049 width=12)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                      <-Map Join Operator [MAPJOIN_207] (rows=1 width=310)
                                          Conds:SEL_206._col0=RS_198._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col4","_col5","_col6"]
                                        <-Map 8 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_198]
                                            PartitionCols:_col0
                                            Select Operator [SEL_197] (rows=1 width=124)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_196] (rows=1 width=124)
                                                predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                                TableScan [TS_3] (rows=1 width=124)
                                                  default@mv_store_sales_item_customer,default.mv_store_sales_item_customer,Tbl:COMPLETE,Col:PARTIAL,Output:["ss_item_sk","ss_store_sk","ss_sales_price"]
                                        <-Select Operator [SEL_206] (rows=462000 width=194)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_205] (rows=462000 width=194)
                                              predicate:(i_brand is not null and i_category is not null)
                                              TableScan [TS_0] (rows=462000 width=194)
                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand","i_category"]
                <-Map Join Operator [MAPJOIN_236] (rows=1 width=717)
                    Conds:SEL_235._col0, _col1, _col2, _col3, _col8=RS_224._col0, _col1, _col2, _col3, _col5(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col13"]
                  <-Reducer 6 [BROADCAST_EDGE] vectorized
                    BROADCAST [RS_224]
                      PartitionCols:_col0, _col1, _col2, _col3, _col5
                      Select Operator [SEL_223] (rows=1 width=485)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                        Filter Operator [FIL_222] (rows=1 width=489)
                          predicate:rank_window_0 is not null
                          PTF Operator [PTF_221] (rows=1 width=489)
                            Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 ASC NULLS FIRST, _col3 ASC NULLS FIRST","partition by:":"_col5, _col4, _col0, _col1"}]
                            Select Operator [SEL_220] (rows=1 width=489)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                            <-Reducer 2 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_214]
                                PartitionCols:_col5, _col4, _col0, _col1
                                 Please refer to the previous Group By Operator [GBY_212]
                  <-Select Operator [SEL_235] (rows=1 width=605)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                      Filter Operator [FIL_234] (rows=1 width=605)
                        predicate:((abs((_col7 - _col0)) / _col0) > 0.1)
                        Select Operator [SEL_233] (rows=1 width=601)
                          Output:["rank_window_1","_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                          Filter Operator [FIL_232] (rows=1 width=601)
                            predicate:((_col0 > 0) and (_col3 = 2000) and rank_window_1 is not null)
                            PTF Operator [PTF_231] (rows=1 width=601)
                              Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col3 ASC NULLS FIRST, _col4 ASC NULLS FIRST","partition by:":"_col6, _col5, _col1, _col2"}]
                              Select Operator [SEL_230] (rows=1 width=601)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                              <-Reducer 3 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_219]
                                  PartitionCols:_col5, _col4, _col0, _col1
                                  Select Operator [SEL_218] (rows=1 width=489)
                                    Output:["avg_window_0","_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                    PTF Operator [PTF_217] (rows=1 width=489)
                                      Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col5 ASC NULLS FIRST, _col4 ASC NULLS FIRST, _col0 ASC NULLS FIRST, _col1 ASC NULLS FIRST, _col2 ASC NULLS FIRST","partition by:":"_col5, _col4, _col0, _col1, _col2"}]
                                      Select Operator [SEL_216] (rows=1 width=489)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                      <-Reducer 2 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_213]
                                          PartitionCols:_col5, _col4, _col0, _col1, _col2
                                           Please refer to the previous Group By Operator [GBY_212]

