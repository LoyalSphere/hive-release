PREHOOK: query: explain
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Sports') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS year
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Sports') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS year
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 14 (BROADCAST_EDGE), Map 15 (BROADCAST_EDGE), Map 25 (BROADCAST_EDGE), Map 26 (BROADCAST_EDGE)
Map 17 <- Map 14 (BROADCAST_EDGE), Map 15 (BROADCAST_EDGE), Map 25 (BROADCAST_EDGE), Map 26 (BROADCAST_EDGE)
Map 21 <- Map 14 (BROADCAST_EDGE), Map 15 (BROADCAST_EDGE), Map 25 (BROADCAST_EDGE), Map 26 (BROADCAST_EDGE)
Reducer 11 <- Union 10 (SIMPLE_EDGE), Union 12 (CONTAINS)
Reducer 13 <- Union 12 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 19 <- Map 17 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE), Union 10 (CONTAINS)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 22 <- Map 21 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 23 <- Map 21 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE), Union 12 (CONTAINS)
Reducer 4 <- Union 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 13 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE), Union 10 (CONTAINS)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_370]
        Select Operator [SEL_369] (rows=100 width=160)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          Limit [LIM_368] (rows=100 width=152)
            Number of rows:100
            Select Operator [SEL_367] (rows=38234207120 width=151)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
            <-Reducer 7 [SIMPLE_EDGE]
              SHUFFLE [RS_169]
                Select Operator [SEL_168] (rows=38234207120 width=151)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                  Filter Operator [FIL_167] (rows=38234207120 width=255)
                    predicate:((CAST( _col10 AS decimal(17,2)) / CAST( _col4 AS decimal(17,2))) < 0.9)
                    Merge Join Operator [MERGEJOIN_276] (rows=114702621361 width=255)
                      Conds:RS_363._col0, _col1, _col2, _col3=RS_366._col0, _col1, _col2, _col3(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col10","_col11"]
                    <-Reducer 13 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_366]
                        PartitionCols:_col0, _col1, _col2, _col3
                        Group By Operator [GBY_365] (rows=8520960 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                          Group By Operator [GBY_364] (rows=736356923 width=131)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                          <-Union 12 [SIMPLE_EDGE]
                            <-Reducer 11 [CONTAINS] vectorized
                              Reduce Output Operator [RS_373]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_372] (rows=736356923 width=131)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                  Group By Operator [GBY_371] (rows=621178955 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                                  <-Union 10 [SIMPLE_EDGE]
                                    <-Reducer 19 [CONTAINS]
                                      Reduce Output Operator [RS_316]
                                        PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                        Group By Operator [GBY_315] (rows=621178955 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                          Select Operator [SEL_313] (rows=450703984 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Merge Join Operator [MERGEJOIN_312] (rows=450703984 width=204)
                                              Conds:RS_381._col1, _col2=RS_384._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                            <-Map 17 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_381]
                                                PartitionCols:_col1, _col2
                                                Map Join Operator [MAPJOIN_379] (rows=187186493 width=124)
                                                  Conds:MAPJOIN_377._col1=RS_345._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                <-Map 26 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_345]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_343] (rows=45745 width=19)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_342] (rows=45745 width=109)
                                                        predicate:((i_category = 'Sports') and i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_manufact_id is not null)
                                                        TableScan [TS_88] (rows=462000 width=109)
                                                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id","i_category","i_manufact_id"]
                                                <-Map Join Operator [MAPJOIN_377] (rows=196410188 width=109)
                                                    Conds:SEL_375._col0=RS_340._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                                  <-Map 25 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_340]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_338] (rows=652 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_337] (rows=652 width=8)
                                                          predicate:(d_year = 2002)
                                                          TableScan [TS_85] (rows=73049 width=8)
                                                            default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                  <-Select Operator [SEL_375] (rows=550076554 width=122)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_374] (rows=550076554 width=122)
                                                        predicate:ss_sold_date_sk is not null
                                                        TableScan [TS_21] (rows=575995635 width=122)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_ext_sales_price"]
                                                        <-Map 14 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_330]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_328] (rows=652 width=4)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_327] (rows=652 width=8)
                                                                predicate:(d_year = 2001)
                                                                TableScan [TS_3] (rows=73049 width=8)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                                        <-Map 15 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_335]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_333] (rows=45745 width=19)
                                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                                              Filter Operator [FIL_332] (rows=45745 width=109)
                                                                predicate:((i_category = 'Sports') and i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_manufact_id is not null)
                                                                TableScan [TS_6] (rows=462000 width=109)
                                                                  default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id","i_category","i_manufact_id"]
                                            <-Map 20 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_384]
                                                PartitionCols:_col0, _col1
                                                Select Operator [SEL_382] (rows=57591150 width=119)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  TableScan [TS_30] (rows=57591150 width=119)
                                                    default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number","sr_return_quantity","sr_return_amt"]
                                    <-Reducer 9 [CONTAINS]
                                      Reduce Output Operator [RS_302]
                                        PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                        Group By Operator [GBY_301] (rows=621178955 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                          Select Operator [SEL_299] (rows=170474971 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Merge Join Operator [MERGEJOIN_298] (rows=170474971 width=234)
                                              Conds:RS_354._col1, _col2=RS_357._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_354]
                                                PartitionCols:_col1, _col2
                                                Map Join Operator [MAPJOIN_352] (rows=96821196 width=138)
                                                  Conds:MAPJOIN_350._col1=RS_344._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                <-Map 26 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_344]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_343]
                                                <-Map Join Operator [MAPJOIN_350] (rows=101592102 width=122)
                                                    Conds:SEL_348._col0=RS_339._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                                  <-Map 25 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_339]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_338]
                                                  <-Select Operator [SEL_348] (rows=286549727 width=127)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_347] (rows=286549727 width=127)
                                                        predicate:cs_sold_date_sk is not null
                                                        TableScan [TS_0] (rows=287989836 width=127)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_item_sk","cs_order_number","cs_quantity","cs_ext_sales_price"]
                                                        <-Map 14 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_329]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_328]
                                                        <-Map 15 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_334]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_333]
                                            <-Map 16 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_357]
                                                PartitionCols:_col0, _col1
                                                Select Operator [SEL_355] (rows=28798881 width=121)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  TableScan [TS_9] (rows=28798881 width=121)
                                                    default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_item_sk","cr_order_number","cr_return_quantity","cr_return_amount"]
                            <-Reducer 23 [CONTAINS]
                              Reduce Output Operator [RS_326]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_325] (rows=736356923 width=131)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                  Select Operator [SEL_323] (rows=115177968 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                    Merge Join Operator [MERGEJOIN_322] (rows=115177968 width=220)
                                      Conds:RS_392._col1, _col2=RS_395._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                    <-Map 21 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_392]
                                        PartitionCols:_col1, _col2
                                        Map Join Operator [MAPJOIN_390] (rows=48990732 width=139)
                                          Conds:MAPJOIN_388._col1=RS_346._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                        <-Map 26 [BROADCAST_EDGE] vectorized
                                          BROADCAST [RS_346]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_343]
                                        <-Map Join Operator [MAPJOIN_388] (rows=51404771 width=123)
                                            Conds:SEL_386._col0=RS_341._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                          <-Map 25 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_341]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_338]
                                          <-Select Operator [SEL_386] (rows=143966864 width=127)
                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                              Filter Operator [FIL_385] (rows=143966864 width=127)
                                                predicate:ws_sold_date_sk is not null
                                                TableScan [TS_49] (rows=144002668 width=127)
                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_ext_sales_price"]
                                                <-Map 14 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_331]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_328]
                                                <-Map 15 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_336]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_333]
                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_395]
                                        PartitionCols:_col0, _col1
                                        Select Operator [SEL_393] (rows=14398467 width=118)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          TableScan [TS_58] (rows=14398467 width=118)
                                            default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_item_sk","wr_order_number","wr_return_quantity","wr_return_amt"]
                    <-Reducer 6 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_363]
                        PartitionCols:_col0, _col1, _col2, _col3
                        Group By Operator [GBY_362] (rows=8520960 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                          Group By Operator [GBY_361] (rows=736356923 width=131)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                          <-Union 5 [SIMPLE_EDGE]
                            <-Reducer 22 [CONTAINS]
                              Reduce Output Operator [RS_321]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_320] (rows=736356923 width=131)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                  Select Operator [SEL_318] (rows=115177968 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                    Merge Join Operator [MERGEJOIN_317] (rows=115177968 width=220)
                                      Conds:RS_391._col1, _col2=RS_394._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                    <-Map 21 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_391]
                                        PartitionCols:_col1, _col2
                                        Map Join Operator [MAPJOIN_389] (rows=48990732 width=139)
                                          Conds:MAPJOIN_387._col1=RS_336._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                        <-Map 15 [BROADCAST_EDGE] vectorized
                                           Please refer to the previous BROADCAST [RS_336]
                                        <-Map Join Operator [MAPJOIN_387] (rows=51404771 width=123)
                                            Conds:SEL_386._col0=RS_331._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                          <-Map 14 [BROADCAST_EDGE] vectorized
                                             Please refer to the previous BROADCAST [RS_331]
                                             Please refer to the previous Select Operator [SEL_386]
                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_394]
                                        PartitionCols:_col0, _col1
                                         Please refer to the previous Select Operator [SEL_393]
                            <-Reducer 4 [CONTAINS] vectorized
                              Reduce Output Operator [RS_360]
                                PartitionCols:_col0, _col1, _col2, _col3
                                Group By Operator [GBY_359] (rows=736356923 width=131)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                  Group By Operator [GBY_358] (rows=621178955 width=131)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                                  <-Union 3 [SIMPLE_EDGE]
                                    <-Reducer 18 [CONTAINS]
                                      Reduce Output Operator [RS_311]
                                        PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                        Group By Operator [GBY_310] (rows=621178955 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                          Select Operator [SEL_308] (rows=450703984 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Merge Join Operator [MERGEJOIN_307] (rows=450703984 width=204)
                                              Conds:RS_380._col1, _col2=RS_383._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                            <-Map 17 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_380]
                                                PartitionCols:_col1, _col2
                                                Map Join Operator [MAPJOIN_378] (rows=187186493 width=124)
                                                  Conds:MAPJOIN_376._col1=RS_335._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                <-Map 15 [BROADCAST_EDGE] vectorized
                                                   Please refer to the previous BROADCAST [RS_335]
                                                <-Map Join Operator [MAPJOIN_376] (rows=196410188 width=109)
                                                    Conds:SEL_375._col0=RS_330._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                                  <-Map 14 [BROADCAST_EDGE] vectorized
                                                     Please refer to the previous BROADCAST [RS_330]
                                                     Please refer to the previous Select Operator [SEL_375]
                                            <-Map 20 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_383]
                                                PartitionCols:_col0, _col1
                                                 Please refer to the previous Select Operator [SEL_382]
                                    <-Reducer 2 [CONTAINS]
                                      Reduce Output Operator [RS_293]
                                        PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                        Group By Operator [GBY_292] (rows=621178955 width=131)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                          Select Operator [SEL_290] (rows=170474971 width=131)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Merge Join Operator [MERGEJOIN_289] (rows=170474971 width=234)
                                              Conds:RS_353._col1, _col2=RS_356._col0, _col1(Left Outer),Output:["_col3","_col4","_col7","_col8","_col9","_col10","_col13","_col14"]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_353]
                                                PartitionCols:_col1, _col2
                                                Map Join Operator [MAPJOIN_351] (rows=96821196 width=138)
                                                  Conds:MAPJOIN_349._col1=RS_334._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                <-Map 15 [BROADCAST_EDGE] vectorized
                                                   Please refer to the previous BROADCAST [RS_334]
                                                <-Map Join Operator [MAPJOIN_349] (rows=101592102 width=122)
                                                    Conds:SEL_348._col0=RS_329._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                                  <-Map 14 [BROADCAST_EDGE] vectorized
                                                     Please refer to the previous BROADCAST [RS_329]
                                                     Please refer to the previous Select Operator [SEL_348]
                                            <-Map 16 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_356]
                                                PartitionCols:_col0, _col1
                                                 Please refer to the previous Select Operator [SEL_355]

