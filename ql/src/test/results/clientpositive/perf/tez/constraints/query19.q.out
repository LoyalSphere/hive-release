PREHOOK: query: explain
select  i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
   and ss_item_sk = i_item_sk
   and i_manager_id=7
   and d_moy=11
   and d_year=1999
   and ss_customer_sk = c_customer_sk 
   and c_current_addr_sk = ca_address_sk
   and substr(ca_zip,1,5) <> substr(s_zip,1,5) 
   and ss_store_sk = s_store_sk 
 group by i_brand
      ,i_brand_id
      ,i_manufact_id
      ,i_manufact
 order by ext_price desc
         ,i_brand
         ,i_brand_id
         ,i_manufact_id
         ,i_manufact
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@mv_store_sales_item_customer
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
   and ss_item_sk = i_item_sk
   and i_manager_id=7
   and d_moy=11
   and d_year=1999
   and ss_customer_sk = c_customer_sk 
   and c_current_addr_sk = ca_address_sk
   and substr(ca_zip,1,5) <> substr(s_zip,1,5) 
   and ss_store_sk = s_store_sk 
 group by i_brand
      ,i_brand_id
      ,i_manufact_id
      ,i_manufact
 order by ext_price desc
         ,i_brand
         ,i_brand_id
         ,i_manufact_id
         ,i_manufact
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@mv_store_sales_item_customer
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 2 (BROADCAST_EDGE)
Map 3 <- Map 1 (BROADCAST_EDGE), Map 6 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE), Map 8 (BROADCAST_EDGE)
Reducer 4 <- Map 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_107]
        Limit [LIM_106] (rows=1 width=419)
          Number of rows:100
          Select Operator [SEL_105] (rows=1 width=419)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_104]
              Select Operator [SEL_103] (rows=1 width=419)
                Output:["_col2","_col3","_col4","_col5","_col6"]
                Group By Operator [GBY_102] (rows=1 width=315)
                  Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
                <-Map 3 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_101]
                    PartitionCols:_col0, _col1, _col2, _col3
                    Group By Operator [GBY_100] (rows=1 width=315)
                      Output:["_col0","_col1","_col2","_col3","_col4"],aggregations:["sum(_col5)"],keys:_col14, _col13, _col15, _col16
                      Select Operator [SEL_99] (rows=1 width=493)
                        Output:["_col5","_col13","_col14","_col15","_col16"]
                        Filter Operator [FIL_98] (rows=1 width=493)
                          predicate:(substr(_col8, 1, 5) <> substr(_col19, 1, 5))
                          Map Join Operator [MAPJOIN_97] (rows=1 width=493)
                            Conds:MAPJOIN_96._col3=RS_92._col0(Inner),HybridGraceHashJoin:true,Output:["_col5","_col8","_col13","_col14","_col15","_col16","_col19"]
                          <-Map 8 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_92]
                              PartitionCols:_col0
                              Select Operator [SEL_91] (rows=1704 width=93)
                                Output:["_col0","_col1"]
                                TableScan [TS_14] (rows=1704 width=93)
                                  default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_zip"]
                          <-Map Join Operator [MAPJOIN_96] (rows=1 width=408)
                              Conds:MAPJOIN_95._col2=RS_90._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col5","_col8","_col13","_col14","_col15","_col16"]
                            <-Map 7 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_90]
                                PartitionCols:_col0
                                Select Operator [SEL_89] (rows=7333 width=210)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_88] (rows=7333 width=210)
                                    predicate:(i_manager_id = 7)
                                    TableScan [TS_11] (rows=462000 width=210)
                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_brand_id","i_brand","i_manufact_id","i_manufact","i_manager_id"]
                            <-Map Join Operator [MAPJOIN_95] (rows=1 width=209)
                                Conds:MAPJOIN_94._col6=RS_87._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col5","_col8"]
                              <-Map 6 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_87]
                                  PartitionCols:_col0
                                  Select Operator [SEL_86] (rows=50 width=12)
                                    Output:["_col0"]
                                    Filter Operator [FIL_85] (rows=50 width=12)
                                      predicate:((d_moy = 11) and (d_year = 1999))
                                      TableScan [TS_8] (rows=73049 width=12)
                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                              <-Map Join Operator [MAPJOIN_94] (rows=1 width=213)
                                  Conds:RS_84._col1=SEL_93._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col5","_col6","_col8"]
                                <-Map 1 [BROADCAST_EDGE] vectorized
                                  BROADCAST [RS_84]
                                    PartitionCols:_col1
                                    Map Join Operator [MAPJOIN_83] (rows=1 width=128)
                                      Conds:SEL_82._col0=RS_80._col2(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col5","_col6"]
                                    <-Map 2 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_80]
                                        PartitionCols:_col2
                                        Select Operator [SEL_79] (rows=1 width=128)
                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                          Filter Operator [FIL_78] (rows=1 width=128)
                                            predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                            TableScan [TS_3] (rows=1 width=128)
                                              default@mv_store_sales_item_customer,default.mv_store_sales_item_customer,Tbl:COMPLETE,Col:PARTIAL,Output:["ss_item_sk","ss_store_sk","ss_customer_sk","ss_ext_sales_price"]
                                    <-Select Operator [SEL_82] (rows=80000000 width=8)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_81] (rows=80000000 width=8)
                                          predicate:c_current_addr_sk is not null
                                          TableScan [TS_0] (rows=80000000 width=8)
                                            default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk"]
                                <-Select Operator [SEL_93] (rows=40000000 width=93)
                                    Output:["_col0","_col1"]
                                    TableScan [TS_6] (rows=40000000 width=93)
                                      default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_zip"]

