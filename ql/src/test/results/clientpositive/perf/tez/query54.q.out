Warning: Shuffle Join MERGEJOIN[183][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 4' is a cross product
Warning: Shuffle Join MERGEJOIN[184][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[185][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[186][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 7' is a cross product
PREHOOK: query: explain
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with my_customers as (
 select distinct c_customer_sk
        , c_current_addr_sk
 from   
        ( select cs_sold_date_sk sold_date_sk,
                 cs_bill_customer_sk customer_sk,
                 cs_item_sk item_sk
          from   catalog_sales
          union all
          select ws_sold_date_sk sold_date_sk,
                 ws_bill_customer_sk customer_sk,
                 ws_item_sk item_sk
          from   web_sales
         ) cs_or_ws_sales,
         item,
         date_dim,
         customer
 where   sold_date_sk = d_date_sk
         and item_sk = i_item_sk
         and i_category = 'Jewelry'
         and i_class = 'consignment'
         and c_customer_sk = cs_or_ws_sales.customer_sk
         and d_moy = 3
         and d_year = 1999
 )
 , my_revenue as (
 select c_customer_sk,
        sum(ss_ext_sales_price) as revenue
 from   my_customers,
        store_sales,
        customer_address,
        store,
        date_dim
 where  c_current_addr_sk = ca_address_sk
        and ca_county = s_county
        and ca_state = s_state
        and ss_sold_date_sk = d_date_sk
        and c_customer_sk = ss_customer_sk
        and d_month_seq between (select distinct d_month_seq+1
                                 from   date_dim where d_year = 1999 and d_moy = 3)
                           and  (select distinct d_month_seq+3
                                 from   date_dim where d_year = 1999 and d_moy = 3)
 group by c_customer_sk
 )
 , segments as
 (select cast((revenue/50) as int) as segment
  from   my_revenue
 )
  select  segment, count(*) as num_customers, segment*50 as segment_base
 from segments
 group by segment
 order by segment, num_customers
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 16 <- Union 17 (CONTAINS)
Map 22 <- Union 17 (CONTAINS)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 13 <- Map 12 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 18 <- Map 23 (SIMPLE_EDGE), Union 17 (SIMPLE_EDGE)
Reducer 19 <- Map 24 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 20 <- Map 25 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 27 <- Map 26 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 26 (SIMPLE_EDGE)
Reducer 3 <- Reducer 14 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 26 (SIMPLE_EDGE)
Reducer 4 <- Reducer 28 (CUSTOM_SIMPLE_EDGE), Reducer 3 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 27 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 30 (CUSTOM_SIMPLE_EDGE), Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 31 (CUSTOM_SIMPLE_EDGE), Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_259]
        Limit [LIM_258] (rows=1 width=16)
          Number of rows:100
          Select Operator [SEL_257] (rows=1 width=16)
            Output:["_col0","_col1","_col2"]
          <-Reducer 9 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_256]
              Select Operator [SEL_255] (rows=1 width=16)
                Output:["_col0","_col1","_col2"]
                Group By Operator [GBY_254] (rows=1 width=12)
                  Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                <-Reducer 8 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_253]
                    PartitionCols:_col0
                    Group By Operator [GBY_252] (rows=1 width=12)
                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                      Select Operator [SEL_251] (rows=1 width=116)
                        Output:["_col0"]
                        Group By Operator [GBY_250] (rows=1 width=116)
                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                        <-Reducer 7 [SIMPLE_EDGE]
                          SHUFFLE [RS_119]
                            PartitionCols:_col0
                            Group By Operator [GBY_118] (rows=312 width=116)
                              Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                              Select Operator [SEL_117] (rows=624257222 width=127)
                                Output:["_col0","_col1"]
                                Filter Operator [FIL_116] (rows=624257222 width=127)
                                  predicate:_col2 BETWEEN _col3 AND _col4
                                  Merge Join Operator [MERGEJOIN_186] (rows=5618315000 width=127)
                                    Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4"]
                                  <-Reducer 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_249]
                                      Group By Operator [GBY_248] (rows=25 width=4)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Map 26 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_230]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_227] (rows=25 width=4)
                                            Output:["_col0"],keys:_col0
                                            Select Operator [SEL_224] (rows=50 width=12)
                                              Output:["_col0"]
                                              Filter Operator [FIL_221] (rows=50 width=12)
                                                predicate:((d_moy = 3) and (d_year = 1999))
                                                TableScan [TS_50] (rows=73049 width=12)
                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_month_seq","d_year","d_moy"]
                                  <-Reducer 6 [CUSTOM_SIMPLE_EDGE]
                                    PARTITION_ONLY_SHUFFLE [RS_113]
                                      Select Operator [SEL_104] (rows=224732600 width=119)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Merge Join Operator [MERGEJOIN_185] (rows=224732600 width=119)
                                          Conds:(Inner),Output:["_col0","_col4","_col11","_col13"]
                                        <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_247]
                                            Select Operator [SEL_246] (rows=1 width=8)
                                              Filter Operator [FIL_245] (rows=1 width=8)
                                                predicate:(sq_count_check(_col0) <= 1)
                                                Group By Operator [GBY_244] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                <-Reducer 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_243]
                                                    Group By Operator [GBY_242] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count()"]
                                                      Select Operator [SEL_241] (rows=25 width=4)
                                                        Group By Operator [GBY_240] (rows=25 width=4)
                                                          Output:["_col0"],keys:KEY._col0
                                                        <-Map 26 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_229]
                                                            PartitionCols:_col0
                                                            Group By Operator [GBY_226] (rows=25 width=4)
                                                              Output:["_col0"],keys:_col0
                                                              Select Operator [SEL_223] (rows=50 width=12)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Filter Operator [FIL_221]
                                        <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                                          PARTITION_ONLY_SHUFFLE [RS_101]
                                            Select Operator [SEL_85] (rows=224732600 width=119)
                                              Output:["_col0","_col4","_col11","_col13"]
                                              Merge Join Operator [MERGEJOIN_184] (rows=224732600 width=119)
                                                Conds:(Left Outer),Output:["_col2","_col4","_col10","_col13"]
                                              <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_233]
                                                  Group By Operator [GBY_231] (rows=25 width=4)
                                                    Output:["_col0"],keys:KEY._col0
                                                  <-Map 26 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_228]
                                                      PartitionCols:_col0
                                                      Group By Operator [GBY_225] (rows=25 width=4)
                                                        Output:["_col0"],keys:_col0
                                                        Select Operator [SEL_222] (rows=50 width=12)
                                                          Output:["_col0"]
                                                           Please refer to the previous Filter Operator [FIL_221]
                                              <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                                                PARTITION_ONLY_SHUFFLE [RS_82]
                                                  Merge Join Operator [MERGEJOIN_183] (rows=8989304 width=8)
                                                    Conds:(Inner),Output:["_col2","_col4","_col10"]
                                                  <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_239]
                                                      Select Operator [SEL_238] (rows=1 width=8)
                                                        Filter Operator [FIL_237] (rows=1 width=8)
                                                          predicate:(sq_count_check(_col0) <= 1)
                                                          Group By Operator [GBY_236] (rows=1 width=8)
                                                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                          <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_235]
                                                              Group By Operator [GBY_234] (rows=1 width=8)
                                                                Output:["_col0"],aggregations:["count()"]
                                                                Select Operator [SEL_232] (rows=25 width=4)
                                                                   Please refer to the previous Group By Operator [GBY_231]
                                                  <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
                                                    PARTITION_ONLY_SHUFFLE [RS_79]
                                                      Merge Join Operator [MERGEJOIN_182] (rows=8989304 width=8)
                                                        Conds:RS_76._col1=RS_77._col5(Inner),Output:["_col2","_col4","_col10"]
                                                      <-Reducer 14 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_77]
                                                          PartitionCols:_col5
                                                          Merge Join Operator [MERGEJOIN_181] (rows=55046 width=4)
                                                            Conds:RS_46._col0=RS_220._col1(Inner),Output:["_col5"]
                                                          <-Reducer 13 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_46]
                                                              PartitionCols:_col0
                                                              Merge Join Operator [MERGEJOIN_177] (rows=39720279 width=4)
                                                                Conds:RS_205._col1, _col2=RS_208._col0, _col1(Inner),Output:["_col0"]
                                                              <-Map 12 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_205]
                                                                  PartitionCols:_col1, _col2
                                                                  Select Operator [SEL_204] (rows=40000000 width=188)
                                                                    Output:["_col0","_col1","_col2"]
                                                                    Filter Operator [FIL_203] (rows=40000000 width=188)
                                                                      predicate:(ca_address_sk is not null and ca_county is not null and ca_state is not null)
                                                                      TableScan [TS_6] (rows=40000000 width=188)
                                                                        default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_county","ca_state"]
                                                              <-Map 15 [SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_208]
                                                                  PartitionCols:_col0, _col1
                                                                  Select Operator [SEL_207] (rows=1704 width=184)
                                                                    Output:["_col0","_col1"]
                                                                    Filter Operator [FIL_206] (rows=1704 width=184)
                                                                      predicate:(s_county is not null and s_state is not null)
                                                                      TableScan [TS_9] (rows=1704 width=184)
                                                                        default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_county","s_state"]
                                                          <-Reducer 21 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_220]
                                                              PartitionCols:_col1
                                                              Select Operator [SEL_219] (rows=55046 width=8)
                                                                Output:["_col0","_col1"]
                                                                Group By Operator [GBY_218] (rows=55046 width=8)
                                                                  Output:["_col0","_col1"],keys:KEY._col0, KEY._col1
                                                                <-Reducer 20 [SIMPLE_EDGE]
                                                                  SHUFFLE [RS_40]
                                                                    PartitionCols:_col0, _col1
                                                                    Group By Operator [GBY_39] (rows=55046 width=8)
                                                                      Output:["_col0","_col1"],keys:_col10, _col9
                                                                      Merge Join Operator [MERGEJOIN_180] (rows=110092 width=8)
                                                                        Conds:RS_35._col1=RS_217._col0(Inner),Output:["_col9","_col10"]
                                                                      <-Map 25 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_217]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_216] (rows=80000000 width=8)
                                                                            Output:["_col0","_col1"]
                                                                            Filter Operator [FIL_215] (rows=80000000 width=8)
                                                                              predicate:(c_current_addr_sk is not null and c_customer_sk is not null)
                                                                              TableScan [TS_26] (rows=80000000 width=8)
                                                                                default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk"]
                                                                      <-Reducer 19 [SIMPLE_EDGE]
                                                                        SHUFFLE [RS_35]
                                                                          PartitionCols:_col1
                                                                          Merge Join Operator [MERGEJOIN_179] (rows=110092 width=0)
                                                                            Conds:RS_32._col2=RS_214._col0(Inner),Output:["_col1"]
                                                                          <-Map 24 [SIMPLE_EDGE] vectorized
                                                                            SHUFFLE [RS_214]
                                                                              PartitionCols:_col0
                                                                              Select Operator [SEL_213] (rows=453 width=190)
                                                                                Output:["_col0"]
                                                                                Filter Operator [FIL_212] (rows=453 width=186)
                                                                                  predicate:((i_category = 'Jewelry') and (i_class = 'consignment') and i_item_sk is not null)
                                                                                  TableScan [TS_23] (rows=462000 width=186)
                                                                                    default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_class","i_category"]
                                                                          <-Reducer 18 [SIMPLE_EDGE]
                                                                            SHUFFLE [RS_32]
                                                                              PartitionCols:_col2
                                                                              Merge Join Operator [MERGEJOIN_178] (rows=11665117 width=7)
                                                                                Conds:Union 17._col0=RS_211._col0(Inner),Output:["_col1","_col2"]
                                                                              <-Map 23 [SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_211]
                                                                                  PartitionCols:_col0
                                                                                  Select Operator [SEL_210] (rows=50 width=12)
                                                                                    Output:["_col0"]
                                                                                    Filter Operator [FIL_209] (rows=50 width=12)
                                                                                      predicate:((d_moy = 3) and (d_year = 1999) and d_date_sk is not null)
                                                                                      TableScan [TS_20] (rows=73049 width=12)
                                                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                                                              <-Union 17 [SIMPLE_EDGE]
                                                                                <-Map 16 [CONTAINS] vectorized
                                                                                  Reduce Output Operator [RS_262]
                                                                                    PartitionCols:_col0
                                                                                    Select Operator [SEL_261] (rows=285117831 width=11)
                                                                                      Output:["_col0","_col1","_col2"]
                                                                                      Filter Operator [FIL_260] (rows=285117831 width=11)
                                                                                        predicate:(cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                                                                        TableScan [TS_187] (rows=287989836 width=11)
                                                                                          Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk"]
                                                                                <-Map 22 [CONTAINS] vectorized
                                                                                  Reduce Output Operator [RS_265]
                                                                                    PartitionCols:_col0
                                                                                    Select Operator [SEL_264] (rows=143930993 width=11)
                                                                                      Output:["_col0","_col1","_col2"]
                                                                                      Filter Operator [FIL_263] (rows=143930993 width=11)
                                                                                        predicate:(ws_bill_customer_sk is not null and ws_item_sk is not null and ws_sold_date_sk is not null)
                                                                                        TableScan [TS_192] (rows=144002668 width=11)
                                                                                          Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk"]
                                                      <-Reducer 2 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_76]
                                                          PartitionCols:_col1
                                                          Merge Join Operator [MERGEJOIN_176] (rows=525327388 width=114)
                                                            Conds:RS_199._col0=RS_202._col0(Inner),Output:["_col1","_col2","_col4"]
                                                          <-Map 1 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_199]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_198] (rows=525327388 width=114)
                                                                Output:["_col0","_col1","_col2"]
                                                                Filter Operator [FIL_197] (rows=525327388 width=114)
                                                                  predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                  TableScan [TS_0] (rows=575995635 width=114)
                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_sales_price"]
                                                          <-Map 11 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_202]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_201] (rows=73049 width=8)
                                                                Output:["_col0","_col1"]
                                                                Filter Operator [FIL_200] (rows=73049 width=8)
                                                                  predicate:d_date_sk is not null
                                                                  TableScan [TS_3] (rows=73049 width=8)
                                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]

