Warning: Map Join MAPJOIN[212][bigTable=?] in task 'Reducer 11' is a cross product
PREHOOK: query: explain
with ss as
 (select s_store_sk,
         sum(ss_ext_sales_price) as sales,
         sum(ss_net_profit) as profit
 from store_sales,
      date_dim,
      store
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days) 
       and ss_store_sk = s_store_sk
 group by s_store_sk)
 ,
 sr as
 (select s_store_sk,
         sum(sr_return_amt) as returns,
         sum(sr_net_loss) as profit_loss
 from store_returns,
      date_dim,
      store
 where sr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and sr_store_sk = s_store_sk
 group by s_store_sk), 
 cs as
 (select cs_call_center_sk,
        sum(cs_ext_sales_price) as sales,
        sum(cs_net_profit) as profit
 from catalog_sales,
      date_dim
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 group by cs_call_center_sk 
 ), 
 cr as
 (select
        sum(cr_return_amount) as returns,
        sum(cr_net_loss) as profit_loss
 from catalog_returns,
      date_dim
 where cr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 ), 
 ws as
 ( select wp_web_page_sk,
        sum(ws_ext_sales_price) as sales,
        sum(ws_net_profit) as profit
 from web_sales,
      date_dim,
      web_page
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and ws_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk), 
 wr as
 (select wp_web_page_sk,
        sum(wr_return_amt) as returns,
        sum(wr_net_loss) as profit_loss
 from web_returns,
      date_dim,
      web_page
 where wr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and wr_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , ss.s_store_sk as id
        , sales
        , coalesce(returns, 0) as returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ss left join sr
        on  ss.s_store_sk = sr.s_store_sk
 union all
 select 'catalog channel' as channel
        , cs_call_center_sk as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  cs
       , cr
 union all
 select 'web channel' as channel
        , ws.wp_web_page_sk as id
        , sales
        , coalesce(returns, 0) returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ws left join wr
        on  ws.wp_web_page_sk = wr.wp_web_page_sk
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_page
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as
 (select s_store_sk,
         sum(ss_ext_sales_price) as sales,
         sum(ss_net_profit) as profit
 from store_sales,
      date_dim,
      store
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  30 days) 
       and ss_store_sk = s_store_sk
 group by s_store_sk)
 ,
 sr as
 (select s_store_sk,
         sum(sr_return_amt) as returns,
         sum(sr_net_loss) as profit_loss
 from store_returns,
      date_dim,
      store
 where sr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and sr_store_sk = s_store_sk
 group by s_store_sk), 
 cs as
 (select cs_call_center_sk,
        sum(cs_ext_sales_price) as sales,
        sum(cs_net_profit) as profit
 from catalog_sales,
      date_dim
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 group by cs_call_center_sk 
 ), 
 cr as
 (select
        sum(cr_return_amount) as returns,
        sum(cr_net_loss) as profit_loss
 from catalog_returns,
      date_dim
 where cr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
 ), 
 ws as
 ( select wp_web_page_sk,
        sum(ws_ext_sales_price) as sales,
        sum(ws_net_profit) as profit
 from web_sales,
      date_dim,
      web_page
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and ws_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk), 
 wr as
 (select wp_web_page_sk,
        sum(wr_return_amt) as returns,
        sum(wr_net_loss) as profit_loss
 from web_returns,
      date_dim,
      web_page
 where wr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  30 days)
       and wr_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk)
  select  channel
        , id
        , sum(sales) as sales
        , sum(returns) as returns
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , ss.s_store_sk as id
        , sales
        , coalesce(returns, 0) as returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ss left join sr
        on  ss.s_store_sk = sr.s_store_sk
 union all
 select 'catalog channel' as channel
        , cs_call_center_sk as id
        , sales
        , returns
        , (profit - profit_loss) as profit
 from  cs
       , cr
 union all
 select 'web channel' as channel
        , ws.wp_web_page_sk as id
        , sales
        , coalesce(returns, 0) returns
        , (profit - coalesce(profit_loss,0)) as profit
 from   ws left join wr
        on  ws.wp_web_page_sk = wr.wp_web_page_sk
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_page
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 6 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE)
Map 10 <- Map 6 (BROADCAST_EDGE)
Map 12 <- Map 6 (BROADCAST_EDGE)
Map 14 <- Map 16 (BROADCAST_EDGE), Map 6 (BROADCAST_EDGE)
Map 17 <- Map 16 (BROADCAST_EDGE), Map 6 (BROADCAST_EDGE)
Map 8 <- Map 6 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (SIMPLE_EDGE), Reducer 13 (BROADCAST_EDGE), Union 3 (CONTAINS)
Reducer 13 <- Map 12 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE), Reducer 18 (BROADCAST_EDGE), Union 3 (CONTAINS)
Reducer 18 <- Map 17 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 9 (BROADCAST_EDGE), Union 3 (CONTAINS)
Reducer 4 <- Union 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_260]
        Limit [LIM_259] (rows=21 width=439)
          Number of rows:100
          Select Operator [SEL_258] (rows=21 width=439)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_257]
              Select Operator [SEL_256] (rows=21 width=439)
                Output:["_col0","_col1","_col2","_col3","_col4"]
                Group By Operator [GBY_255] (rows=21 width=447)
                  Output:["_col0","_col1","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
                <-Union 3 [SIMPLE_EDGE]
                  <-Reducer 11 [CONTAINS] vectorized
                    Reduce Output Operator [RS_277]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_276] (rows=63 width=447)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Select Operator [SEL_275] (rows=2 width=439)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Map Join Operator [MAPJOIN_274] (rows=2 width=452)
                            Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                          <-Reducer 13 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_272]
                              Group By Operator [GBY_271] (rows=1 width=224)
                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"]
                              <-Map 12 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_270]
                                  Group By Operator [GBY_269] (rows=1 width=224)
                                    Output:["_col0","_col1"],aggregations:["sum(_col1)","sum(_col2)"]
                                    Map Join Operator [MAPJOIN_268] (rows=3199657 width=183)
                                      Conds:SEL_267._col0=RS_229._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2"]
                                    <-Map 6 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_229]
                                        PartitionCols:_col0
                                        Select Operator [SEL_225] (rows=8116 width=98)
                                          Output:["_col0"]
                                          Filter Operator [FIL_224] (rows=8116 width=98)
                                            predicate:(CAST( d_date AS TIMESTAMP) BETWEEN TIMESTAMP'1998-08-04 00:00:00' AND TIMESTAMP'1998-09-03 00:00:00' and d_date_sk is not null)
                                            TableScan [TS_3] (rows=73049 width=98)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_date"]
                                    <-Select Operator [SEL_267] (rows=28798881 width=223)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_266] (rows=28798881 width=223)
                                          predicate:cr_returned_date_sk is not null
                                          TableScan [TS_58] (rows=28798881 width=223)
                                            default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["cr_returned_date_sk","cr_return_amount","cr_net_loss"]
                          <-Group By Operator [GBY_273] (rows=2 width=228)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                            <-Map 10 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_265]
                                PartitionCols:_col0
                                Group By Operator [GBY_264] (rows=56 width=227)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col1
                                  Map Join Operator [MAPJOIN_263] (rows=31836679 width=222)
                                    Conds:SEL_262._col0=RS_228._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                  <-Map 6 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_228]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_225]
                                  <-Select Operator [SEL_262] (rows=286549727 width=231)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_261] (rows=286549727 width=231)
                                        predicate:cs_sold_date_sk is not null
                                        TableScan [TS_44] (rows=287989836 width=231)
                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_call_center_sk","cs_ext_sales_price","cs_net_profit"]
                  <-Reducer 15 [CONTAINS] vectorized
                    Reduce Output Operator [RS_300]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_299] (rows=63 width=447)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Select Operator [SEL_298] (rows=44 width=435)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Map Join Operator [MAPJOIN_297] (rows=44 width=340)
                            Conds:GBY_296._col0=RS_295._col0(Left Outer),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col4","_col5"]
                          <-Reducer 18 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_295]
                              PartitionCols:_col0
                              Group By Operator [GBY_294] (rows=21 width=228)
                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                              <-Map 17 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_293]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_292] (rows=21 width=228)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col6
                                    Map Join Operator [MAPJOIN_291] (rows=1458758 width=137)
                                      Conds:MAPJOIN_290._col1=RS_281._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col6"]
                                    <-Map 16 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_281]
                                        PartitionCols:_col0
                                        Select Operator [SEL_279] (rows=4602 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_278] (rows=4602 width=4)
                                            predicate:wp_web_page_sk is not null
                                            TableScan [TS_83] (rows=4602 width=4)
                                              default@web_page,web_page,Tbl:COMPLETE,Col:COMPLETE,Output:["wp_web_page_sk"]
                                    <-Map Join Operator [MAPJOIN_290] (rows=1458758 width=135)
                                        Conds:SEL_289._col0=RS_231._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                      <-Map 6 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_231]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_225]
                                      <-Select Operator [SEL_289] (rows=13129719 width=221)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Filter Operator [FIL_288] (rows=13129719 width=221)
                                            predicate:(wr_returned_date_sk is not null and wr_web_page_sk is not null)
                                            TableScan [TS_97] (rows=14398467 width=221)
                                              default@web_returns,web_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["wr_returned_date_sk","wr_web_page_sk","wr_return_amt","wr_net_loss"]
                          <-Group By Operator [GBY_296] (rows=23 width=228)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                            <-Map 14 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_287]
                                PartitionCols:_col0
                                Group By Operator [GBY_286] (rows=345 width=228)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col6
                                  Map Join Operator [MAPJOIN_285] (rows=15991254 width=227)
                                    Conds:MAPJOIN_284._col1=RS_280._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col6"]
                                  <-Map 16 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_280]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_279]
                                  <-Map Join Operator [MAPJOIN_284] (rows=15991254 width=227)
                                      Conds:SEL_283._col0=RS_230._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                    <-Map 6 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_230]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_225]
                                    <-Select Operator [SEL_283] (rows=143931136 width=231)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_282] (rows=143931136 width=231)
                                          predicate:(ws_sold_date_sk is not null and ws_web_page_sk is not null)
                                          TableScan [TS_77] (rows=144002668 width=231)
                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ws_sold_date_sk","ws_web_page_sk","ws_ext_sales_price","ws_net_profit"]
                  <-Reducer 2 [CONTAINS] vectorized
                    Reduce Output Operator [RS_254]
                      PartitionCols:_col0, _col1, _col2
                      Group By Operator [GBY_253] (rows=63 width=447)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)"],keys:_col0, _col1, 0L
                        Select Operator [SEL_252] (rows=10 width=437)
                          Output:["_col0","_col1","_col2","_col3","_col4"]
                          Map Join Operator [MAPJOIN_251] (rows=10 width=452)
                            Conds:GBY_250._col0=RS_249._col0(Left Outer),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col4","_col5"]
                          <-Reducer 9 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_249]
                              PartitionCols:_col0
                              Group By Operator [GBY_248] (rows=10 width=228)
                                Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                              <-Map 8 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_247]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_246] (rows=40 width=228)
                                    Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col6
                                    Map Join Operator [MAPJOIN_245] (rows=5959021 width=157)
                                      Conds:MAPJOIN_244._col1=RS_235._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col6"]
                                    <-Map 7 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_235]
                                        PartitionCols:_col0
                                        Select Operator [SEL_233] (rows=1704 width=4)
                                          Output:["_col0"]
                                          Filter Operator [FIL_232] (rows=1704 width=4)
                                            predicate:s_store_sk is not null
                                            TableScan [TS_6] (rows=1704 width=4)
                                              default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk"]
                                    <-Map Join Operator [MAPJOIN_244] (rows=5959021 width=156)
                                        Conds:SEL_243._col0=RS_227._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                      <-Map 6 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_227]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_225]
                                      <-Select Operator [SEL_243] (rows=53634860 width=223)
                                          Output:["_col0","_col1","_col2","_col3"]
                                          Filter Operator [FIL_242] (rows=53634860 width=223)
                                            predicate:(sr_returned_date_sk is not null and sr_store_sk is not null)
                                            TableScan [TS_20] (rows=57591150 width=223)
                                              default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_store_sk","sr_return_amt","sr_net_loss"]
                          <-Group By Operator [GBY_250] (rows=10 width=228)
                              Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_241]
                                PartitionCols:_col0
                                Group By Operator [GBY_240] (rows=320 width=228)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(_col2)","sum(_col3)"],keys:_col6
                                  Map Join Operator [MAPJOIN_239] (rows=58365993 width=137)
                                    Conds:MAPJOIN_238._col1=RS_234._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col6"]
                                  <-Map 7 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_234]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_233]
                                  <-Map Join Operator [MAPJOIN_238] (rows=58365993 width=135)
                                      Conds:SEL_237._col0=RS_226._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                    <-Map 6 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_226]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_225]
                                    <-Select Operator [SEL_237] (rows=525329897 width=221)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_236] (rows=525329897 width=221)
                                          predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                          TableScan [TS_0] (rows=575995635 width=221)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_store_sk","ss_ext_sales_price","ss_net_profit"]

