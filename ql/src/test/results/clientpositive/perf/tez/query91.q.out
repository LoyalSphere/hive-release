PREHOOK: query: explain
select  
        cc_call_center_id Call_Center,
        cc_name Call_Center_Name,
        cc_manager Manager,
        sum(cr_net_loss) Returns_Loss
from
        call_center,
        catalog_returns,
        date_dim,
        customer,
        customer_address,
        customer_demographics,
        household_demographics
where
        cr_call_center_sk       = cc_call_center_sk
and     cr_returned_date_sk     = d_date_sk
and     cr_returning_customer_sk= c_customer_sk
and     cd_demo_sk              = c_current_cdemo_sk
and     hd_demo_sk              = c_current_hdemo_sk
and     ca_address_sk           = c_current_addr_sk
and     d_year                  = 1999 
and     d_moy                   = 11
and     ( (cd_marital_status       = 'M' and cd_education_status     = 'Unknown')
        or(cd_marital_status       = 'W' and cd_education_status     = 'Advanced Degree'))
and     hd_buy_potential like '0-500%'
and     ca_gmt_offset           = -7
group by cc_call_center_id,cc_name,cc_manager,cd_marital_status,cd_education_status
order by sum(cr_net_loss) desc
PREHOOK: type: QUERY
PREHOOK: Input: default@call_center
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
        cc_call_center_id Call_Center,
        cc_name Call_Center_Name,
        cc_manager Manager,
        sum(cr_net_loss) Returns_Loss
from
        call_center,
        catalog_returns,
        date_dim,
        customer,
        customer_address,
        customer_demographics,
        household_demographics
where
        cr_call_center_sk       = cc_call_center_sk
and     cr_returned_date_sk     = d_date_sk
and     cr_returning_customer_sk= c_customer_sk
and     cd_demo_sk              = c_current_cdemo_sk
and     hd_demo_sk              = c_current_hdemo_sk
and     ca_address_sk           = c_current_addr_sk
and     d_year                  = 1999 
and     d_moy                   = 11
and     ( (cd_marital_status       = 'M' and cd_education_status     = 'Unknown')
        or(cd_marital_status       = 'W' and cd_education_status     = 'Advanced Degree'))
and     hd_buy_potential like '0-500%'
and     ca_gmt_offset           = -7
group by cc_call_center_id,cc_name,cc_manager,cd_marital_status,cd_education_status
order by sum(cr_net_loss) desc
POSTHOOK: type: QUERY
POSTHOOK: Input: default@call_center
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Map 11 (SIMPLE_EDGE), Map 12 (BROADCAST_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 3 <- Map 8 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 13 (BROADCAST_EDGE), Reducer 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_112]
        Select Operator [SEL_111] (rows=58564004 width=860)
          Output:["_col0","_col1","_col2","_col3"]
        <-Reducer 5 [SIMPLE_EDGE] vectorized
          SHUFFLE [RS_110]
            Select Operator [SEL_109] (rows=58564004 width=860)
              Output:["_col0","_col1","_col2","_col4"]
              Group By Operator [GBY_108] (rows=58564004 width=860)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
              <-Reducer 4 [SIMPLE_EDGE]
                SHUFFLE [RS_42]
                  PartitionCols:_col0, _col1, _col2, _col3, _col4
                  Group By Operator [GBY_41] (rows=117128008 width=860)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col12)"],keys:_col5, _col6, _col17, _col18, _col19
                    Map Join Operator [MAPJOIN_84] (rows=117128008 width=860)
                      Conds:MERGEJOIN_83._col2=RS_107._col0(Inner),HybridGraceHashJoin:true,Output:["_col5","_col6","_col12","_col17","_col18","_col19"]
                    <-Map 13 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_107]
                        PartitionCols:_col0
                        Select Operator [SEL_106] (rows=3600 width=107)
                          Output:["_col0"]
                          Filter Operator [FIL_105] (rows=3600 width=107)
                            predicate:((hd_buy_potential like '0-500%') and hd_demo_sk is not null)
                            TableScan [TS_25] (rows=7200 width=107)
                              default@household_demographics,household_demographics,Tbl:COMPLETE,Col:NONE,Output:["hd_demo_sk","hd_buy_potential"]
                    <-Merge Join Operator [MERGEJOIN_83] (rows=106480005 width=860)
                        Conds:RS_34._col0=RS_35._col1(Inner),Output:["_col2","_col5","_col6","_col12","_col17","_col18","_col19"]
                      <-Reducer 10 [SIMPLE_EDGE]
                        SHUFFLE [RS_35]
                          PartitionCols:_col1
                          Map Join Operator [MAPJOIN_82] (rows=34846646 width=106)
                            Conds:MERGEJOIN_81._col2=RS_104._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col3","_col8","_col9","_col10"]
                          <-Map 12 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_104]
                              PartitionCols:_col0
                              Select Operator [SEL_103] (rows=60 width=2045)
                                Output:["_col0","_col1","_col2","_col3"]
                                Filter Operator [FIL_102] (rows=60 width=2045)
                                  predicate:cc_call_center_sk is not null
                                  TableScan [TS_15] (rows=60 width=2045)
                                    default@call_center,call_center,Tbl:COMPLETE,Col:NONE,Output:["cc_call_center_sk","cc_call_center_id","cc_name","cc_manager"]
                          <-Merge Join Operator [MERGEJOIN_81] (rows=31678769 width=106)
                              Conds:RS_98._col0=RS_101._col0(Inner),Output:["_col1","_col2","_col3"]
                            <-Map 11 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_101]
                                PartitionCols:_col0
                                Select Operator [SEL_100] (rows=18262 width=1119)
                                  Output:["_col0"]
                                  Filter Operator [FIL_99] (rows=18262 width=1119)
                                    predicate:((d_moy = 11) and (d_year = 1999) and d_date_sk is not null)
                                    TableScan [TS_12] (rows=73049 width=1119)
                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                            <-Map 9 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_98]
                                PartitionCols:_col0
                                Select Operator [SEL_97] (rows=28798881 width=106)
                                  Output:["_col0","_col1","_col2","_col3"]
                                  Filter Operator [FIL_96] (rows=28798881 width=106)
                                    predicate:(cr_call_center_sk is not null and cr_returned_date_sk is not null and cr_returning_customer_sk is not null)
                                    TableScan [TS_9] (rows=28798881 width=106)
                                      default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:NONE,Output:["cr_returned_date_sk","cr_returning_customer_sk","cr_call_center_sk","cr_net_loss"]
                      <-Reducer 3 [SIMPLE_EDGE]
                        SHUFFLE [RS_34]
                          PartitionCols:_col0
                          Merge Join Operator [MERGEJOIN_80] (rows=96800003 width=860)
                            Conds:RS_31._col3=RS_95._col0(Inner),Output:["_col0","_col2","_col5","_col6"]
                          <-Map 8 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_95]
                              PartitionCols:_col0
                              Select Operator [SEL_94] (rows=20000000 width=1014)
                                Output:["_col0"]
                                Filter Operator [FIL_93] (rows=20000000 width=1014)
                                  predicate:((ca_gmt_offset = -7) and ca_address_sk is not null)
                                  TableScan [TS_6] (rows=40000000 width=1014)
                                    default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_gmt_offset"]
                          <-Reducer 2 [SIMPLE_EDGE]
                            SHUFFLE [RS_31]
                              PartitionCols:_col3
                              Merge Join Operator [MERGEJOIN_79] (rows=88000001 width=860)
                                Conds:RS_89._col1=RS_92._col0(Inner),Output:["_col0","_col2","_col3","_col5","_col6"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_89]
                                  PartitionCols:_col1
                                  Select Operator [SEL_88] (rows=80000000 width=860)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    Filter Operator [FIL_87] (rows=80000000 width=860)
                                      predicate:(c_current_addr_sk is not null and c_current_cdemo_sk is not null and c_current_hdemo_sk is not null and c_customer_sk is not null)
                                      TableScan [TS_0] (rows=80000000 width=860)
                                        default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_current_cdemo_sk","c_current_hdemo_sk","c_current_addr_sk"]
                              <-Map 7 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_92]
                                  PartitionCols:_col0
                                  Select Operator [SEL_91] (rows=930900 width=385)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_90] (rows=930900 width=385)
                                      predicate:((cd_education_status) IN ('Unknown', 'Advanced Degree') and (cd_marital_status) IN ('M', 'W') and (struct(cd_marital_status,cd_education_status)) IN (const struct('M','Unknown'), const struct('W','Advanced Degree')) and cd_demo_sk is not null)
                                      TableScan [TS_3] (rows=1861800 width=385)
                                        default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:NONE,Output:["cd_demo_sk","cd_marital_status","cd_education_status"]

