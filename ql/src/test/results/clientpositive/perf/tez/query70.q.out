PREHOOK: query: explain
select  
    sum(ss_net_profit) as total_sum
   ,s_state
   ,s_county
   ,grouping(s_state)+grouping(s_county) as lochierarchy
   ,rank() over (
 	partition by grouping(s_state)+grouping(s_county),
 	case when grouping(s_county) = 0 then s_state end 
 	order by sum(ss_net_profit) desc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,store
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ss_sold_date_sk
 and s_store_sk  = ss_store_sk
 and s_state in
             ( select s_state
               from  (select s_state as s_state,
 			    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
                      from   store_sales, store, date_dim
                      where  d_month_seq between 1212 and 1212+11
 			    and d_date_sk = ss_sold_date_sk
 			    and s_store_sk  = ss_store_sk
                      group by s_state
                     ) tmp1 
               where ranking <= 5
             )
 group by rollup(s_state,s_county)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then s_state end
  ,rank_within_parent
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
    sum(ss_net_profit) as total_sum
   ,s_state
   ,s_county
   ,grouping(s_state)+grouping(s_county) as lochierarchy
   ,rank() over (
 	partition by grouping(s_state)+grouping(s_county),
 	case when grouping(s_county) = 0 then s_state end 
 	order by sum(ss_net_profit) desc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,store
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ss_sold_date_sk
 and s_store_sk  = ss_store_sk
 and s_state in
             ( select s_state
               from  (select s_state as s_state,
 			    rank() over ( partition by s_state order by sum(ss_net_profit) desc) as ranking
                      from   store_sales, store, date_dim
                      where  d_month_seq between 1212 and 1212+11
 			    and d_date_sk = ss_sold_date_sk
 			    and s_store_sk  = ss_store_sk
                      group by s_state
                     ) tmp1 
               where ranking <= 5
             )
 group by rollup(s_state,s_county)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then s_state end
  ,rank_within_parent
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (BROADCAST_EDGE), Map 11 (BROADCAST_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 2 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_120]
        Limit [LIM_119] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_118] (rows=1149975358 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_117]
              Select Operator [SEL_116] (rows=1149975358 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                PTF Operator [PTF_115] (rows=1149975358 width=88)
                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 DESC NULLS LAST","partition by:":"(grouping(_col3, 1) + grouping(_col3, 0)), CASE WHEN ((grouping(_col3, 0) = 0)) THEN (_col0) ELSE (CAST( null AS STRING)) END"}]
                  Select Operator [SEL_114] (rows=1149975358 width=88)
                    Output:["_col0","_col1","_col2","_col3"]
                  <-Reducer 4 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_113]
                      PartitionCols:(grouping(_col3, 1) + grouping(_col3, 0)), CASE WHEN ((grouping(_col3, 0) = 0)) THEN (_col0) ELSE (CAST( null AS STRING)) END
                      Select Operator [SEL_112] (rows=1149975358 width=88)
                        Output:["_col0","_col1","_col2","_col3"]
                        Group By Operator [GBY_111] (rows=1149975358 width=88)
                          Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_49]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_48] (rows=2299950717 width=88)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)"],keys:_col0, _col1, 0L
                              Select Operator [SEL_46] (rows=766650239 width=88)
                                Output:["_col0","_col1","_col2"]
                                Merge Join Operator [MERGEJOIN_89] (rows=766650239 width=88)
                                  Conds:RS_43._col7=RS_110._col0(Inner),Output:["_col2","_col6","_col7"]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_43]
                                    PartitionCols:_col7
                                    Map Join Operator [MAPJOIN_86] (rows=696954748 width=88)
                                      Conds:MERGEJOIN_85._col1=RS_100._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col6","_col7"]
                                    <-Map 10 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_100]
                                        PartitionCols:_col0
                                        Select Operator [SEL_99] (rows=1704 width=1910)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_98] (rows=1704 width=1910)
                                            predicate:(s_state is not null and s_store_sk is not null)
                                            TableScan [TS_6] (rows=1704 width=1910)
                                              default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_county","s_state"]
                                    <-Merge Join Operator [MERGEJOIN_85] (rows=633595212 width=88)
                                        Conds:RS_94._col0=RS_97._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_94]
                                          PartitionCols:_col0
                                          Select Operator [SEL_93] (rows=575995635 width=88)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_92] (rows=575995635 width=88)
                                              predicate:(ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_0] (rows=575995635 width=88)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_store_sk","ss_net_profit"]
                                      <-Map 11 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_103]
                                          PartitionCols:_col0
                                          Select Operator [SEL_102] (rows=1704 width=1910)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_101] (rows=1704 width=1910)
                                              predicate:(s_state is not null and s_store_sk is not null)
                                              TableScan [TS_15] (rows=1704 width=1910)
                                                default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_state"]
                                      <-Map 9 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_97]
                                          PartitionCols:_col0
                                          Select Operator [SEL_96] (rows=73049 width=1119)
                                            Output:["_col0"]
                                            Filter Operator [FIL_95] (rows=73049 width=1119)
                                              predicate:(d_date_sk is not null and d_month_seq BETWEEN 1212 AND 1223)
                                              TableScan [TS_3] (rows=73049 width=1119)
                                                default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_month_seq"]
                                <-Reducer 8 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_110]
                                    PartitionCols:_col0
                                    Select Operator [SEL_109] (rows=116159124 width=88)
                                      Output:["_col0"]
                                      Filter Operator [FIL_108] (rows=116159124 width=88)
                                        predicate:(rank_window_0 <= 5)
                                        PTF Operator [PTF_107] (rows=348477374 width=88)
                                          Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col1 DESC NULLS LAST","partition by:":"_col0"}]
                                          Select Operator [SEL_106] (rows=348477374 width=88)
                                            Output:["_col0","_col1"]
                                          <-Reducer 7 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_105]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_104] (rows=348477374 width=88)
                                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                              <-Reducer 2 [SIMPLE_EDGE]
                                                SHUFFLE [RS_26]
                                                  PartitionCols:_col0
                                                  Group By Operator [GBY_25] (rows=696954748 width=88)
                                                    Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col6
                                                    Map Join Operator [MAPJOIN_88] (rows=696954748 width=88)
                                                      Conds:MERGEJOIN_85._col1=RS_103._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col6"]
                                                    <- Please refer to the previous Map 11 [BROADCAST_EDGE]
                                                       Please refer to the previous Merge Join Operator [MERGEJOIN_85]

