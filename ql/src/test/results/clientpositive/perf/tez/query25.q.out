PREHOOK: query: explain
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 2000
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 2000
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 2000
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 2000
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 2000
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 2000
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 6 (BROADCAST_EDGE)
Map 7 <- Map 6 (BROADCAST_EDGE)
Map 9 <- Map 6 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 3 <- Map 10 (SIMPLE_EDGE), Map 11 (BROADCAST_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 8 <- Map 7 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_137]
        Limit [LIM_136] (rows=100 width=808)
          Number of rows:100
          Select Operator [SEL_135] (rows=4248052806 width=808)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_134]
              Group By Operator [GBY_133] (rows=4248052806 width=808)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 3 [SIMPLE_EDGE]
                SHUFFLE [RS_49]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_48] (rows=4248052806 width=808)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col5)","sum(_col20)","sum(_col12)"],keys:_col25, _col26, _col28, _col29
                    Map Join Operator [MAPJOIN_101] (rows=4248052806 width=807)
                      Conds:MERGEJOIN_100._col3=RS_132._col0(Inner),HybridGraceHashJoin:true,Output:["_col5","_col12","_col20","_col25","_col26","_col28","_col29"]
                    <-Map 11 [BROADCAST_EDGE] vectorized
                      BROADCAST [RS_132]
                        PartitionCols:_col0
                        Select Operator [SEL_131] (rows=1704 width=192)
                          Output:["_col0","_col1","_col2"]
                          Filter Operator [FIL_130] (rows=1704 width=192)
                            predicate:s_store_sk is not null
                            TableScan [TS_32] (rows=1704 width=192)
                              default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id","s_store_name"]
                    <-Merge Join Operator [MERGEJOIN_100] (rows=4248052806 width=623)
                        Conds:RS_41._col1=RS_129._col0(Inner),Output:["_col3","_col5","_col12","_col20","_col25","_col26"]
                      <-Map 10 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_129]
                          PartitionCols:_col0
                          Select Operator [SEL_128] (rows=462000 width=288)
                            Output:["_col0","_col1","_col2"]
                            Filter Operator [FIL_127] (rows=462000 width=288)
                              predicate:i_item_sk is not null
                              TableScan [TS_29] (rows=462000 width=288)
                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_item_desc"]
                      <-Reducer 2 [SIMPLE_EDGE]
                        SHUFFLE [RS_41]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_99] (rows=4248052806 width=343)
                            Conds:RS_118._col1, _col2, _col4=RS_39._col8, _col9, _col10(Inner),Output:["_col1","_col3","_col5","_col12","_col20"]
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_118]
                              PartitionCols:_col1, _col2, _col4
                              Map Join Operator [MAPJOIN_117] (rows=13737330 width=8)
                                Conds:SEL_116._col0=RS_112._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4","_col5"]
                              <-Map 6 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_112]
                                  PartitionCols:_col0
                                  Select Operator [SEL_109] (rows=50 width=12)
                                    Output:["_col0"]
                                    Filter Operator [FIL_106] (rows=50 width=12)
                                      predicate:((d_moy = 4) and (d_year = 2000) and d_date_sk is not null)
                                      TableScan [TS_3] (rows=73049 width=12)
                                        default@date_dim,d1,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                              <-Select Operator [SEL_116] (rows=501694138 width=126)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                  Filter Operator [FIL_115] (rows=501694138 width=126)
                                    predicate:(ss_customer_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                    TableScan [TS_0] (rows=575995635 width=126)
                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_net_profit"]
                          <-Reducer 8 [SIMPLE_EDGE]
                            SHUFFLE [RS_39]
                              PartitionCols:_col8, _col9, _col10
                              Merge Join Operator [MERGEJOIN_98] (rows=1893811716 width=235)
                                Conds:RS_122._col2, _col1=RS_126._col1, _col2(Inner),Output:["_col3","_col8","_col9","_col10","_col11"]
                              <-Map 7 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_122]
                                  PartitionCols:_col2, _col1
                                  Map Join Operator [MAPJOIN_121] (rows=54418158 width=119)
                                    Conds:SEL_120._col0=RS_113._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                  <-Map 6 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_113]
                                      PartitionCols:_col0
                                      Select Operator [SEL_110] (rows=351 width=12)
                                        Output:["_col0"]
                                        Filter Operator [FIL_107] (rows=351 width=12)
                                          predicate:((d_year = 2000) and d_date_sk is not null and d_moy BETWEEN 4 AND 10)
                                           Please refer to the previous TableScan [TS_3]
                                  <-Select Operator [SEL_120] (rows=285117831 width=123)
                                      Output:["_col0","_col1","_col2","_col3"]
                                      Filter Operator [FIL_119] (rows=285117831 width=123)
                                        predicate:(cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                        TableScan [TS_6] (rows=287989836 width=123)
                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_net_profit"]
                              <-Map 9 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_126]
                                  PartitionCols:_col1, _col2
                                  Map Join Operator [MAPJOIN_125] (rows=9402909 width=100)
                                    Conds:SEL_124._col0=RS_114._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3","_col4"]
                                  <-Map 6 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_114]
                                      PartitionCols:_col0
                                      Select Operator [SEL_111] (rows=351 width=12)
                                        Output:["_col0"]
                                        Filter Operator [FIL_108] (rows=351 width=12)
                                          predicate:((d_year = 2000) and d_date_sk is not null and d_moy BETWEEN 4 AND 10)
                                           Please refer to the previous TableScan [TS_3]
                                  <-Select Operator [SEL_124] (rows=53632139 width=123)
                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                      Filter Operator [FIL_123] (rows=53632139 width=123)
                                        predicate:(sr_customer_sk is not null and sr_item_sk is not null and sr_returned_date_sk is not null and sr_ticket_number is not null)
                                        TableScan [TS_12] (rows=57591150 width=123)
                                          default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_net_loss"]

