PREHOOK: query: explain
with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 10 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE), Map 9 (BROADCAST_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE), Reducer 6 (BROADCAST_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE), Map 9 (BROADCAST_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_144]
        Select Operator [SEL_143] (rows=21054 width=56)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
        <-Reducer 3 [SIMPLE_EDGE] vectorized
          SHUFFLE [RS_142]
            Map Join Operator [MAPJOIN_141] (rows=21054 width=48)
              Conds:SEL_140._col0, _col1=RS_136._col0, _col1(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
            <-Reducer 6 [BROADCAST_EDGE] vectorized
              BROADCAST [RS_136]
                PartitionCols:_col0, _col1
                Select Operator [SEL_135] (rows=6016 width=24)
                  Output:["_col0","_col1","_col2","_col3"]
                  Filter Operator [FIL_134] (rows=6016 width=40)
                    predicate:(((UDFToDouble(_col3) / _col4) = 0) is not true and ((power(((_col5 - ((_col6 * _col6) / _col4)) / CASE WHEN ((_col4 = 1L)) THEN (null) ELSE ((_col4 - 1)) END), 0.5) / (UDFToDouble(_col3) / _col4)) > 1.0D))
                    Select Operator [SEL_133] (rows=36099 width=40)
                      Output:["_col0","_col1","_col3","_col4","_col5","_col6"]
                      Group By Operator [GBY_132] (rows=36099 width=140)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2
                      <-Reducer 5 [SIMPLE_EDGE]
                        SHUFFLE [RS_52]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_51] (rows=36099 width=140)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col3)","count(_col3)","sum(_col5)","sum(_col4)"],keys:_col1, _col2, _col0
                            Select Operator [SEL_49] (rows=1032514 width=108)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                              Map Join Operator [MAPJOIN_105] (rows=1032514 width=108)
                                Conds:MERGEJOIN_104._col2=RS_131._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col7","_col8","_col9"]
                              <-Map 9 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_131]
                                  PartitionCols:_col0
                                  Select Operator [SEL_129] (rows=27 width=104)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_128] (rows=27 width=104)
                                      predicate:w_warehouse_sk is not null
                                      TableScan [TS_9] (rows=27 width=104)
                                        default@warehouse,warehouse,Tbl:COMPLETE,Col:COMPLETE,Output:["w_warehouse_sk","w_warehouse_name"]
                              <-Merge Join Operator [MERGEJOIN_104] (rows=1032514 width=8)
                                  Conds:RS_123._col1=RS_127._col0(Inner),Output:["_col2","_col3","_col7"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_123]
                                    PartitionCols:_col1
                                    Map Join Operator [MAPJOIN_121] (rows=1032514 width=8)
                                      Conds:SEL_119._col0=RS_117._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                    <-Map 10 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_117]
                                        PartitionCols:_col0
                                        Select Operator [SEL_116] (rows=50 width=12)
                                          Output:["_col0"]
                                          Filter Operator [FIL_115] (rows=50 width=12)
                                            predicate:((d_moy = 5) and (d_year = 1999) and d_date_sk is not null)
                                            TableScan [TS_31] (rows=73049 width=12)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                    <-Select Operator [SEL_119] (rows=37584000 width=15)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_118] (rows=37584000 width=15)
                                          predicate:(inv_date_sk is not null and inv_item_sk is not null and inv_warehouse_sk is not null)
                                          TableScan [TS_0] (rows=37584000 width=15)
                                            default@inventory,inventory,Tbl:COMPLETE,Col:COMPLETE,Output:["inv_date_sk","inv_item_sk","inv_warehouse_sk","inv_quantity_on_hand"]
                                          <-Map 7 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_114]
                                              PartitionCols:_col0
                                              Select Operator [SEL_113] (rows=50 width=12)
                                                Output:["_col0"]
                                                Filter Operator [FIL_112] (rows=50 width=12)
                                                  predicate:((d_moy = 4) and (d_year = 1999) and d_date_sk is not null)
                                                  TableScan [TS_3] (rows=73049 width=12)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                <-Map 8 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_127]
                                    PartitionCols:_col0
                                    Select Operator [SEL_125] (rows=462000 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_124] (rows=462000 width=4)
                                        predicate:i_item_sk is not null
                                        TableScan [TS_6] (rows=462000 width=4)
                                          default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk"]
            <-Select Operator [SEL_140] (rows=6016 width=24)
                Output:["_col0","_col1","_col2","_col3"]
                Filter Operator [FIL_139] (rows=6016 width=40)
                  predicate:(((UDFToDouble(_col3) / _col4) = 0) is not true and ((power(((_col5 - ((_col6 * _col6) / _col4)) / CASE WHEN ((_col4 = 1L)) THEN (null) ELSE ((_col4 - 1)) END), 0.5) / (UDFToDouble(_col3) / _col4)) > 1.0D))
                  Select Operator [SEL_138] (rows=36099 width=40)
                    Output:["_col0","_col1","_col3","_col4","_col5","_col6"]
                    Group By Operator [GBY_137] (rows=36099 width=140)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)"],keys:KEY._col0, KEY._col1, KEY._col2
                    <-Reducer 2 [SIMPLE_EDGE]
                      SHUFFLE [RS_24]
                        PartitionCols:_col0, _col1, _col2
                        Group By Operator [GBY_23] (rows=36099 width=140)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col3)","count(_col3)","sum(_col5)","sum(_col4)"],keys:_col1, _col2, _col0
                          Select Operator [SEL_21] (rows=1032514 width=108)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Map Join Operator [MAPJOIN_102] (rows=1032514 width=108)
                              Conds:MERGEJOIN_101._col2=RS_130._col0(Inner),HybridGraceHashJoin:true,Output:["_col3","_col7","_col8","_col9"]
                            <-Map 9 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_130]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_129]
                            <-Merge Join Operator [MERGEJOIN_101] (rows=1032514 width=8)
                                Conds:RS_122._col1=RS_126._col0(Inner),Output:["_col2","_col3","_col7"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_122]
                                  PartitionCols:_col1
                                  Map Join Operator [MAPJOIN_120] (rows=1032514 width=8)
                                    Conds:SEL_119._col0=RS_114._col0(Inner),HybridGraceHashJoin:true,Output:["_col1","_col2","_col3"]
                                  <- Please refer to the previous Map 7 [BROADCAST_EDGE]
                                     Please refer to the previous Select Operator [SEL_119]
                              <-Map 8 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_126]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_125]

PREHOOK: query: with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
  and inv1.cov > 1.5
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
  and inv1.cov > 1.5
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
