PREHOOK: query: DROP TABLE IF EXISTS DECIMAL_UDF3
PREHOOK: type: DROPTABLE
POSTHOOK: query: DROP TABLE IF EXISTS DECIMAL_UDF3
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE DECIMAL_UDF3_TXT (key decimal(20,10), value int)
ROW FORMAT DELIMITED
   FIELDS TERMINATED BY ' '
STORED AS TEXTFILE
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@DECIMAL_UDF3_TXT
POSTHOOK: query: CREATE TABLE DECIMAL_UDF3_TXT (key decimal(20,10), value int)
ROW FORMAT DELIMITED
   FIELDS TERMINATED BY ' '
STORED AS TEXTFILE
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DECIMAL_UDF3_TXT
PREHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/kv7.txt' INTO TABLE DECIMAL_UDF3_TXT
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@decimal_udf3_txt
POSTHOOK: query: LOAD DATA LOCAL INPATH '../../data/files/kv7.txt' INTO TABLE DECIMAL_UDF3_TXT
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@decimal_udf3_txt
PREHOOK: query: CREATE TABLE DECIMAL_UDF3 STORED AS ORC AS SELECT * FROM DECIMAL_UDF3_TXT
PREHOOK: type: CREATETABLE_AS_SELECT
PREHOOK: Input: default@decimal_udf3_txt
PREHOOK: Output: database:default
PREHOOK: Output: default@DECIMAL_UDF3
POSTHOOK: query: CREATE TABLE DECIMAL_UDF3 STORED AS ORC AS SELECT * FROM DECIMAL_UDF3_TXT
POSTHOOK: type: CREATETABLE_AS_SELECT
POSTHOOK: Input: default@decimal_udf3_txt
POSTHOOK: Output: database:default
POSTHOOK: Output: default@DECIMAL_UDF3
POSTHOOK: Lineage: decimal_udf3.key SIMPLE [(decimal_udf3_txt)decimal_udf3_txt.FieldSchema(name:key, type:decimal(20,10), comment:null), ]
POSTHOOK: Lineage: decimal_udf3.value SIMPLE [(decimal_udf3_txt)decimal_udf3_txt.FieldSchema(name:value, type:int, comment:null), ]
PREHOOK: query: select * from DECIMAL_UDF3_TXT
PREHOOK: type: QUERY
PREHOOK: Input: default@decimal_udf3_txt
#### A masked pattern was here ####
POSTHOOK: query: select * from DECIMAL_UDF3_TXT
POSTHOOK: type: QUERY
POSTHOOK: Input: default@decimal_udf3_txt
#### A masked pattern was here ####
-4400.0000000000	4400
NULL	0
0.0000000000	0
0.0000000000	0
100.0000000000	100
10.0000000000	10
1.0000000000	1
0.1000000000	0
0.0100000000	0
200.0000000000	200
20.0000000000	20
2.0000000000	2
0.0000000000	0
0.2000000000	0
0.0200000000	0
0.3000000000	0
0.3300000000	0
0.3330000000	0
-0.3000000000	0
-0.3300000000	0
-0.3330000000	0
1.0000000000	1
2.0000000000	2
3.1400000000	3
-1.1200000000	-1
-1.1200000000	-1
-1.1220000000	-11
1.1200000000	1
1.1220000000	1
124.0000000000	124
125.2000000000	125
-1255.4900000000	-1255
3.1400000000	3
3.1400000000	3
3.1400000000	4
1.0000000000	1
-1234567890.1234567890	-1234567890
1234567890.1234567800	1234567890
PREHOOK: query: explain
select lpad(key, 22, ' '), lpad(cast(key as string), 22, ' '), lpad(cast(key as char(22)), 22, ' '), lpad(cast(key as varchar(22)), 22, ' ') from DECIMAL_UDF3_TXT
PREHOOK: type: QUERY
POSTHOOK: query: explain
select lpad(key, 22, ' '), lpad(cast(key as string), 22, ' '), lpad(cast(key as char(22)), 22, ' '), lpad(cast(key as varchar(22)), 22, ' ') from DECIMAL_UDF3_TXT
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: decimal_udf3_txt
            Statistics: Num rows: 3 Data size: 359 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: lpad(key, 22, ' ') (type: string), lpad(CAST( key AS STRING), 22, ' ') (type: string), lpad(CAST( key AS CHAR(22), 22, ' ') (type: string), lpad(CAST( key AS varchar(22)), 22, ' ') (type: string)
              outputColumnNames: _col0, _col1, _col2, _col3
              Statistics: Num rows: 3 Data size: 359 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 3 Data size: 359 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select lpad(key, 22, ' '), lpad(cast(key as string), 22, ' '), lpad(cast(key as char(22)), 22, ' '), lpad(cast(key as varchar(22)), 22, ' ') from DECIMAL_UDF3_TXT
PREHOOK: type: QUERY
PREHOOK: Input: default@decimal_udf3_txt
#### A masked pattern was here ####
POSTHOOK: query: select lpad(key, 22, ' '), lpad(cast(key as string), 22, ' '), lpad(cast(key as char(22)), 22, ' '), lpad(cast(key as varchar(22)), 22, ' ') from DECIMAL_UDF3_TXT
POSTHOOK: type: QUERY
POSTHOOK: Input: default@decimal_udf3_txt
#### A masked pattern was here ####
      -4400.0000000000	      -4400.0000000000	      -4400.0000000000	      -4400.0000000000
NULL	NULL	NULL	NULL
          0.0000000000	          0.0000000000	          0.0000000000	          0.0000000000
          0.0000000000	          0.0000000000	          0.0000000000	          0.0000000000
        100.0000000000	        100.0000000000	        100.0000000000	        100.0000000000
         10.0000000000	         10.0000000000	         10.0000000000	         10.0000000000
          1.0000000000	          1.0000000000	          1.0000000000	          1.0000000000
          0.1000000000	          0.1000000000	          0.1000000000	          0.1000000000
          0.0100000000	          0.0100000000	          0.0100000000	          0.0100000000
        200.0000000000	        200.0000000000	        200.0000000000	        200.0000000000
         20.0000000000	         20.0000000000	         20.0000000000	         20.0000000000
          2.0000000000	          2.0000000000	          2.0000000000	          2.0000000000
          0.0000000000	          0.0000000000	          0.0000000000	          0.0000000000
          0.2000000000	          0.2000000000	          0.2000000000	          0.2000000000
          0.0200000000	          0.0200000000	          0.0200000000	          0.0200000000
          0.3000000000	          0.3000000000	          0.3000000000	          0.3000000000
          0.3300000000	          0.3300000000	          0.3300000000	          0.3300000000
          0.3330000000	          0.3330000000	          0.3330000000	          0.3330000000
         -0.3000000000	         -0.3000000000	         -0.3000000000	         -0.3000000000
         -0.3300000000	         -0.3300000000	         -0.3300000000	         -0.3300000000
         -0.3330000000	         -0.3330000000	         -0.3330000000	         -0.3330000000
          1.0000000000	          1.0000000000	          1.0000000000	          1.0000000000
          2.0000000000	          2.0000000000	          2.0000000000	          2.0000000000
          3.1400000000	          3.1400000000	          3.1400000000	          3.1400000000
         -1.1200000000	         -1.1200000000	         -1.1200000000	         -1.1200000000
         -1.1200000000	         -1.1200000000	         -1.1200000000	         -1.1200000000
         -1.1220000000	         -1.1220000000	         -1.1220000000	         -1.1220000000
          1.1200000000	          1.1200000000	          1.1200000000	          1.1200000000
          1.1220000000	          1.1220000000	          1.1220000000	          1.1220000000
        124.0000000000	        124.0000000000	        124.0000000000	        124.0000000000
        125.2000000000	        125.2000000000	        125.2000000000	        125.2000000000
      -1255.4900000000	      -1255.4900000000	      -1255.4900000000	      -1255.4900000000
          3.1400000000	          3.1400000000	          3.1400000000	          3.1400000000
          3.1400000000	          3.1400000000	          3.1400000000	          3.1400000000
          3.1400000000	          3.1400000000	          3.1400000000	          3.1400000000
          1.0000000000	          1.0000000000	          1.0000000000	          1.0000000000
-1234567890.1234567890	-1234567890.1234567890	-1234567890.1234567890	-1234567890.1234567890
 1234567890.1234567800	 1234567890.1234567800	 1234567890.1234567800	 1234567890.1234567800
PREHOOK: query: explain
select
  substring(concat('          ', key), (10 + length(key) - 22)+1, 22),
  substring(concat('          ', cast(key as string)), (10 + length(cast(key as string)) - 22)+1, 22),
  substring(concat('          ', cast(key as char(22))), (10 + length(cast(key as char(22))) - 22)+1, 22),
  substring(concat('          ', cast(key as varchar(22))), (10 + length(cast(key as varchar(22))) - 22)+1, 22)
from DECIMAL_UDF3
PREHOOK: type: QUERY
POSTHOOK: query: explain
select
  substring(concat('          ', key), (10 + length(key) - 22)+1, 22),
  substring(concat('          ', cast(key as string)), (10 + length(cast(key as string)) - 22)+1, 22),
  substring(concat('          ', cast(key as char(22))), (10 + length(cast(key as char(22))) - 22)+1, 22),
  substring(concat('          ', cast(key as varchar(22))), (10 + length(cast(key as varchar(22))) - 22)+1, 22)
from DECIMAL_UDF3
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: decimal_udf3
            Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: substring(concat('          ', key), (((10 + length(key)) - 22) + 1), 22) (type: string), substring(concat('          ', CAST( key AS STRING)), (((10 + length(CAST( key AS STRING))) - 22) + 1), 22) (type: string), substring(concat('          ', CAST( key AS CHAR(22)), (((10 + length(CAST( key AS CHAR(22))) - 22) + 1), 22) (type: string), substring(concat('          ', CAST( key AS varchar(22))), (((10 + length(CAST( key AS varchar(22)))) - 22) + 1), 22) (type: string)
              outputColumnNames: _col0, _col1, _col2, _col3
              Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select
  substring(concat('          ', key), (10 + length(key) - 22)+1, 22),
  substring(concat('          ', cast(key as string)), (10 + length(cast(key as string)) - 22)+1, 22),
  substring(concat('          ', cast(key as char(22))), (10 + length(cast(key as char(22))) - 22)+1, 22),
  substring(concat('          ', cast(key as varchar(22))), (10 + length(cast(key as varchar(22))) - 22)+1, 22)
from DECIMAL_UDF3
PREHOOK: type: QUERY
PREHOOK: Input: default@decimal_udf3
#### A masked pattern was here ####
POSTHOOK: query: select
  substring(concat('          ', key), (10 + length(key) - 22)+1, 22),
  substring(concat('          ', cast(key as string)), (10 + length(cast(key as string)) - 22)+1, 22),
  substring(concat('          ', cast(key as char(22))), (10 + length(cast(key as char(22))) - 22)+1, 22),
  substring(concat('          ', cast(key as varchar(22))), (10 + length(cast(key as varchar(22))) - 22)+1, 22)
from DECIMAL_UDF3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@decimal_udf3
#### A masked pattern was here ####
      -4400.0000000000	      -4400.0000000000	      -4400.0000000000	      -4400.0000000000
NULL	NULL	NULL	NULL
          0.0000000000	          0.0000000000	          0.0000000000	          0.0000000000
          0.0000000000	          0.0000000000	          0.0000000000	          0.0000000000
        100.0000000000	        100.0000000000	        100.0000000000	        100.0000000000
         10.0000000000	         10.0000000000	         10.0000000000	         10.0000000000
          1.0000000000	          1.0000000000	          1.0000000000	          1.0000000000
          0.1000000000	          0.1000000000	          0.1000000000	          0.1000000000
          0.0100000000	          0.0100000000	          0.0100000000	          0.0100000000
        200.0000000000	        200.0000000000	        200.0000000000	        200.0000000000
         20.0000000000	         20.0000000000	         20.0000000000	         20.0000000000
          2.0000000000	          2.0000000000	          2.0000000000	          2.0000000000
          0.0000000000	          0.0000000000	          0.0000000000	          0.0000000000
          0.2000000000	          0.2000000000	          0.2000000000	          0.2000000000
          0.0200000000	          0.0200000000	          0.0200000000	          0.0200000000
          0.3000000000	          0.3000000000	          0.3000000000	          0.3000000000
          0.3300000000	          0.3300000000	          0.3300000000	          0.3300000000
          0.3330000000	          0.3330000000	          0.3330000000	          0.3330000000
         -0.3000000000	         -0.3000000000	         -0.3000000000	         -0.3000000000
         -0.3300000000	         -0.3300000000	         -0.3300000000	         -0.3300000000
         -0.3330000000	         -0.3330000000	         -0.3330000000	         -0.3330000000
          1.0000000000	          1.0000000000	          1.0000000000	          1.0000000000
          2.0000000000	          2.0000000000	          2.0000000000	          2.0000000000
          3.1400000000	          3.1400000000	          3.1400000000	          3.1400000000
         -1.1200000000	         -1.1200000000	         -1.1200000000	         -1.1200000000
         -1.1200000000	         -1.1200000000	         -1.1200000000	         -1.1200000000
         -1.1220000000	         -1.1220000000	         -1.1220000000	         -1.1220000000
          1.1200000000	          1.1200000000	          1.1200000000	          1.1200000000
          1.1220000000	          1.1220000000	          1.1220000000	          1.1220000000
        124.0000000000	        124.0000000000	        124.0000000000	        124.0000000000
        125.2000000000	        125.2000000000	        125.2000000000	        125.2000000000
      -1255.4900000000	      -1255.4900000000	      -1255.4900000000	      -1255.4900000000
          3.1400000000	          3.1400000000	          3.1400000000	          3.1400000000
          3.1400000000	          3.1400000000	          3.1400000000	          3.1400000000
          3.1400000000	          3.1400000000	          3.1400000000	          3.1400000000
          1.0000000000	          1.0000000000	          1.0000000000	          1.0000000000
-1234567890.1234567890	-1234567890.1234567890	-1234567890.1234567890	-1234567890.1234567890
 1234567890.1234567800	 1234567890.1234567800	 1234567890.1234567800	 1234567890.1234567800
PREHOOK: query: explain
select
  substring(concat('          ', key), (10 + length(key) - 22)+1, 22),
  substring(concat('          ', cast(key as string)), (10 + length(cast(key as string)) - 22)+1, 22),
  substring(concat('          ', cast(key as char(22))), (10 + length(cast(key as char(22))) - 22)+1, 22),
  substring(concat('          ', cast(key as varchar(22))), (10 + length(cast(key as varchar(22))) - 22)+1, 22)
from DECIMAL_UDF3
PREHOOK: type: QUERY
POSTHOOK: query: explain
select
  substring(concat('          ', key), (10 + length(key) - 22)+1, 22),
  substring(concat('          ', cast(key as string)), (10 + length(cast(key as string)) - 22)+1, 22),
  substring(concat('          ', cast(key as char(22))), (10 + length(cast(key as char(22))) - 22)+1, 22),
  substring(concat('          ', cast(key as varchar(22))), (10 + length(cast(key as varchar(22))) - 22)+1, 22)
from DECIMAL_UDF3
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Map Reduce
      Map Operator Tree:
          TableScan
            alias: decimal_udf3
            Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
            Select Operator
              expressions: substring(concat('          ', key), (((10 + length(key)) - 22) + 1), 22) (type: string), substring(concat('          ', CAST( key AS STRING)), (((10 + length(CAST( key AS STRING))) - 22) + 1), 22) (type: string), substring(concat('          ', CAST( key AS CHAR(22)), (((10 + length(CAST( key AS CHAR(22))) - 22) + 1), 22) (type: string), substring(concat('          ', CAST( key AS varchar(22))), (((10 + length(CAST( key AS varchar(22)))) - 22) + 1), 22) (type: string)
              outputColumnNames: _col0, _col1, _col2, _col3
              Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
              File Output Operator
                compressed: false
                Statistics: Num rows: 38 Data size: 4296 Basic stats: COMPLETE Column stats: NONE
                table:
                    input format: org.apache.hadoop.mapred.TextInputFormat
                    output format: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
                    serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
      Execution mode: vectorized

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: select
  substring(concat('          ', key), (10 + length(key) - 22)+1, 22),
  substring(concat('          ', cast(key as string)), (10 + length(cast(key as string)) - 22)+1, 22),
  substring(concat('          ', cast(key as char(22))), (10 + length(cast(key as char(22))) - 22)+1, 22),
  substring(concat('          ', cast(key as varchar(22))), (10 + length(cast(key as varchar(22))) - 22)+1, 22)
from DECIMAL_UDF3
PREHOOK: type: QUERY
PREHOOK: Input: default@decimal_udf3
#### A masked pattern was here ####
POSTHOOK: query: select
  substring(concat('          ', key), (10 + length(key) - 22)+1, 22),
  substring(concat('          ', cast(key as string)), (10 + length(cast(key as string)) - 22)+1, 22),
  substring(concat('          ', cast(key as char(22))), (10 + length(cast(key as char(22))) - 22)+1, 22),
  substring(concat('          ', cast(key as varchar(22))), (10 + length(cast(key as varchar(22))) - 22)+1, 22)
from DECIMAL_UDF3
POSTHOOK: type: QUERY
POSTHOOK: Input: default@decimal_udf3
#### A masked pattern was here ####
      -4400.0000000000	      -4400.0000000000	      -4400.0000000000	      -4400.0000000000
NULL	NULL	NULL	NULL
          0.0000000000	          0.0000000000	          0.0000000000	          0.0000000000
          0.0000000000	          0.0000000000	          0.0000000000	          0.0000000000
        100.0000000000	        100.0000000000	        100.0000000000	        100.0000000000
         10.0000000000	         10.0000000000	         10.0000000000	         10.0000000000
          1.0000000000	          1.0000000000	          1.0000000000	          1.0000000000
          0.1000000000	          0.1000000000	          0.1000000000	          0.1000000000
          0.0100000000	          0.0100000000	          0.0100000000	          0.0100000000
        200.0000000000	        200.0000000000	        200.0000000000	        200.0000000000
         20.0000000000	         20.0000000000	         20.0000000000	         20.0000000000
          2.0000000000	          2.0000000000	          2.0000000000	          2.0000000000
          0.0000000000	          0.0000000000	          0.0000000000	          0.0000000000
          0.2000000000	          0.2000000000	          0.2000000000	          0.2000000000
          0.0200000000	          0.0200000000	          0.0200000000	          0.0200000000
          0.3000000000	          0.3000000000	          0.3000000000	          0.3000000000
          0.3300000000	          0.3300000000	          0.3300000000	          0.3300000000
          0.3330000000	          0.3330000000	          0.3330000000	          0.3330000000
         -0.3000000000	         -0.3000000000	         -0.3000000000	         -0.3000000000
         -0.3300000000	         -0.3300000000	         -0.3300000000	         -0.3300000000
         -0.3330000000	         -0.3330000000	         -0.3330000000	         -0.3330000000
          1.0000000000	          1.0000000000	          1.0000000000	          1.0000000000
          2.0000000000	          2.0000000000	          2.0000000000	          2.0000000000
          3.1400000000	          3.1400000000	          3.1400000000	          3.1400000000
         -1.1200000000	         -1.1200000000	         -1.1200000000	         -1.1200000000
         -1.1200000000	         -1.1200000000	         -1.1200000000	         -1.1200000000
         -1.1220000000	         -1.1220000000	         -1.1220000000	         -1.1220000000
          1.1200000000	          1.1200000000	          1.1200000000	          1.1200000000
          1.1220000000	          1.1220000000	          1.1220000000	          1.1220000000
        124.0000000000	        124.0000000000	        124.0000000000	        124.0000000000
        125.2000000000	        125.2000000000	        125.2000000000	        125.2000000000
      -1255.4900000000	      -1255.4900000000	      -1255.4900000000	      -1255.4900000000
          3.1400000000	          3.1400000000	          3.1400000000	          3.1400000000
          3.1400000000	          3.1400000000	          3.1400000000	          3.1400000000
          3.1400000000	          3.1400000000	          3.1400000000	          3.1400000000
          1.0000000000	          1.0000000000	          1.0000000000	          1.0000000000
-1234567890.1234567890	-1234567890.1234567890	-1234567890.1234567890	-1234567890.1234567890
 1234567890.1234567800	 1234567890.1234567800	 1234567890.1234567800	 1234567890.1234567800
PREHOOK: query: DROP TABLE IF EXISTS DECIMAL_UDF3
PREHOOK: type: DROPTABLE
PREHOOK: Input: default@decimal_udf3
PREHOOK: Output: default@decimal_udf3
POSTHOOK: query: DROP TABLE IF EXISTS DECIMAL_UDF3
POSTHOOK: type: DROPTABLE
POSTHOOK: Input: default@decimal_udf3
POSTHOOK: Output: default@decimal_udf3
